<?xml version="1.0"?>
<section xml:id="variables_choosing-mnemonic-variable-names">
  <title>Choosing mnemonic variable names</title>
<idx>Mnemonic</idx>
<idx>Reserved Words</idx>
  <p>As long as you follow the simple rules of variable naming, and avoid
            reserved words, you have a lot of choice when you name your variables.
            In the beginning, this choice can be confusing both when you read a
            program and when you write your own programs. For example, the following
            three programs are identical in terms of what they accomplish, but very
            different when you read them and try to understand them.</p>
  <program xml:id="var-ac-10-names1" interactive="activecode" language="python">
    <input>
a = 35.0
b = 12.50
c = a * b
print(c)
        </input>
  </program>
  <program xml:id="o2-ac-10-names2" interactive="activecode" language="python">
    <input>
hours = 35.0
rate = 12.50
pay = hours * rate
print(pay)
        </input>
  </program>
  <program xml:id="var-ac-10-names3" interactive="activecode" language="python">
    <input>
x1q3z9ahd = 35.0
x1q3z9afd = 12.50
x1q3p9afd = x1q3z9ahd * x1q3z9afd
print(x1q3p9afd)
        </input>
  </program>
  <p>The Python interpreter sees all three of these programs as <em>exactly the
                same</em> but humans see and understand these programs quite differently.
            Humans will most quickly understand the <em>intent</em> of the
            second program because the programmer has chosen variable names that
            reflect their intent regarding what data will be stored in each
            variable.</p>
  <p>We call these wisely chosen variable names <q>mnemonic variable names</q>.
            The word <em>mnemonic</em>[See <url href="https://en.wikipedia.org/wiki/Mnemonic" visual="https://en.wikipedia.org/wiki/Mnemonic">https://en.wikipedia.org/wiki/Mnemonic</url> for an extended
            description of the word <q>mnemonic</q>.] means <q>memory aid</q>. We choose mnemonic variable
            names to help us remember why we created the variable in the first
            place.</p>
  <exercise label="var-mnemonic-mc-definition">
    <statement>
      <p>csp-10-2-4: Mnemonic means:</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>memory aid</p>
        </statement>
        <feedback>
          <p>We choose mnemonic variable names to help us remember why we created the variable in the first place.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>nickname</p>
        </statement>
        <feedback>
          <p>No, reread above.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>remember this</p>
        </statement>
        <feedback>
          <p>No, reread above.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>useful</p>
        </statement>
        <feedback>
          <p>No, reread above.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <p>While this all sounds great, and it is a very good idea to use mnemonic
            variable names, mnemonic variable names can get in the way of a
            beginning programmer's ability to parse and understand code. This is
            because beginning programmers have not yet memorized the reserved words
            (there are only 33 of them) and sometimes variables with names that are
            too descriptive start to look like part of the language and not just
            well-chosen variable names.</p>
  <p>Take a quick look at the following Python sample code which loops
            through some data. We will cover loops soon, but for now try to just
            puzzle through what this means:</p>
  <program language="python">
    <input>
for word in words:
    print(word)
</input>
  </program>
  <p>What is happening here? Which of the tokens (for, word, in, etc.) are
            reserved words and which are just variable names? Does Python understand
            at a fundamental level the notion of words? Beginning programmers have
            trouble separating what parts of the code <em>must</em> be the same as this
            example and what parts of the code are simply choices made by the
            programmer.</p>
  <p>The following code is equivalent to the above code:</p>
  <program language="python">
    <input>
for slice in pizza:
    print(slice)
</input>
  </program>
  <p>It is easier for the beginning programmer to look at this code and know
            which parts are reserved words defined by Python and which parts are
            simply variable names chosen by the programmer. It is pretty clear that
            Python has no fundamental understanding of pizza and slices and the fact
            that a pizza consists of a set of one or more slices.</p>
  <p>But if our program is truly about reading data and looking for words in
            the data, <c>pizza</c> and <c>slice</c> are very un-mnemonic
            variable names. Choosing them as variable names distracts from the
            meaning of the program.</p>
<!--  <p>After a pretty short period of time, you will know the most common
            reserved words and you will start to see the reserved words jumping out
            at you:</p>
  <raw format="html" xml:space="preserve">&lt;pre&gt;
&lt;b&gt;for&lt;/b&gt; word &lt;b&gt;in&lt;/b&gt; words&lt;b&gt;:&lt;/b&gt;
    &lt;b&gt;print&lt;/b&gt;(word)
    &lt;/pre&gt;</raw>-->
    <p>After a pretty short period of time, you will know the most common
            reserved words and you will start to see the reserved words jumping out
            at you. See if you can tell which ones they are in this code:</p>
          <pre>
            for word in words:
                print(word)
              </pre>
<!--
  <p>The parts of the code that are defined by Python (<c>for</c>,
            <c>in</c>, <c>print</c>, and <c>:</c>) are in bold and
            the programmer-chosen variables (<c>word</c> and
              <c>words</c>) are not in bold. -->
              <p>The parts of the code that are defined by Python are <c>for</c>, <c>in</c>, <c>print</c>, and <c>:</c>. Many text editors are aware of
            Python syntax and will color reserved words differently to give you
            clues to keep your variables and reserved words separate. After a while
            you will begin to read Python and quickly determine what is a variable
            and what is a reserved word.</p>
  <exercise label="var-mnemonic-mc-name-v2">
    <statement>
      <p>csp-10-2-5: Which variable name would best be used for counting the ingredients in cookies?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>word</p>
        </statement>
        <feedback>
          <p>No, which variable name would be useful when talking about the number of ingredients?</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>ingredients</p>
        </statement>
        <feedback>
          <p>Yes, the variable ingredients would be handy for counting the ingredients in a cookie.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>gelPens</p>
        </statement>
        <feedback>
          <p>No, which variable name would be useful when talking about the number of ingredients?</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>pizza</p>
        </statement>
        <feedback>
          <p>No, which variable name would be useful when talking about the number of ingredients?</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>
