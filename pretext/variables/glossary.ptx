<?xml version="1.0"?>
<section xml:id="variables_glossary">
  <title>Glossary</title>
  <glossary sorted="False">
    <gi>
      <title>Assignment</title>
      <p>A statement that assigns a value to a variable.</p>
    </gi>
    <gi>
      <title>Concatenate</title>
      <p>To join two operands end to end.</p>
    </gi>
    <gi>
      <title>Comment</title>
      <p>Information in a program that is meant for other programmers (or
                            anyone reading the source code) and has no effect on the execution
                            of the program.</p>
    </gi>
    <gi>
      <title>Evaluate</title>
      <p>To simplify an expression by performing the operations in order to yield a single value.</p>
    </gi>
    <gi>
      <title>Expression</title>
      <p>A combination of variables, operators, and values that represents a
                            single result value.</p>
    </gi>
    <gi>
      <title>Floating Point</title>
      <p>A type that represents numbers with fractional parts.</p>
    </gi>
    <gi>
      <title>Integer</title>
      <p>A type that represents whole numbers.</p>
    </gi>
    <gi>
      <title>Keyword</title>
      <p>A reserved word that is used by the compiler to parse a program; you
                            cannot use keywords like <c>if</c>, <c>def</c>, and
                            <c>while</c> as variable names.</p>
    </gi>
    <gi>
      <title>Mnemonic</title>
      <p>A memory aid. We often give variables mnemonic names to help us
                            remember what is stored in the variable.</p>
    </gi>
    <gi>
      <title>Modulus Operator</title>
      <p>An operator, denoted with a percent sign (<c>%</c>), that
                            works on integers and yields the remainder when one number is
                            divided by another.</p>
    </gi>
    <gi>
      <title>Operand</title>
      <p>One of the values on which an operator operates.</p>
    </gi>
    <gi>
      <title>Operator</title>
      <p>A special symbol that represents a simple computation like addition,
                            multiplication, or string concatenation.</p>
    </gi>
    <gi>
      <title>Rules of Precedence</title>
      <p>The set of rules governing the order in which expressions involving
                            multiple operators and operands are evaluated.</p>
    </gi>
    <gi>
      <title>Statement</title>
      <p>A section of code that represents a command or action. So far, the
                            statements we have seen are assignments and print expression statement.</p>
    </gi>
    <gi>
      <title>String</title>
      <p>A type that represents sequences of characters.</p>
    </gi>
    <gi>
      <title>Type</title>
      <p>A category of values. The types we have seen so far are integers
                            (type <c>int</c>), floating-point numbers (type
                            <c>float</c>), and strings (type <c>str</c>).</p>
    </gi>
    <gi>
      <title>Value</title>
      <p>One of the basic units of data, like a number or string, that a
                            program manipulates.</p>
    </gi>
    <gi>
      <title>Variable</title>
      <p>A name that refers to a value.</p>
    </gi>
  </glossary>
  <exercise label="varGlossary1">
    <statement>
      <p>Match each term with its definition.</p>
    </statement>
    <feedback>
      <p>Look above for these terms.</p>
    </feedback>
    <matches>
      <match order="1">
        <premise>floating point</premise>
        <response>A type that represents numbers with fractional parts.</response>
      </match>
      <match order="2">
        <premise>integer</premise>
        <response>A type that represents whole numbers.</response>
      </match>
      <match order="3">
        <premise>string</premise>
        <response>A type that represents sequences of characters.</response>
      </match>
      <match order="4">
        <premise>type</premise>
        <response>A category of values such as integers (<q>int</q>), floating-point numbers (<q>float</q>), and strings (<q>str</q>).</response>
      </match>
    </matches>
  </exercise>
  <exercise label="varGlossary2">
    <statement>
      <p>Match each term with its definition.</p>
    </statement>
    <feedback>
      <p>Look above for these terms.</p>
    </feedback>
    <matches>
      <match order="1">
        <premise>assignment</premise>
        <response>A statement that assigns a value to a variable.</response>
      </match>
      <match order="2">
        <premise>keyword</premise>
        <response>A reserved word that is used by the compiler to parse a program; you cannot use keywords like <q>if</q> , <q>def</q> , and <q>while</q> as variable names.</response>
      </match>
      <match order="3">
        <premise>mnemonic</premise>
        <response>A memory aid. We often give variables mnemonic names to help us remember what is stored in the variable.</response>
      </match>
      <match order="4">
        <premise>value</premise>
        <response>One of the basic units of data, like a number or string, that a program manipulates.</response>
      </match>
      <match order="5">
        <premise>variable</premise>
        <response>A name that refers to a value.</response>
      </match>
    </matches>
  </exercise>
  <exercise label="varGlossary3">
    <statement>
      <p>Match each term with its definition.</p>
    </statement>
    <feedback>
      <p>Look above for these terms.</p>
    </feedback>
    <matches>
      <match order="1">
        <premise>expression</premise>
        <response>A combination of variables, operators, and values that represents a single result value.</response>
      </match>
      <match order="2">
        <premise>modulus operator</premise>
        <response>An operator, denoted with a percent sign (%), that works on integers and yields the remainder when one number is divided by another.</response>
      </match>
      <match order="3">
        <premise>operand</premise>
        <response>One of the values on which an operator operates.</response>
      </match>
      <match order="4">
        <premise>operator</premise>
        <response>A special symbol that represents a simple computation like addition, multiplication, or string concatenation.</response>
      </match>
      <match order="5">
        <premise>rules of precedence</premise>
        <response>The set of rules governing the order in which expressions involving multiple operators and operands are evaluated.</response>
      </match>
    </matches>
  </exercise>
  <exercise label="varGlossary4">
    <statement>
      <p>Match each term with its definition.</p>
    </statement>
    <feedback>
      <p>Look above for these terms.</p>
    </feedback>
    <matches>
      <match order="1">
        <premise>concatenate</premise>
        <response>To join two operands end to end.</response>
      </match>
      <match order="2">
        <premise>comment</premise>
        <response>Information in a program that is meant for other programmers (or anyone reading the source code) and has no effect on the execution of the program.</response>
      </match>
      <match order="3">
        <premise>evaluate</premise>
        <response>To simplify an expression by performing the operations in order to yield a single value.</response>
      </match>
      <match order="4">
        <premise>statement</premise>
        <response>A section of code that represents a command or action. So far, the statements we have seen are assignments and print expression statement.</response>
      </match>
    </matches>
  </exercise>
</section>
