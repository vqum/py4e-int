<?xml version="1.0"?>
<section xml:id="variables_write-code-questions">
  <title>Write Code Questions</title>
        <exercise exercise-interactive="coding">
          <statement>
            <p>There are 3 syntax errors in the following code. Fix it to print correctly
                            without errors. It will print, <q>Her name is Molly and her favorite food is tuna</q>.</p>
          </statement>
          <program interactive="activecode" language="python" xml:id="var-wc-syntax_editor">
            <input>
food = "tuna'
name = 'Molly'
print("Her name is " + name +  and her favorite food is "  food + ".")
        </input>
          </program>
          <solution>


    
                        There are 3 syntax errors in the following code. Fix it to print correctly
                            without errors. It will print, <q>Her name is Molly and her favorite food is tuna</q>.

    
    <program xml:id="var-wc-syntaxA_editor"  interactive="activecode" language="python"><input>
# Each set of quotes needs to be matching
food = 'tuna'
name = 'Molly'

# Place full sets of quotes around strings to be printed
# Include spaces before and after where variables are printed
# Add + between strings
print("Her name is " + name + " and her favorite food is " + food + ".")
        </input></program>

                    
<!--
<exercise label="var-wc-syntaxA"><statement><p>There are 3 syntax errors in the following code. Fix it to print correctly
                            without errors. It will print, <q>Her name is Molly and her favorite food is tuna</q>.</p></statement><program xml:id="var-wc-syntaxA_editor" interactive="activecode" language="python"><input>
# Each set of quotes needs to be matching
food = 'tuna'
name = 'Molly'

# Place full sets of quotes around strings to be printed
# Include spaces before and after where variables are printed
# Add + between strings
print("Her name is " + name + " and her favorite food is " + food + ".")
    </input></program></exercise>-->
                    </solution>
        </exercise>

        <exercise label="var-wc-fruitq" exercise-interactive="coding">
          <statement>
            <p>Let's say that apples are $0.40 apiece, and pears are $0.65 apiece.
                    Modify the program below to calculate the total cost of 4 apples and 3 pears</p>
          </statement>
          <program xml:id="var-wc-fruitq_editor" interactive="activecode" language="python">
            <input>
apples = 4
pears = 3
totalCost =
print(totalCost)

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertAlmostEqual(totalCost,3.55, 2, "totalCost should equal 3.55", 0.2)

myTests().main()
        </input>
          </program>
        </exercise>

        <exercise>
          <statement>
            <p>Take the phrase: <term>twinkle twinkle little star</term>.
                            Store each word in a separate variable, then print out the sentence on
                            one line using <c>print</c>.</p>
          </statement>
          <program interactive="activecode" language="python" xml:id="var-wc-rhymeq_editor">
            <input>

        </input>
          </program>
          <solution>


    
                        Take the phrase: twinkle twinkle little star.
                            Store each word in a separate variable, then print out the sentence on
                            one line using print.

    
    <program xml:id="var-wc-rhymeA_editor" language="python"><input>
# Set each word to its own variable
word1 = "twinkle"
word2 = "little"
word3 = "star"

# Print each word in succession
# Using commas automaticallly inserts spaces
print(word1, word1, word2, word3)

#another option is
#print(word1 + " " + word1 + " " + word2 + " " + word3)
        </input></program>

                    

<!--<exercise label="var-wc-rhymeA"><statement><p>Take the phrase: <term>twinkle twinkle little star</term>.
                            Store each word in a separate variable, then print out the sentence on
                            one line using <c>print</c>.</p></statement><program xml:id="var-wc-rhymeA_editor" interactive="activecode" language="python"><input>
# Set each word to its own variable
word1 = "twinkle"
word2 = "little"
word3 = "star"

# Print each word in succession
# Using commas automaticallly inserts spaces
print(word1, word1, word2, word3)

#another option is
#print(word1 + " " + word1 + " " + word2 + " " + word3)
    </input></program></exercise>-->
                    </solution>
        </exercise>

        <exercise label="var-wc-order">
          <statement>
            <p>Add parentheses to the following code so that the total equals 40.</p>
          </statement>
          <program xml:id="var-wc-order_editor" interactive="activecode" language="python">
            <input>
total = 7 + 3 * 6 - 2
print(total)

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(total,40)

myTests().main()
        </input>
          </program>
        </exercise>

        <exercise>
          <statement>
            <p>Many people keep time using a 24 hour clock (11 is 11am and 23 is 11pm, 0 is midnight).
                            If it is currently 13 and you set your alarm to go off in 50 hours, it will be 15 (3pm).
                            Write a Python program to solve the general version of the above problem. Ask the user
                            for the time now (in hours), and then ask for the number of hours to wait for the alarm.
                            Your program should output what the time will be on the clock when the alarm goes off.
                            <em>Using the <c>int()</c> function and modulus operator <c>%</c> could come in handy!</em></p>
          </statement>
          <program interactive="activecode" language="python" xml:id="var-wc-timeq_editor">
            <input>

current_time =
waiting_time =


hours =

print()
        </input>
          </program>
          <solution>


    
                        Many people keep time using a 24 hour clock (11 is 11am and 23 is 11pm, 0 is midnight).
                            If it is currently 13 and you set your alarm to go off in 50 hours, it will be 15 (3pm).
                            Write a Python program to solve the general version of the above problem. Ask the user
                            for the time now (in hours), and then ask for the number of hours to wait for the alarm.
                            Your program should output what the time will be on the clock when the alarm goes off.
                            Using the ``int()`` function and modulus operator ``%`` could come in handy!

    
    <program xml:id="var-wc-timeA_editor" language="python"><input>

#prompt the user for the current time
current_time_string = input("What is the current time (in hours)?")
#prompt the user for the time to wait
waiting_time_string = input("How many hours do you have to wait?")

#convert the current time and the time to wait to integers
current_time_int = int(current_time_string)
waiting_time_int = int(waiting_time_string)

#combine the two times
hours = current_time_int + waiting_time_int

#use the modulus operator to keep the time within 24 hours
timeofday = hours % 24

#print the time of day that the alarm will go off
print(timeofday)
        </input></program>

                    
<!--
<exercise label="var-wc-timeA"><statement><p>Many people keep time using a 24 hour clock (11 is 11am and 23 is 11pm, 0 is midnight).
                            If it is currently 13 and you set your alarm to go off in 50 hours, it will be 15 (3pm).
                            Write a Python program to solve the general version of the above problem. Ask the user
                            for the time now (in hours), and then ask for the number of hours to wait for the alarm.
                            Your program should output what the time will be on the clock when the alarm goes off.
                            <em>Using the ``int()`` function and modulus operator ``%`` could come in handy!</em></p></statement><program xml:id="var-wc-timeA_editor" interactive="activecode" language="python"><input>

#prompt the user for the current time
current_time_string = input("What is the current time (in hours)?")
#prompt the user for the time to wait
waiting_time_string = input("How many hours do you have to wait?")

#convert the current time and the time to wait to integers
current_time_int = int(current_time_string)
waiting_time_int = int(waiting_time_string)

#combine the two times
hours = current_time_int + waiting_time_int

#use the modulus operator to keep the time within 24 hours
timeofday = hours % 24

#print the time of day that the alarm will go off
print(timeofday)
    </input></program></exercise>-->
                    </solution>
        </exercise>

        <exercise label="var-wc-dog">
          <statement>
            <p>Assume that you have 24 slices of pizza and 7 people that are going to share it.
                    There's been some arguments among your friends, so you've decided to only give people whole slices.
                    Your pet dog Andy loves pizza. Write a Python expression with the modulus operator that calculates
                    how many pizza slices will be left over for your dog after serving just whole slices to 7 people.
                    Assign the result of that expression to <c>forAndy</c>.</p>
          </statement>
          <program xml:id="var-wc-dog_editor" interactive="activecode" language="python">
            <input>



====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(forAndy,3)

myTests().main()
        </input>
          </program>
        </exercise>

        <exercise>
          <statement>
            <p>Write a program that will convert inches to feet from user input.
                            Reminder: there are 12 inches in a foot.</p>
          </statement>
          <program interactive="activecode" language="python" xml:id="var-wc-feetq_editor">
            <input>

        </input>
          </program>
          <solution>


    
                        Write a program that will convert inches to feet from user input.
                            Reminder: there are 12 inches in a foot.

    
    <program xml:id="var-wc-feetA_editor" language="python"><input>

#prompt the user for the amount of inches they would like to convert
inches = input("How many inches would you like to convert?")

#convert the inches to an integer
inches_int = int(inches)

#convert to feet
feet = inches_int / 12

#print the amount of feet
print(feet)
        </input></program>

                    
<!--
<exercise label="var-wc-feetA"><statement><p>Write a program that will convert inches to feet from user input.
                            Reminder: there are 12 inches in a foot.</p></statement><program xml:id="var-wc-feetA_editor" interactive="activecode" language="python"><input>

#prompt the user for the amount of inches they would like to convert
inches = input("How many inches would you like to convert?")

#convert the inches to an integer
inches_int = int(inches)

#convert to feet
feet = inches_int / 12

#print the amount of feet
print(feet)
    </input></program></exercise>-->
                    </solution>
        </exercise>

        <exercise label="var-wc-inch">
          <statement>
            <p>Write a program that will convert feet to inches from user input.
                    Reminder: there are 12 inches in a foot.</p>
          </statement>
          <program xml:id="var-wc-inch_editor" interactive="activecode" language="python">
            <input>

        </input>
          </program>
        </exercise>

        <exercise>
          <statement>
            <p>Combine lines 4 and 5 in the code below to print: <q>270 is 4.0 hours and 30 minutes.</q>.</p>
          </statement>
          <program interactive="activecode" language="python" xml:id="var-wc-combine_editor">
            <input>
totalMinutes = 270
numMinutes = totalMinutes % 60
numHours = (totalMinutes - numMinutes) / 60
print(numHours)
print(numMinutes)
        </input>
          </program>
          <solution>


    
                        Combine lines 4 and 5 in the code below to print: <q>270 is 4.0 hours and 30 minutes.</q>.

    
    <program xml:id="var-wc-combineA_editor" language="python"><input>
totalMinutes = 270
numMinutes = totalMinutes % 60
numHours = (totalMinutes - numMinutes) / 60
# Use + and correctly spaced " " to write the variables out together
print(str(totalMinutes) + " is " + str(numHours) + " hours and " + str(numMinutes) + " minutes.")
        </input></program>

                    
<!--
<exercise label="var-wc-combineA"><statement><p>Combine lines 4 and 5 in the code below to print: <q>270 is 4.0 hours and 30 minutes.</q>.</p></statement><program xml:id="var-wc-combineA_editor" interactive="activecode" language="python"><input>
totalMinutes = 270
numMinutes = totalMinutes % 60
numHours = (totalMinutes - numMinutes) / 60
# Use + and correctly spaced " " to write the variables out together
print(str(totalMinutes) + " is " + str(numHours) + " hours and " + str(numMinutes) + " minutes.")
    </input></program></exercise>-->
                    </solution>
        </exercise>

        <exercise label="var-wc-madlibs">
          <statement>
            <p>Write code below to get at least 3 values from the user using the <c>input</c>
                    function and output a mad lib (which will use the input to tell a silly story).</p>
          </statement>
          <program xml:id="var-wc-madlibs_editor" interactive="activecode" language="python">
            <input>

        </input>
          </program>
        </exercise>
</section>
