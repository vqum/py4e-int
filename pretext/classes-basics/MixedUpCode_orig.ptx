<?xml version="1.0"?>
<section xml:id="classes-basics_mixed-up-code-exercises">
  <title>Mixed-Up Code Exercises</title>
  <exercise label="Classes_Basic_Airport_pp" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a class <c>Airport</c> with an <c>__init__</c> method that takes a <c>name</c> and <c>code</c> as strings and initializes these attributes in the current object.
            Then define the <c>__str__</c> method to return the <c>name code</c>.  For example, <c>print(a)</c> when <c>a = Airport("Detroit", "DTW")</c> would print <c>Detroit DTW</c>.</p>
    </statement>
    <blocks>
      <block order="6">
        <choice correct="yes">
          <cline>class Airport:</cline>
        </choice>
        <choice>
          <cline>def Airport: </cline>
        </choice>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>  def __init__(self, name, code):</cline>
        </choice>
        <choice>
          <cline>  def __init__(name, code): </cline>
        </choice>
      </block>
      <block order="9">
        <cline>    self.name = name</cline>
        <cline>    self.code = code</cline>
      </block>
      <block order="8">
        <choice correct="yes">
          <cline>  def __str__(self):</cline>
        </choice>
        <choice>
          <cline>  def str(self): </cline>
        </choice>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>    return self.name + " " + self.code</cline>
        </choice>
        <choice>
          <cline>    return name + " " + code </cline>
        </choice>
      </block>
    </blocks>
  </exercise>
  <exercise label="Classes_Basic_Airport_ac">
    <statement>
      <p>Write a class <c>Airport</c> with an <c>__init__</c> method that takes a <c>name</c> and <c>code</c> as strings and initializes these attributes in the current object.
            Then define the <c>__str__</c> method to return the <c>name code</c>.  For example, <c>print(a)</c> when <c>a = Airport("Detroit", "DTW")</c> would print <c>Detroit DTW</c>.</p>
    </statement>
    <program xml:id="Classes_Basic_Airport_ac_editor" interactive="activecode" language="python">
      <input>

a = Airport("Detroit", "DTW")
print(a)

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        a = Airport("Detroit", "DTW")
        self.assertEqual(a.__str__(), "Detroit DTW", "testing __str__ for Detroit")
        a = Airport("Atlanta", "ATL")
        self.assertEqual(a.__str__(), "Atlanta ATL", "testing __str__ for Atlanta")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="Classes_Basic_Song_pp" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a class <c>Song</c> with an <c>__init__</c> method that takes a <c>title</c> as a string and <c>len</c> as a number and initializes these attributes in the current object.
            Then define the <c>__str__</c> method to return the <c>title, len</c>.  For example, <c>print(s)</c> when <c>s = Song('Respect',150)</c> would print <q>Respect, 150</q>.</p>
    </statement>
    <blocks>
      <block order="1">
        <choice correct="yes">
          <cline>class Song:</cline>
        </choice>
        <choice>
          <cline>Class Song: </cline>
        </choice>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>  def __init__(self, title, len):</cline>
        </choice>
        <choice>
          <cline>  def __init__(title, len): </cline>
        </choice>
      </block>
      <block order="6">
        <cline>    self.title = title</cline>
        <cline>    self.len = len</cline>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>  def __str__(self):</cline>
        </choice>
        <choice>
          <cline>  def __str__(): </cline>
        </choice>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline>    return self.title + ", " + str(self.len)</cline>
        </choice>
        <choice>
          <cline>    return title + ", " + len </cline>
        </choice>
      </block>
    </blocks>
  </exercise>
  <exercise label="Classes_Basic_Song_ac">
    <statement>
      <p>Write a class <c>Song</c> with an <c>__init__</c> method that takes a <c>title</c> as a string and <c>len</c> as a number and initializes these attributes in the current object.
            Then define the <c>__str__</c> method to return the <c>title, len</c>.  For example, <c>print(s)</c> when <c>s = Song('Respect',150)</c> would print <q>Respect, 150</q>.</p>
    </statement>
    <program xml:id="Classes_Basic_Song_ac_editor" interactive="activecode" language="python">
      <input>

s = Song('Respect',150)
print(s)

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        s = Song('Respect',150)
        self.assertEqual(s.__str__(), "Respect, 150", "testing __str__ with Respect")
        s = Song('Truth Hurts',183)
        self.assertEqual(s.__str__(), "Truth Hurts, 183", "testing __str__ with Truth Hurts")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="Classes_Basic_Cat_pp" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a class Cat with an <c>__init__</c> method that takes
            <c>name</c> as a string and <c>age</c> as a number and initializes these attributes in the current object.  Next create the <c>__str__</c> method that returns
            <q>name: name age: age</q>.  For example if <c>c = Cat("Fluffy", 3)</c> then
            <c>print(c)</c> should print <c>"name: Fluffy age: 3"</c>.
            Then define the <c>make_sound</c> method to return <c>"Meow"</c>.</p>
    </statement>
    <blocks>
      <block order="7">
        <cline>class Cat:</cline>
      </block>
      <block order="10">
        <cline>  def __init__(self, name, age):</cline>
      </block>
      <block order="1">
        <cline>    self.name = name</cline>
        <cline>    self.age = age</cline>
      </block>
      <block order="4">
        <cline>  def __str__(self):</cline>
      </block>
      <block order="6">
        <choice correct="yes">
          <cline>    return f"name: {self.name}, age: {self.age}"</cline>
        </choice>
        <choice>
          <cline>    return f"name: {name}, age: {age}" </cline>
        </choice>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline>  def make_sound(self):</cline>
        </choice>
        <choice>
          <cline>  def make_sound(): </cline>
        </choice>
      </block>
      <block order="9">
        <choice correct="yes">
          <cline>    return "Meow"</cline>
        </choice>
        <choice>
          <cline>    return self."Meow" </cline>
        </choice>
      </block>
    </blocks>
  </exercise>
  <exercise label="Classes_Basic_Cat_ac">
    <statement>
      <p>Write a class Cat with an <c>__init__</c> method that takes
            <c>name</c> as a string and <c>age</c> as a number and initializes these attributes in the current object.  Next create the <c>__str__</c> method that returns
            <q>name: name, age: age</q>.  For example if <c>c = Cat("Fluffy", 3)</c> then
            <c>print(c)</c> should print <c>"name: Fluffy, age: 3"</c>.
            Then define the <c>make_sound</c> method to return <c>"Meow"</c>.</p>
    </statement>
    <program xml:id="Classes_Basic_Cat_ac_editor" interactive="activecode" language="python">
      <input>

c = Cat("Fluffy", 3)
print(c)
print(c.make_sound())

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        c = Cat("Fluffy", 3)
        self.assertEqual(c.__str__(), "name: Fluffy, age: 3", "testing __str__ on Fluffy")
        self.assertEqual(c.make_sound(), "Meow", "testing make_sound with Fluffy")
        d = Cat("Spike", 2)
        self.assertEqual(d.__str__(), "name: Spike, age: 2", "testing __str__ on Spike")
        self.assertEqual(d.make_sound(), "Meow", "testing make_sound with Spike")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="Classes_Basic_Account_pp" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a class <c>Account</c> with an <c>__init__</c> method that takes <c>id</c> and <c>balance</c> as numbers. Then create a <c>__str__</c> method that returns <q>id, balance</q>. Next create a <c>deposit</c> method takes <c>amount</c> as a number and adds that to the <c>balance</c>.  For example,
            if <c>a = Account(32, 100)</c> and <c>a.deposit(50)</c> is executed, <c>print(a)</c> should print <q>32, 150</q>.</p>
    </statement>
    <blocks/>
  </exercise>
  <exercise label="Classes_Basic_Account_ac">
    <statement>
      <p>Create a class <c>Account</c> with an <c>__init__</c> method that takes <c>id</c> and <c>balance</c> as numbers. Then create a <c>__str__</c> method that returns <q>id, balance</q>. Next create a <c>deposit</c> method takes <c>amount</c> as a number and adds that to the <c>balance</c>.  For example,
            if <c>a = Account(32, 100)</c> and <c>a.deposit(50)</c> is executed, <c>print(a)</c> should print <q>32, 150</q>.</p>
    </statement>
    <program xml:id="Classes_Basic_Account_ac_editor" interactive="activecode" language="python">
      <input>

a = Account(32, 100)
a.deposit(50)
print(a)

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        a = Account(32, 100)
        self.assertEqual(a.__str__(), "32, 100", "testing __str__ on a")
        a.deposit(50)
        self.assertEqual(a.__str__(), "32, 150", "testing __str__ on a after deposit")
        b = Account(2, 225.50)
        self.assertEqual(b.__str__(), "2, 225.5", "testing __str__ on b")
        b.deposit(50.25)
        self.assertEqual(b.__str__(), "2, 275.75", "testing __str__ on b after deposit")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="Classes_Basic_FortuneTeller_pp" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a class <c>FortuneTeller</c> with an <c>__init__</c> method that takes a list of fortunes as strings and saves that as an attribute.  Then create a <c>tell_fortune</c> method that returns one of the fortunes in the list at random.</p>
    </statement>
    <blocks>
      <block order="1">
        <cline>import random</cline>
      </block>
      <block order="8">
        <cline>class FortuneTeller:</cline>
      </block>
      <block order="6">
        <cline>    def __init__(self, fortunes):</cline>
      </block>
      <block order="5">
        <cline>        self.fortunes = fortunes</cline>
      </block>
      <block order="7">
        <choice correct="yes">
          <cline>    def tell_fortune(self):</cline>
        </choice>
        <choice>
          <cline>    def tell_fortune(): </cline>
        </choice>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>        last = len(self.fortunes) - 1</cline>
        </choice>
        <choice>
          <cline>        last = len(self.fortunes) </cline>
        </choice>
      </block>
      <block order="11">
        <cline>        index = random.randint(0, last)</cline>
      </block>
      <block order="9">
        <choice correct="yes">
          <cline>        return self.fortunes[index]</cline>
        </choice>
        <choice>
          <cline>        return fortunes[index] </cline>
        </choice>
      </block>
    </blocks>
  </exercise>
  <exercise label="Classes_Basic_FortuneTeller_ac">
    <statement>
      <p>Write a class <c>FortuneTeller</c> with an <c>__init__</c> method that takes a list of fortunes as strings and saves that as an attribute.  Then create a <c>tell_fortune</c> method that returns one of the fortunes in the list at random.</p>
    </statement>
    <program xml:id="Classes_Basic_FortuneTeller_ac_editor" interactive="activecode" language="python">
      <input>

f = FortuneTeller(["You will get an A", "You will have a great day", "You will fall", "You will laugh"])
for i in range(5):
     print(f.tell_fortune())

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        l = ["You will get an A", "You will have a great day", "You will fall", "You will laugh"]
        f = FortuneTeller(l)
        for i in range(5):
            s = f.tell_fortune()
            self.assertIn(s, l, "checking that the fortune in is the list")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="Classes_Basic_Student_pp" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a class <c>Student</c> with an <c>__init__</c> method that takes a student's name as a string and a list of exam scores as integers. Then create a <c>__str__</c> method that returns the <q>name: average exam score</q> rounded to the nearest integer. For example, <c>print(s)</c> when <c>s = Student("Sarah", [91,92,97])</c> would print <c>Sarah: 93.0</c>.</p>
    </statement>
    <blocks>
      <block order="3">
        <cline>class Student:</cline>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>  def __init__(self, name, scores):</cline>
        </choice>
        <choice>
          <cline>  def init(self, name, scores): </cline>
        </choice>
      </block>
      <block order="7">
        <choice correct="yes">
          <cline>    self.name = name</cline>
          <cline>    self.scores = scores</cline>
        </choice>
        <choice>
          <cline>    name = self.name</cline>
          <cline>    scores = self.scores </cline>
        </choice>
      </block>
      <block order="6">
        <cline>  def __str__(self):</cline>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>    total_scores  = sum(self.scores)</cline>
        </choice>
        <choice>
          <cline>    total_scores = self.scores.sum() </cline>
        </choice>
      </block>
      <block order="10">
        <cline>    average = round(total_scores / len(self.scores), 0)</cline>
      </block>
      <block order="9">
        <cline>    return f"{self.name}: {average}"</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="Classes_Basic_Student_ac">
    <statement>
      <p>Write a class <c>Student</c> with an <c>__init__</c> method that takes a student's name as a string and a list of exam scores as integers. Then create a <c>__str__</c> method that returns the <q>name: average exam score</q> rounded to the nearest integer. For example, <c>print(s)</c> when <c>s = Student("Sarah", [91,92,97])</c> would print <c>Sarah: 93.0</c>.</p>
    </statement>
    <program xml:id="Classes_Basic_Student_ac_editor" interactive="activecode" language="python">
      <input>
class Student:
     #write code here

s = Student("Sarah", [91,92,97])
print(s)

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        name = "James"
        scores = [92, 80, 76]
        s = Student(name, scores)
        self.assertEqual(s.__str__(), "James: 83.0", "Checking that the Student's average exam score is correct")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="Classes_Basic_Encoder_pp" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a class <c>Encoder</c> with an initializer method that takes in a sentence as a string. Then create a string method that returns <q>string: length of sentence</q>. Lastly, create a consonants method that returns the sentence without vowels, all lowercase. For example, <c>print(e)</c> when <c>e = Encoder("I love Python")</c> would print <c>I love Python: 13</c> and <c>print(e.consonants())</c> would print `` lv pythn``.</p>
    </statement>
    <blocks>
      <block order="1">
        <choice correct="yes">
          <cline>class Encoder:</cline>
        </choice>
        <choice>
          <cline>Class Encoder:  </cline>
        </choice>
      </block>
      <block order="14">
        <cline>  def __init__(self, sentence):</cline>
      </block>
      <block order="11">
        <cline>    self.sentence = sentence</cline>
      </block>
      <block order="9">
        <cline>  def __str__(self):</cline>
      </block>
      <block order="10">
        <choice correct="yes">
          <cline>    return f"{self.sentence}: {len(self.sentence)}"</cline>
        </choice>
        <choice>
          <cline>    return self.sentence + ": " + len(self.sentence) </cline>
        </choice>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline>  def consonants(self):</cline>
        </choice>
        <choice>
          <cline>  def consonants(): </cline>
        </choice>
      </block>
      <block order="4">
        <cline>    no_vowels = ""</cline>
      </block>
      <block order="15">
        <choice correct="yes">
          <cline>    for char in self.sentence:</cline>
        </choice>
        <choice>
          <cline>    for char in sentence: </cline>
        </choice>
      </block>
      <block order="12">
        <cline>      char = char.lower()</cline>
      </block>
      <block order="7">
        <cline>      if char not in ["a", "e", "i", "o", "u"]:</cline>
      </block>
      <block order="3">
        <cline>        no_vowels += char</cline>
      </block>
      <block order="6">
        <cline>    return no_vowels</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="Classes_Basic_Encoder_ac">
    <statement>
      <p>Write a class <c>Encoder</c> with an initializer method that takes in a sentence as a string. Then create a string method that returns <q>string: length of sentence</q>. Lastly, create a consonants method that returns the sentence without vowels, all lowercase. For example, <c>print(e)</c> when <c>e = Encoder("I love Python")</c> would print <c>I love Python: 13</c> and <c>print(e.consonants())</c> would print `` lv pythn``.</p>
    </statement>
    <program xml:id="Classes_Basic_Encoder_ac_editor" interactive="activecode" language="python">
      <input>
class Encoder:
     #write code here

e = Encoder("I love Python")
print(e)
print(e.consonants())

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        sentence1 = "Hello world!"
        c1 = Encoder(sentence1)
        sentence2 = "Abraham Lincoln was the 16th President of the United States."
        c2 = Encoder(sentence2)
        self.assertEqual(c1.consonants(), "hll wrld!", "Checking that all vowels have been removed from sentence and all chars converted to lowercase")
        self.assertEqual(c2.consonants(), "brhm lncln ws th 16th prsdnt f th ntd stts.", "Checking that all vowels have been removed from sentence and all chars converted to lowercase")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="Classes_Basic_CharFrequency_pp" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a class <c>CharFrequency</c> with an initializer method that takes in a sentence as a string. Then create a string method that returns <q>The most common character in the sentence is x.</q> In the case of tiebreakers, return the character that comes last in alphabetical order.
            For example, <c>print(c)</c> when <c>c = CharFreequency("I love Python")</c> would print <c>The most common character in the sentence is o.</c></p>
    </statement>
    <blocks>
      <block order="7">
        <cline>class CharFrequency:</cline>
      </block>
      <block order="2">
        <cline>  def __init__(self, sentence):</cline>
      </block>
      <block order="1">
        <cline>    self.sentence = sentence</cline>
      </block>
      <block order="3">
        <cline>  def __str__(self):</cline>
      </block>
      <block order="4">
        <cline>    most_common = {}</cline>
      </block>
      <block order="8">
        <cline>    sentence = self.sentence.replace(" ", "")</cline>
      </block>
      <block order="10">
        <cline>    for char in sentence:</cline>
      </block>
      <block order="5">
        <cline>      most_common[char] = most_common.get(char, 0) + 1</cline>
      </block>
      <block order="9">
        <cline>    sorted_list = sorted(most_common.items(), key = lambda k: (k[1], k[0]), reverse = True)</cline>
      </block>
      <block order="6">
        <cline>    return "The most common character in the sentence is " + str(sorted_list[0][0]) + "."</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="Classes_Basic_CharFrequency_ac">
    <statement>
      <p>Write a class <c>CharFrequency</c> with an initializer method that takes in a sentence as a string. Then create a string method that returns <q>The most common character in the sentence is x.</q> In the case of tiebreakers, return the character that comes last in alphabetical order. For example, <c>print(c)</c> when <c>c = CharFreequency("I love Python")</c> would print <c>The most common character in the sentence is o.</c></p>
    </statement>
    <program xml:id="Classes_Basic_CharFrequency_ac_editor" interactive="activecode" language="python">
      <input>
class CharFrequency:
     #write code here


c = CharFrequency("I love Python")
print(c)

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        sentence1 = "My dog likes to play fetch."
        m1 = CharFrequency(sentence1)
        sentence2 = "5 times 5 equals 25."
        m2 = CharFrequency(sentence2)
        self.assertEqual(m1.__str__(), "The most common character in the sentence is y.", "Checking that the most common char is returned")
        self.assertEqual(m2.__str__(), "The most common character in the sentence is 5.", "Checking that the most common char is returned")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="Classes_Basic_Loan_pp" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a class <c>Loan</c> with an initializer method that takes in an integer loan_amt, a float interest_rate and integer years. Then create a string method that returns <q>Your loan is &#x2018;'loan_amt'' for &#x2018;'years'' years at an interest rate of &#x2018;'interest_rate''.</q> Create another method called total_payment that calculates the total amount of loan payment based on the interest rate and number of years. Use the formula (loan_amt * (1 + interest_rate/100) ^ years). Also round your total payment to two decimal places. We're assuming that you are paying on an annual basis. For example, <c>print(l)</c> when <c>l = Loan(10000, 5, 10)</c> would print <c>Your loan is $10000 for 10 years at an interest rate of 5%.</c> and <c>print(l.total_payment())</c> would print <c>16288.95</c> as a float.</p>
    </statement>
    <blocks>
      <block order="2">
        <cline>class Loan:</cline>
      </block>
      <block order="3">
        <cline>  def __init__(self, loan_amt, interest_rate, years):</cline>
      </block>
      <block order="5">
        <cline>    self.loan_amt = loan_amt</cline>
        <cline>    self.interest_rate = interest_rate</cline>
        <cline>    self.years = years</cline>
      </block>
      <block order="7">
        <cline>  def __str__(self):</cline>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>    return f"Your loan is ${self.loan_amt} for {self.years} years at an interest rate of {self.interest_rate}%."</cline>
        </choice>
        <choice>
          <cline>    return f"Your loan is $(self.loan_amt) for (self.years) years at an interest rate of (self.interest_rate)%." </cline>
        </choice>
      </block>
      <block order="6">
        <cline>  def total_payment(self):</cline>
      </block>
      <block order="8">
        <choice correct="yes">
          <cline>    total = self.loan_amt * (1 + self.interest_rate/100) ** self.years</cline>
        </choice>
        <choice>
          <cline>    total = loan_amt * (1 + interest_rate/100) ** years  </cline>
        </choice>
      </block>
      <block order="4">
        <cline>    return float('{:.2f}'.format(total))</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="Classes_Basic_Loan_ac">
    <statement>
      <p>Write a class <c>Loan</c> with an initializer method that takes in an integer loan_amt, a float interest_rate and integer years. Then write a string method that returns <q>Your loan is &#x2018;'loan_amt'' for &#x2018;'years'' years at an interest rate of &#x2018;'interest_rate''.</q> Write another method called total_payment that calculates the total amount of loan payment based on the interest rate and number of years. Use the formula (loan_amt * (1 + interest_rate/100) ^ years). Also round your total payment to two decimal places. We're assuming that you are paying on an annual basis. For example, <c>print(l)</c> when <c>l = Loan(10000, 5, 10)</c> would print <c>Your loan is $10000 for 10 years at an interest rate of 5%.</c> and <c>print(l.total_payment())</c> would print <c>16288.95</c> as a float.</p>
    </statement>
    <program xml:id="Classes_Basic_Loan_ac_editor" interactive="activecode" language="python">
      <input>
class Loan:
     #write code here

l = Loan(10000, 5, 10)
print(l)
print(l.total_payment())

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        loan_amt = 10000
        interest_rate = 5
        years = 10
        l1 = Loan(10000, 5, 10)
        l2 = Loan(10000, 2.5, 15)
        self.assertEqual(l1.total_payment(), 16288.95, "Checking the total_payment method")
        self.assertEqual(l2.total_payment(), 14482.98, "Checking the total_payment method")
        self.assertEqual(l1.__str__(), "Your loan is $10000 for 10 years at an interest rate of 5%.", "Checking the string method")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="Classes_Basic_Cart1_pp" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a class <c>Cart</c> that takes in a dictionary price_dict with keys as product names and values as the product price. The initializer method also creates a new empty list called cart_list that will contain tuples in the format (item, quantity). The class also has an add_item and a calculate_total method. The add_item method will take in an item and quantity you wish to purchase and append those to the cart. The calculate_total method should calculate and return the total amount of your purchase for all of the items in your cart. For example, when <c>c = Cart({<q>Notebook</q>: 1.99, <q>Pen</q>: 2.50, <q>Paper</q>: 1.00})</c> and a user wants to purchase 3 pens by calling c.add_item(<q>Pen</q>, 3), then print(c.calculate_total) would print <c>7.50</c> as a float.</p>
    </statement>
    <blocks>
      <block order="9">
        <cline>class Cart:</cline>
      </block>
      <block order="6">
        <cline>  def __init__(self, price_dict):</cline>
      </block>
      <block order="11">
        <choice correct="yes">
          <cline>    self.price_dict = price_dict</cline>
          <cline>    self.cart_list = []</cline>
        </choice>
        <choice>
          <cline>    self.price_dict = price_dict </cline>
          <cline>    self.cart_list = cart_list</cline>
        </choice>
      </block>
      <block order="1">
        <cline>  def add_item(self, item, quantity):</cline>
      </block>
      <block order="8">
        <choice correct="yes">
          <cline>    self.cart_list.append((item, quantity))</cline>
        </choice>
        <choice>
          <cline>    self.cart_list.append(item, quantity) </cline>
        </choice>
      </block>
      <block order="10">
        <cline>  def calculate_total(self):</cline>
      </block>
      <block order="7">
        <cline>    total = 0</cline>
      </block>
      <block order="4">
        <cline>    for item, quantity in self.cart_list:</cline>
      </block>
      <block order="5">
        <cline>      total += quantity * self.price_dict[item]</cline>
      </block>
      <block order="2">
        <cline>    return float('{:.2f}'.format(total))</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="Classes_Basic_Cart1_ac">
    <statement>
      <p>Create a class <c>Cart</c> that takes in a dictionary price_dict with keys as product names and values as the product price. The initializer method also creates a new empty list called cart_list that will contain tuples in the format (item, quantity). The class also has an add_item and a calculate_total method. The add_item method will take in an item and quantity you wish to purchase and append those to the cart. The calculate_total method should calculate and return the total amount of your purchase for all of the items in your cart. For example, when <c>c = Cart({<q>Notebook</q>: 1.99, <q>Pen</q>: 2.50, <q>Paper</q>: 1.00})</c> and a user wants to purchase 3 pens by calling c.add_item(<q>Pen</q>, 3), then print(c.calculate_total) would print <c>7.50</c> as a float.</p>
    </statement>
    <program xml:id="Classes_Basic_Cart1_ac_editor" interactive="activecode" language="python">
      <input>
class Cart:
     #write code here

c = Cart({"Notebook": 1.99, "Pen": 2.50, "Paper": 1.00})
c.add_item("Pen", 3)
print(c.calculate_total())

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        c = Cart({"Banana": 0.19, "Apple": 1.79, "Blueberries": 3.99, "Strawberries": 4.98})
        c.add_item("Banana", 5)
        c.add_item("Strawberries", 1)
        self.assertEqual(c.cart_list, [('Banana', 5), ('Strawberries', 1)], "Checking that all items were added to the cart")
        self.assertEqual(c.calculate_total(), 5.93, "Checking calculate_total method")

myTests().main()
        </input>
    </program>
  </exercise>
</section>
