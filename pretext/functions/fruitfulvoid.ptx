<?xml version="1.0"?>
<section xml:id="functions_fruitful-functions-and-void-functions">
  <title>Fruitful functions and void functions</title>
<idx>Script Mode</idx>
<idx>Interactive Mode</idx>
<idx><h>Function</h><h>Fruitful</h></idx>
<idx><h>Fruitful</h><h>Function</h></idx>
<idx><h>Function</h><h>Void</h></idx>
<idx><h>Void</h><h>Function</h></idx>
<idx><h>Special Value</h><h>None</h></idx>
<idx><h>None</h><h>Special Value</h></idx>
  <p>Some of the functions we are using, such as the math functions, yield
            results; for lack of a better name, I call them <em>fruitful
                functions</em>. Other functions, like <c>print_twice</c>, perform an
            action but don't return a value. They are called <em>void
                functions</em>.</p>
  <exercise label="functFruit_MC_fruitful">
    <statement>
      <p>Q-1: <q>Fruitful functions</q> are functions that must&#x2026;</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>return a value</p>
        </statement>
        <feedback>
          <p>Correct! Fruitful functions yield results in the form of a return value.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>not return a value</p>
        </statement>
        <feedback>
          <p>Incorrect! Fruitful functions do return a value. Try again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>print something</p>
        </statement>
        <feedback>
          <p>Incorrect! Fruitful functions may print something, but they also must do something else. Try again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>display something on the screen</p>
        </statement>
        <feedback>
          <p>Incorrect! Fruitful functions may display something on the screen, but they must also do something else. Try again.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="functFruit_MC_void">
    <statement>
      <p>Q-2: <q>Void functions</q> are functions that&#x2026;</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>return a value</p>
        </statement>
        <feedback>
          <p>Incorrect! Void functions don't return a value. Try again.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>do not return a value</p>
        </statement>
        <feedback>
          <p>Correct! Void functions don't return a value.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>return a variable</p>
        </statement>
        <feedback>
          <p>Incorrect! Void functions don't return a variable -- a variable is a kind of value. Try again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>must take parameters</p>
        </statement>
        <feedback>
          <p>Incorrect! Void functions may take parameters, but not always. Try again.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <p>When you call a fruitful function, you almost always want to do
            something with the result; for example, you might assign it to a
            variable or use it as part of an expression:</p>
  <program language="python">
    <input>
x = math.cos(radians)
golden = (math.sqrt(5) + 1) / 2
</input>
  </program>
  <p>When you call a function in interactive mode, Python displays the
            result:</p>
  <program language="python">
    <input>
&gt;&gt;&gt; math.sqrt(5)
2.23606797749979
</input>
  </program>
  <p>But in a script, if you call a fruitful function and do not store the
            result of the function in a variable, the return value vanishes into the
            mist!</p>
  <program language="python">
    <input>
math.sqrt(5)
</input>
  </program>
  <p>This script computes the square root of 5, but since it doesn't store
            the result in a variable or display the result, it is not very useful.</p>
  <p>Void functions might display something on the screen or have some other
            effect, but they don't have a return value. If you try to assign the
            result to a variable, you get a special value called <c>None</c>.</p>
  <program language="python">
    <input>
&gt;&gt;&gt; result = print_twice('Bing')
Bing
Bing
&gt;&gt;&gt; print(result)
None
</input>
  </program>
  <p>The value <c>None</c> is not the same as the string <q>None</q>. It
            is a special value that has its own type:</p>
  <program language="python">
    <input>
&gt;&gt;&gt; print(type(None))
&lt;class 'NoneType'&gt;
</input>
  </program>
  <p>To return a result from a function, we use the <c>return</c>
            statement in our function. For example, we could make a very simple
            function called <c>addtwo</c> that adds two numbers together and
            returns a result.</p>
  <program xml:id="functFruit_codelens" interactive="codelens" language="python">
    <input>
def addtwo(a, b):
    added = a + b
    return added

a = 3
b = 5
x = addtwo(a, b)
print(x)
    </input>
  </program>
  <p>When this script executes, the <c>print</c> statement will print
            out <q>8</q> because the <c>addtwo</c> function was called with 3 and 5
            as arguments. Within the function, the parameters <c>a</c> and
            <c>b</c> were 3 and 5 respectively. The function computed the sum
            of the two numbers and placed it in the local function variable named
            <c>added</c>. Then it used the <c>return</c> statement to
            send the computed value back to the calling code as the function result,
            which was then assigned to the variable <c>x</c> and printed out.</p>
</section>
