<?xml version="1.0"?>
<section xml:id="functions_group-work-functions-and-conditionals">
  <title>Group Work: Functions and Conditionals</title>
  <introduction>
  <p>It is best to use a POGIL approach with the following. In POGIL students work
            in groups on activities and each member has an assigned role.  For more information see <url href="https://cspogil.org/Home" visual="https://cspogil.org/Home">https://cspogil.org/Home</url>.</p>
  <note>
    <p>If you work in a group, have only one member of the group fill in the answers on this page.  You will be able to share your answers with the group at the bottom of the page.</p>
  </note>
  <p>
    <term>Learning Objectives</term>
  </p>
  <p>Students will know and be able to do the following.</p>
  <p>
    <em>Content Objectives:</em>
  </p>
  <p>
    <ul>
      <li>
        <p>Recognize the keywords used in conditionals in Python (if, elif, else).</p>
      </li>
      <li>
        <p>Predict the output from simple and complex conditionals.</p>
      </li>
      <li>
        <p>Recognize the keywords used in complex conditionals (and, or, not).</p>
      </li>
    </ul>
  </p>
  <p>
    <em>Process Objectives:</em>
  </p>
  <p>
    <ul>
      <li>
        <p>Create good test data for functions with conditionals</p>
      </li>
      <li>
        <p>Modify code to use complex conditionals</p>
      </li>
    </ul>
  </p>
</introduction>
  <subsection xml:id="functions_basic-conditionals-and-tests">
    <title>Basic Conditionals and Tests</title>
    <exercise label="funct_fitb_return_temp_first_line">
      <statement>
        <p>Q-1: What is the first thing (first line of text) that will be printed when the code below runs? <var/>  </p>
      </statement>
      <setup>
        <var>
          <condition string="Baby,\s+its\s+cold\s+outside!">
            <feedback>
              <p>Since temp &lt; 32 this will print.</p>
            </feedback>
          </condition>
          <condition string=".*">
            <feedback>
              <p>Which conditional is true when temp &lt; 32?</p>
            </feedback>
          </condition>
        </var>
      </setup>
    </exercise>
    <exercise label="func_ac_pogil_return_temp_desc">
      <statement>
        <p>Run this code to see what it prints.</p>
      </statement>
      <program xml:id="func_ac_pogil_return_temp_desc_editor" interactive="activecode" language="python">
        <input>
# function definition
def get_temp_desc(temp):
    if temp &lt; 32:
        return "Baby, its cold outside!"
    elif temp &lt; 70:
        return "Wear a coat"
    elif temp &lt; 80:
        return "Feels great!"
    else:
        return "Too hot to handle!"

# function definition
def main():
    print(get_temp_desc(20))
    print(get_temp_desc(85))

# function call
main()
        </input>
      </program>
    </exercise>
    <exercise label="funct_fitb_pogil_exec_false">
      <statement>
        <p>Q-3: What keyword specifies the block of statements to execute if a Boolean condition is false? <var/>  </p>
      </statement>
      <setup>
        <var>
          <condition string="else">
            <feedback>
              <p>The keyword else is used to execute a blocks of statements if a Boolean condition is false</p>
            </feedback>
          </condition>
          <condition string="Else">
            <feedback>
              <p>Most keywords in Python start with a lowercase letter</p>
            </feedback>
          </condition>
          <condition string=".*">
            <feedback>
              <p>Try again!</p>
            </feedback>
          </condition>
        </var>
      </setup>
    </exercise>
    <exercise label="funct_fitb_pogil_conditional_start">
      <statement>
        <p>Q-4: What keyword starts a conditional statement and is the only required keyword in it? <var/>  </p>
      </statement>
      <setup>
        <var>
          <condition string="if">
            <feedback>
              <p>The keyword if is used to start a conditional statement and is the only required keyword.</p>
            </feedback>
          </condition>
          <condition string="If">
            <feedback>
              <p>Most keywords in Python start with a lowercase letter</p>
            </feedback>
          </condition>
          <condition string=".*">
            <feedback>
              <p>Try again!</p>
            </feedback>
          </condition>
        </var>
      </setup>
    </exercise>
    <exercise label="funct_fitb_pogil_multi_conditonal">
      <statement>
        <p>Q-5: What keyword is used in a conditional statement when you want three of more possible outcomes? <var/>  </p>
      </statement>
      <setup>
        <var>
          <condition string="elif">
            <feedback>
              <p>The keyword elif is used to provide more than two possible outcomes to a conditional statement.</p>
            </feedback>
          </condition>
          <condition string="Elif">
            <feedback>
              <p>Most keywords in Python start with a lowercase letter</p>
            </feedback>
          </condition>
          <condition string=".*">
            <feedback>
              <p>Try again!</p>
            </feedback>
          </condition>
        </var>
      </setup>
    </exercise>
    <exercise label="func_ac_pogil_return_temp_desc_v2">
      <statement>
        <p>Modify the code in the main method below to test all possible return values from get_temp_desc.</p>
      </statement>
      <program xml:id="func_ac_pogil_return_temp_desc_v2_editor" interactive="activecode" language="python">
        <input>
# function definition
def get_temp_desc(temp):
    if temp &lt; 32:
        return "Baby, its cold outside!"
    elif temp &lt; 70:
        return "Wear a coat"
    elif temp &lt; 80:
        return "Feels great!"
    else:
        return "Too hot to handle!"

# function definition
def main():
    print(get_temp_desc(20))
    print(get_temp_desc(85))

# function call
main()
        </input>
      </program>
    </exercise>
    <exercise label="funct_pogil_check-guess-Parsons-v2" numbered="yes" adaptive="yes" indentation="hide" language="python">
      <statement>
        <p>Put the blocks in order to define the function <c>check_guess</c> which will return <c>'too low'</c> if the guess is less
                than the passed target, <c>'correct'</c> if they are equal, and <c>'too high'</c> if the guess
                is greater than the passed target.  For example, <c>check_guess(5,7)</c> returns
                <c>'too low'</c>, <c>check_guess(7,7)</c> returns <c>'correct'</c>, and <c>check_guess(9,7)</c> returns
                <c>'too high'</c>. There are three extra blocks that are not needed in a correct solution.</p>
      </statement>
      <blocks>
        <block order="1">
          <cline>def check_guess(guess, target):</cline>
        </block>
        <block order="2">
          <choice correct="yes">
            <cline>    if guess &lt; target:</cline>
          </choice>
          <choice>
            <cline>    if guess &lt; target </cline>
          </choice>
        </block>
        <block order="9">
          <choice correct="yes">
            <cline>        return 'too low'</cline>
          </choice>
          <choice>
            <cline>        return "too low' </cline>
          </choice>
        </block>
        <block order="8">
          <choice correct="yes">
            <cline>    elif guess == target:</cline>
          </choice>
          <choice>
            <cline>    elif guess = target: </cline>
          </choice>
        </block>
        <block order="6">
          <cline>        return 'correct'</cline>
        </block>
        <block order="4">
          <cline>    else:</cline>
        </block>
        <block order="7">
          <cline>        return 'too high'</cline>
        </block>
      </blocks>
    </exercise>
    <exercise label="funct_pogil_get_last_half">
      <statement>
        <p>Finish the function <c>last_half(str)</c> which
                returns the last half of the characters from the passed string <c>str</c>.
                If <c>str</c> has less than 2 characters then return the empty string <c>""</c>.
                For example, <c>last_half("a")</c> returns <c>""</c>, <c>last_half("coal")</c> returns <c>"al"</c>, and <c>last_half("bye") returns ``ye</c>.</p>
      </statement>
      <program xml:id="funct_pogil_get_last_half_editor" interactive="activecode" language="python">
        <input>
def last_half(str):

====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(last_half('a'), '', "last_half('a')")
        self.assertEqual(last_half('coal'), 'al', "last_half('coal')")
        self.assertEqual(last_half('bye'), 'ye', "last_half('bye')")
        self.assertEqual(last_half('abcd'), 'cd', "last_half('abcd')")
        self.assertEqual(last_half('12345'), '345', "last_half('12345')")
        self.assertEqual(last_half('123456'), '456', "last_half('123456')")
        self.assertEqual(last_half('ab'), 'b', "last_half('ab')")
        self.assertEqual(last_half(''), '', "last_half('')")


myTests().main()
        </input>
      </program>
    </exercise>
    <exercise label="funct_fitb_cond_predict_grade">
      <statement>
        <p>Q-9: What is the first thing that will be printed when the code below runs? <var/>  </p>
      </statement>
      <setup>
        <var>
          <condition string="D">
            <feedback>
              <p>Since every if will execute it will print D.</p>
            </feedback>
          </condition>
          <condition string=".*">
            <feedback>
              <p>Remember that every if will execute.  What is the final value of grade?</p>
            </feedback>
          </condition>
        </var>
      </setup>
    </exercise>
    <exercise label="func_ac_fix_grade_code">
      <statement>
        <p>Run this code to see what it prints.  The modify it to work correctly.  Next,
                add code to the main function to test each possible letter grade.  It
                should return A if the score is
                greater than or equal 90, B if greater than or equal 80, C if greater
                than or equal 70, D if greater than or equal 60, and otherwise E.</p>
      </statement>
      <program xml:id="func_ac_fix_grade_code_editor" interactive="activecode" language="python">
        <input>
# function definition
def get_grade(score):
    grade = None
    if score &gt; 90:
        grade = 'A'
    if score &gt; 80:
        grade = 'B'
    if score &gt; 70:
        grade = 'C'
    if score &gt; 60:
        grade = 'D'
    else:
        grade = 'E'
    return grade

def main():
    print(get_grade(95))

main()
        </input>
      </program>
    </exercise>
    <exercise label="funct_fitb_cond_grade_num_tests">
      <statement>
        <p>Q-11: How many test cases do you need to check that the code above works as intended? <var/>  </p>
      </statement>
      <setup>
        <var>
          <condition number="9">
            <feedback>
              <p>You need to test greater than and equal for each grade from A to D and also test a value less than 60.</p>
            </feedback>
          </condition>
          <condition string=".*">
            <feedback>
              <p>Remember that you should check that it works correctly if the value is greater than or equal the specified value.</p>
            </feedback>
          </condition>
        </var>
      </setup>
    </exercise>
  </subsection>
  <subsection xml:id="functions_logical-operators-and-complex-conditionals">
    <title>Logical Operators and Complex Conditionals</title>
    <p>The logical operators in Python are <c>and</c>, <c>or</c>, and <c>not</c>. These can be used to create complex conditionals.</p>
    <exercise label="funt_mc_and">
      <statement>
        <p>Q-12: Which of the following tests if x is both greater than 10 and less than or equal to 20?</p>
      </statement>
      <choices>
        <choice>
          <statement id="funt_mc_and_opt_a">
            <p>x &gt; 10 and &lt; 20</p>
          </statement>
          <feedback id="funt_mc_and_opt_a">
            <p>You have to check that x is greater than 10 and x is less than or equal 20.  You must repeat the x.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="funt_mc_and_opt_b">
            <p>x &gt; 10 &amp;&amp; x &lt;= 20</p>
          </statement>
          <feedback id="funt_mc_and_opt_b">
            <p>Python uses the keyword and, not &amp;&amp;</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement id="funt_mc_and_opt_c">
            <p>x &gt; 10 and x &lt;= 20</p>
          </statement>
          <feedback id="funt_mc_and_opt_c">
            <p>This will be true when x is greater than 10 and less than or equal 20</p>
          </feedback>
        </choice>
        <choice>
          <statement id="funt_mc_and_opt_d">
            <p>x &gt; 10 &amp;&amp; x &lt; 20</p>
          </statement>
          <feedback id="funt_mc_and_opt_d">
            <p>Python uses the keyword and, not &amp;&amp; and this will be true when x is greater than 10 and less than 20</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <exercise label="funt_mc_or">
      <statement>
        <p>Q-13: Which of the following returns true if <c>have_ride</c> is true or <c>can_walk</c> is true?</p>
      </statement>
      <choices>
        <choice>
          <statement id="funt_mc_or_opt_a">
            <p>have_ride and can_walk</p>
          </statement>
          <feedback id="funt_mc_or_opt_a">
            <p>Both must be true for this to be true</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement id="funt_mc_or_opt_b">
            <p>have_ride or can_walk</p>
          </statement>
          <feedback id="funt_mc_or_opt_b">
            <p>This will return true when one of these is true</p>
          </feedback>
        </choice>
        <choice>
          <statement id="funt_mc_or_opt_c">
            <p>have_ride || can_walk</p>
          </statement>
          <feedback id="funt_mc_or_opt_c">
            <p>Python uses the keyword or, not ||</p>
          </feedback>
        </choice>
        <choice>
          <statement id="funt_mc_or_opt_d">
            <p>have_ride OR can_walk</p>
          </statement>
          <feedback id="funt_mc_or_opt_d">
            <p>Python keywords are all lowercase</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <exercise label="funt_complex_cond_mc_not">
      <statement>
        <p>Q-14: Which of the following returns true if <c>is_raining</c> is false?  Pick all that are correct.</p>
      </statement>
      <choices>
        <choice>
          <statement id="funt_complex_cond_mc_not_opt_a">
            <p>! is_raining</p>
          </statement>
          <feedback id="funt_complex_cond_mc_not_opt_a">
            <p>Python does not use the ! symbol for not</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement id="funt_complex_cond_mc_not_opt_b">
            <p>not is_raining</p>
          </statement>
          <feedback id="funt_complex_cond_mc_not_opt_b">
            <p>This will return True when is_raining is false.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="funt_complex_cond_mc_not_opt_c">
            <p>is_raining</p>
          </statement>
          <feedback id="funt_complex_cond_mc_not_opt_c">
            <p>If is_raining is false this will return False.</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement id="funt_complex_cond_mc_not_opt_d">
            <p>is_raining == False</p>
          </statement>
          <feedback id="funt_complex_cond_mc_not_opt_d">
            <p>This will return True when is_raining is False.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <exercise label="func_ac_or_complex_cond">
      <statement>
        <p>Modify this code to use a complex conditional instead.  It should still pass all tests. It should only take four lines of code or less.</p>
      </statement>
      <program xml:id="func_ac_or_complex_cond_editor" interactive="activecode" language="python">
        <input>
# function definition
def either6(a,b):
    if a == 6:
        return True
    if b == 6:
        return True
    return False

====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(either6(5,2),False,"either6(5,2)")
        self.assertEqual(either6(6,3),True, "either6(6,3)")
        self.assertEqual(either6(3,6),True, "either6(3,6)")
        self.assertEqual(either6(3,-6),False, "either6(3,6)")

myTests().main()
        </input>
      </program>
    </exercise>
    <exercise label="func_ac_and_complex_cond">
      <statement>
        <p>Modify this code to use a complex conditional instead.  It should still pass all tests. It should only take four lines of code or less.</p>
      </statement>
      <program xml:id="func_ac_and_complex_cond_editor" interactive="activecode" language="python">
        <input>
# function definition
def test(a):
    if a &gt; 0:
        if a &lt;= 10:
            return True
    return False

====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(test(5),True,"test(5)")
        self.assertEqual(test(0),False,"test(0)")
        self.assertEqual(test(1),True,"test(1)")
        self.assertEqual(test(-5),False,"test(-5)")
        self.assertEqual(test(11),False,"test(11)")
        self.assertEqual(test(10),True,"test(10)")
        self.assertEqual(test(9),True,"test(9)")

myTests().main()
        </input>
      </program>
    </exercise>
    <exercise label="funct_pp_pogil_speeding-Parsons" numbered="yes" adaptive="yes" indentation="hide" language="python">
      <statement>
        <p>Put the code below in order to first check if it is your birthday and if so then if the speed is less than or equal 65
                return 0, else if it is less than or equal 85 return 1 and otherwise return 2.  If it isn't your
                birthday then if the speed is less than or equal 60 return 0, else if it is less than or equal 80
                return 1 and otherwise return 2.</p>
      </statement>
      <blocks>
        <block order="1">
          <cline>def caught_speeding(speed, is_birthday):</cline>
        </block>
        <block order="14">
          <cline>    if is_birthday:</cline>
        </block>
        <block order="16">
          <choice correct="yes">
            <cline>        if speed &lt;= 65:</cline>
          </choice>
          <choice>
            <cline>        if speed &lt; 65: </cline>
          </choice>
        </block>
        <block order="17">
          <cline>            return 0</cline>
        </block>
        <block order="2">
          <cline>        elif speed &lt;= 85:</cline>
        </block>
        <block order="7">
          <choice correct="yes">
            <cline>            return 1</cline>
          </choice>
          <choice>
            <cline>            Return 1 </cline>
          </choice>
        </block>
        <block order="11">
          <cline>        else:</cline>
        </block>
        <block order="5">
          <cline>            return 2</cline>
        </block>
        <block order="13">
          <cline>    else:</cline>
        </block>
        <block order="6">
          <cline>        if speed &lt;= 60:</cline>
        </block>
        <block order="9">
          <cline>            return 0</cline>
        </block>
        <block order="8">
          <cline>        elif speed &lt;= 80:</cline>
        </block>
        <block order="10">
          <cline>            return 1</cline>
        </block>
        <block order="3">
          <cline>        else:</cline>
        </block>
        <block order="15">
          <cline>            return 2</cline>
        </block>
      </blocks>
    </exercise>
    <exercise label="fuct_ac_pogil_alarm_clock_v2">
      <statement>
        <p>Write a function that given a day of the week encoded as 0=Sun, 1=Mon, 2=Tue, &#x2026;6=Sat, and a Boolean indicating if we are on vacation, return a string of the form <q>7:00</q> indicating when the alarm clock should ring. If you are on vacation then on weekends it should be <q>off</q> and weekdays <q>10:00</q>. Otherwise, on weekends it should be <q>10:00</q> and weekdays <q>7:00</q>.</p>
      </statement>
      <program xml:id="fuct_ac_pogil_alarm_clock_v2_editor" interactive="activecode" language="python">
        <input>
def alarm_clock(day, vacation):

====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(alarm_clock(1,False), '7:00', "alarm_clock(1,False)")
        self.assertEqual(alarm_clock(5,False), '7:00', "alarm_clock(5,False)")
        self.assertEqual(alarm_clock(0,False), '10:00', "alarm_clock(0,False)")
        self.assertEqual(alarm_clock(6,False), '10:00', "alarm_clock(6,False)")
        self.assertEqual(alarm_clock(0,True), 'off', "alarm_clock(0,True)")
        self.assertEqual(alarm_clock(6,True), 'off', "alarm_clock(6,True)")
        self.assertEqual(alarm_clock(1, True), '10:00', "alarm_clock(1, True)")
        self.assertEqual(alarm_clock(3, True), '10:00', "alarm_clock(3, True)")
        self.assertEqual(alarm_clock(5, True), '10:00', "alarm_clock(5, True)")


myTests().main()
        </input>
      </program>
    </exercise>
    <exercise label="func_pp_pogil_sq_play" numbered="yes" adaptive="yes" indentation="hide" language="python">
      <statement>
        <p>Drag the blocks from the left and put them in the correct order on the right to define a function <c>squirrel_play</c> that takes a <c>temp</c> (the temperature) and Boolean <c>is_summer</c> that indicates if it is summer or not and returns <c>True</c> if it is summer and the temperature is between 60 and 100 (inclusive).  It also returns <c>True</c> if it isn't summer and the temperature is between 60 and 90 (inclusive).  Otherwise, it returns <c>False</c>.</p>
      </statement>
      <blocks>
        <block order="2">
          <cline>def squirrel_play(temp, is_summer):</cline>
        </block>
        <block order="9">
          <cline>    if is_summer and temp &gt;= 60 and temp &lt;= 100:</cline>
        </block>
        <block order="5">
          <choice correct="yes">
            <cline>        return True</cline>
          </choice>
          <choice>
            <cline>        return true </cline>
          </choice>
        </block>
        <block order="6">
          <choice correct="yes">
            <cline>    elif not is_summer and temp &gt;= 60 and temp &lt;= 90:</cline>
          </choice>
          <choice>
            <cline>    else if not is_summer and temp &gt;= 60 and temp &lt;= 90: </cline>
          </choice>
        </block>
        <block order="11">
          <cline>        return True</cline>
        </block>
        <block order="3">
          <choice correct="yes">
            <cline>    else:</cline>
          </choice>
          <choice>
            <cline>    else </cline>
          </choice>
        </block>
        <block order="4">
          <choice correct="yes">
            <cline>        return False</cline>
          </choice>
          <choice>
            <cline>        return false </cline>
          </choice>
        </block>
      </blocks>
    </exercise>
    <p>If you worked in a group, you can copy the answers from this page to the other group members.  Select the group members below and click the button to share the answers.</p>
    <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
    &lt;div data-component="groupsub" id=func_cond_groupsub data-size_limit=4&gt;
        &lt;div class="col-sm-6"&gt;
            &lt;select id="assignment_group" multiple class="assignment_partner_select" style="width: 100%"&gt;
            &lt;/select&gt;
        &lt;/div&gt;
        &lt;div id="groupsub_button" class="col-sm-6"&gt;
        &lt;/div&gt;
        &lt;p&gt;The Submit Group button will submit the answer for each each question
        on this page for each member of your group. It also logs you as the official
        group submitter.&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
</raw>
  </subsection>
</section>
