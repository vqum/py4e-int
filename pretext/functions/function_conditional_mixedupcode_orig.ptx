<?xml version="1.0"?>
<section xml:id="functions_functions-and-conditionals-mixed-up-code-questions">
  <title>Functions and Conditionals Mixed-Up Code Questions</title>
  <exercise label="funct_conditional_mixedupcode_1" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function called <c>get_grade</c> that takes in a parameter <c>percentage</c> and returns a string variable called <c>letter_grade</c>.
            If the <c>percentage</c> is greater than 100, return <c>"You can't get over 100."</c>. Otherwise, it should return <c>'A'</c> if the score is greater than or equal to 90,
            <c>'B'</c> if greater than or equal to 80, <c>'C'</c> if greater than or equal to 70, <c>'D'</c> if greater than or equal to 60, and otherwise <c>'E'</c>.
            For example, <c>get_grade(90)</c> should return <c>'A'</c>.</p>
    </statement>
    <blocks>
      <block order="8">
        <choice correct="yes">
          <cline>def get_grade(percentage):</cline>
        </choice>
        <choice>
          <cline>def get_grade(percentage) </cline>
        </choice>
      </block>
      <block order="12">
        <cline>    if percentage &gt; 100:</cline>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>        return "You can't get over 100."</cline>
        </choice>
        <choice>
          <cline>        return 'You can't get over 100.' </cline>
        </choice>
      </block>
      <block order="4">
        <cline>    elif percentage &lt;= 100 and percentage &gt;= 90:</cline>
      </block>
      <block order="7">
        <choice correct="yes">
          <cline>        letter_grade = 'A'</cline>
        </choice>
        <choice>
          <cline>        letter_grade == 'A' </cline>
        </choice>
      </block>
      <block order="6">
        <cline>    elif percentage &gt;= 80:</cline>
      </block>
      <block order="10">
        <cline>        letter_grade = 'B'</cline>
      </block>
      <block order="14">
        <cline>    elif percentage &gt;= 70:</cline>
      </block>
      <block order="16">
        <cline>        letter_grade = 'C'</cline>
      </block>
      <block order="1">
        <cline>    elif percentage &gt;= 60:</cline>
      </block>
      <block order="5">
        <cline>        letter_grade = 'D'</cline>
      </block>
      <block order="15">
        <cline>    else:</cline>
        <cline>        letter_grade = 'E'</cline>
      </block>
      <block order="9">
        <cline>    return letter_grade</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="funct_conditional_mixedupcode_1_ac">
    <statement>
      <p>Write a function called <c>get_grade</c> that takes in a parameter <c>percentage</c> and returns a string variable called <c>letter_grade</c>.
            If the <c>percentage</c> is greater than 100, return <c>"You can't get over 100."</c>. Otherwise, it should return <c>'A'</c> if the score is greater than or equal to 90,
            <c>'B'</c> if greater than or equal to 80, <c>'C'</c> if greater than or equal to 70, <c>'D'</c> if greater than or equal to 60, and otherwise <c>'E'</c>.
            For example, <c>get_grade(90)</c> should return <c>'A'</c>.</p>
    </statement>
    <program xml:id="funct_conditional_mixedupcode_1_ac_editor" interactive="activecode" language="python">
      <input>
def get_grade(percentage):
    # write code here

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(get_grade(101),"You can't get over 100.","get_grade(101)")
        self.assertEqual(get_grade(100),"A","get_grade(100)")
        self.assertEqual(get_grade(95),"A","get_grade(95)")
        self.assertEqual(get_grade(90),"A","get_grade(90)")
        self.assertEqual(get_grade(89),"B","get_grade(89)")
        self.assertEqual(get_grade(80),"B","get_grade(80)")
        self.assertEqual(get_grade(79),"C","get_grade(79)")
        self.assertEqual(get_grade(70),"C","get_grade(70)")
        self.assertEqual(get_grade(69),"D","get_grade(69)")
        self.assertEqual(get_grade(60),"D","get_grade(60)")
        self.assertEqual(get_grade(59),"E","get_grade(59)")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="funct_conditional_mixedupcode_2" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function called <c>even_or_odd</c> that takes in a parameter <c>num</c>. If <c>num</c> is odd, return <c>"This is odd."</c>, and if <c>num</c> is even, return <c>"This is even." ``.
For example, ``even_or_odd(-65)</c> should return <c>"This is odd."</c>. Note: For this function, <c>num</c> is solely an integer.</p>
    </statement>
    <blocks>
      <block order="5">
        <choice correct="yes">
          <cline>def even_or_odd(num):</cline>
        </choice>
        <choice>
          <cline>Def even_or_odd(num): </cline>
        </choice>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>    if num % 2 == 0:</cline>
        </choice>
        <choice>
          <cline>    if num % 2 = 1: </cline>
        </choice>
      </block>
      <block order="2">
        <cline>    if num % 2 = 0: </cline>
      </block>
      <block order="8">
        <cline>        return "This is even."</cline>
      </block>
      <block order="6">
        <cline>    else:</cline>
      </block>
      <block order="3">
        <cline>        return "This is odd."</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="funct_conditional_mixedupcode_2_ac">
    <statement>
      <p>Write a function called <c>even_or_odd</c> that takes in a parameter <c>num</c>. If <c>num</c> is odd, return <c>"This is odd."</c>, and if <c>num</c> is even, return <c>"This is even." ``.
For example, ``even_or_odd(-65)</c> should return <c>"This is odd."</c>. Note: For this function, <c>num</c> is solely an integer.</p>
    </statement>
    <program xml:id="funct_conditional_mixedupcode_2_ac_editor" interactive="activecode" language="python">
      <input>
def even_or_odd(num):
    # write code here

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(even_or_odd(100),"This is even.","even_or_odd(100)")
        self.assertEqual(even_or_odd(58),"This is even.","even_or_odd(58)")
        self.assertEqual(even_or_odd(1002),"This is even.","even_or_odd(1002)")
        self.assertEqual(even_or_odd(199994),"This is even.","even_or_odd(199994)")
        self.assertEqual(even_or_odd(0),"This is even.","even_or_odd(0)")
        self.assertEqual(even_or_odd(6),"This is even.","even_or_odd(6)")
        self.assertEqual(even_or_odd(79),"This is odd.","even_or_odd(79)")
        self.assertEqual(even_or_odd(-65),"This is odd.","even_or_odd(-65)")
        self.assertEqual(even_or_odd(-43.0),"This is odd.","even_or_odd(-43.0)")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="funct_conditional_mixedupcode_3" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function called <c>which_quadrant</c> that takes in parameters <c>x</c> and <c>y</c> and returns its corresponding quadrants in increasing order
            (<q>Quadrant 1</q>, <q>Quadrant 2</q>, etc.). Refer to <url href="https://en.wikipedia.org/wiki/Quadrant_(plane_geometry" visual="https://en.wikipedia.org/wiki/Quadrant_(plane_geometry">https://en.wikipedia.org/wiki/Quadrant_(plane_geometry</url>) for quadrants on a coordinate
            plane if needed. If coordinate is on the x or y axis, return <c>"It's not in a quadrant."</c>. For example, <c>which_quadrant(1, 100)</c>
            should return <c>"Quadrant 1"</c>.</p>
    </statement>
    <blocks>
      <block order="16">
        <cline>def which_quadrant(x, y):</cline>
      </block>
      <block order="9">
        <choice correct="yes">
          <cline>    if (x &gt; 0) and (y &gt; 0):</cline>
        </choice>
        <choice>
          <cline>    if (x &gt;= 0) and (y &gt;= 0): </cline>
        </choice>
      </block>
      <block order="6">
        <cline>        return "Quadrant 1"</cline>
      </block>
      <block order="12">
        <choice correct="yes">
          <cline>    elif (x &lt; 0) and (y &gt; 0):</cline>
        </choice>
        <choice>
          <cline>    elif (x &lt;= 0) and (y &gt;= 0): </cline>
        </choice>
      </block>
      <block order="2">
        <cline>        return "Quadrant 2"</cline>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline>    elif (x &lt; 0) and (y &lt; 0):</cline>
        </choice>
        <choice>
          <cline>    elif (x &lt;= 0) and (y &lt;= 0): </cline>
        </choice>
      </block>
      <block order="3">
        <cline>        return "Quadrant 3"</cline>
      </block>
      <block order="7">
        <choice correct="yes">
          <cline>    elif (x &gt; 0) and (y &lt; 0):</cline>
        </choice>
        <choice>
          <cline>    elif (x &gt;= 0) and (y &lt;= 0): </cline>
        </choice>
      </block>
      <block order="4">
        <cline>        return "Quadrant 4"</cline>
      </block>
      <block order="15">
        <cline>    else:</cline>
      </block>
      <block order="10">
        <choice correct="yes">
          <cline>        return "It's not in a quadrant."</cline>
        </choice>
        <choice>
          <cline>        return 'It's not in a quadrant.' </cline>
        </choice>
      </block>
    </blocks>
  </exercise>
  <exercise label="funct_conditional_mixedupcode_3_ac">
    <statement>
      <p>Write a function called <c>which_quadrant</c> that takes in parameters <c>x</c> and <c>y</c> and returns its corresponding quadrants
            (<q>Quadrant 1</q>, <q>Quadrant 2</q>, etc.). Refer to <url href="https://en.wikipedia.org/wiki/Quadrant_(plane_geometry" visual="https://en.wikipedia.org/wiki/Quadrant_(plane_geometry">https://en.wikipedia.org/wiki/Quadrant_(plane_geometry</url>) for quadrants on a coordinate
            plane if needed. If coordinate is on the x or y axis, return <c>"It's not in a quadrant."</c>. For example, <c>which_quadrant(1, 100)</c>
            should return <c>"Quadrant 1"</c>.</p>
    </statement>
    <program xml:id="funct_conditional_mixedupcode_3_ac_editor" interactive="activecode" language="python">
      <input>
def which_quadrant(x, y):
    # write code here

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(which_quadrant(0, 0),"It's not in a quadrant.","which_quadrant(0, 0)")
        self.assertEqual(which_quadrant(0, 15),"It's not in a quadrant.","which_quadrant(0, 15)")
        self.assertEqual(which_quadrant(-200, 0),"It's not in a quadrant.","which_quadrant(-200, 0)")
        self.assertEqual(which_quadrant(11, 0),"It's not in a quadrant.","which_quadrant(11, 0)")
        self.assertEqual(which_quadrant(0, 10),"It's not in a quadrant.","which_quadrant(0, 10)")
        self.assertEqual(which_quadrant(1, 100),"Quadrant 1","which_quadrant(1, 100)")
        self.assertEqual(which_quadrant(-5, 20),"Quadrant 2","which_quadrant(-5, 20)")
        self.assertEqual(which_quadrant(-100, -85),"Quadrant 3","which_quadrant(-100, -85)")
        self.assertEqual(which_quadrant(2020.4, -4.5),"Quadrant 4","which_quadrant(2020.4, -4.5)")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="funct_conditional_mixedupcode_4" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function called <c>axis_or_origin</c> that takes in parameters <c>x</c> and <c>y</c>. If both coordinates aren't 0,
            return <c>"This coordinate is not on an axis. It's in a quadrant."</c>. If both coordinates are 0, return <c>"This coordinate is the origin."</c>.
            Lastly, if the coordinate isn't in a quadrant and isn't the origin, determine if the coordinate is on the x or y axis by returning
            <c>"This coordinate is on the (y-axis or x-axis)."</c>. Refer to <url href="https://www.math.net/x-and-y-axis" visual="https://www.math.net/x-and-y-axis">https://www.math.net/x-and-y-axis</url> for information on axes if needed.
            For example, <c>axis_or_origin(500, 0)</c> should return <c>"This coordinate is on the x-axis."</c>.</p>
    </statement>
    <blocks>
      <block order="1">
        <cline>def axis_or_origin(x, y):</cline>
      </block>
      <block order="6">
        <choice correct="yes">
          <cline>    if (x != 0) and (y != 0):</cline>
        </choice>
        <choice>
          <cline>    if (x != 0) &amp;&amp; (y != 0): </cline>
        </choice>
      </block>
      <block order="4">
        <cline>    if (x != 0) or (y != 0): </cline>
      </block>
      <block order="12">
        <cline>        return "This coordinate is not on an axis. It's in a quadrant."</cline>
      </block>
      <block order="8">
        <cline>    elif (x == 0) and (y == 0):</cline>
      </block>
      <block order="11">
        <cline>        return "This coordinate is the origin."</cline>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>    elif x == 0:</cline>
        </choice>
        <choice>
          <cline>    if x == 0: </cline>
        </choice>
      </block>
      <block order="7">
        <cline>    elif x = 0: </cline>
      </block>
      <block order="2">
        <cline>        return "This coordinate is on the y-axis."</cline>
      </block>
      <block order="10">
        <cline>    else:</cline>
      </block>
      <block order="13">
        <cline>        return "This coordinate is on the x-axis."</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="funct_conditional_mixedupcode_4_ac">
    <statement>
      <p>Write a function called <c>axis_or_origin</c> that takes in parameters <c>x</c> and <c>y</c>. If both coordinates aren't 0,
            return <c>"This coordinate is not on an axis. It's in a quadrant."</c>. If both coordinates are 0, return <c>"This coordinate is the origin."</c>.
            Lastly, if the coordinate isn't in a quadrant and isn't the origin, determine if the coordinate is on the x or y axis by returning
            <c>"This coordinate is on the (y-axis or x-axis)."</c>. Refer to <url href="https://www.math.net/x-and-y-axis" visual="https://www.math.net/x-and-y-axis">https://www.math.net/x-and-y-axis</url> for information on axes if needed.
            For example, <c>axis_or_origin(500, 0)</c> should return <c>"This coordinate is on the x-axis."</c>.</p>
    </statement>
    <program xml:id="funct_conditional_mixedupcode_4_ac_editor" interactive="activecode" language="python">
      <input>
def axis_or_origin(x, y):
    # write code here

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(axis_or_origin(-5, 20),"This coordinate is not on an axis. It's in a quadrant.","axis_or_origin(-5, 20)")
        self.assertEqual(axis_or_origin(5, 20.5),"This coordinate is not on an axis. It's in a quadrant.","axis_or_origin(5, 20.5)")
        self.assertEqual(axis_or_origin(-400, -101),"This coordinate is not on an axis. It's in a quadrant.","axis_or_origin(-400, -101)")
        self.assertEqual(axis_or_origin(10004, -40.3),"This coordinate is not on an axis. It's in a quadrant.","axis_or_origin(10004, -40.3)")
        self.assertEqual(axis_or_origin(0, 0),"This coordinate is the origin.","axis_or_origin(0, 0)")
        self.assertEqual(axis_or_origin(0, -200),"This coordinate is on the y-axis.","axis_or_origin(0, -200)")
        self.assertEqual(axis_or_origin(500, 0),"This coordinate is on the x-axis.","axis_or_origin(500, 0)")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="funct_conditional_mixedupcode_5" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function called <c>num_to_day</c> that takes in a parameter <c>num</c>. If <c>num</c> is between 1-5 inclusive,
            create a nested conditional statement that returns <c>"This is a weekday, and it's (insert day here)."</c>, 1 being Monday through 5 being Friday.
            If <c>num</c> is 6 or 7, create a nested conditional statement that returns <c>"It is the weekend, and it's (insert day here)."</c>,
            6 being Saturday and 7 being Sunday. If none of the other conditions have been met, return <c>"The number does not correspond to a day of the week."</c>.
            For example, <c>num_to_day(1)</c> should return <c>"This is a weekday, and it's Monday."</c>.</p>
    </statement>
    <blocks>
      <block order="19">
        <cline>def num_to_day(num):</cline>
      </block>
      <block order="18">
        <choice correct="yes">
          <cline>    if (num &gt;= 1) and (num &lt;= 5):</cline>
        </choice>
        <choice>
          <cline>    if (num &gt; 1) and (num &lt; 5): </cline>
        </choice>
      </block>
      <block order="2">
        <cline>        if num == 1:</cline>
      </block>
      <block order="5">
        <cline>            return "This is a weekday, and it's Monday."</cline>
      </block>
      <block order="12">
        <cline>        elif num == 2:</cline>
      </block>
      <block order="1">
        <cline>            return "This is a weekday, and it's Tuesday."</cline>
      </block>
      <block order="16">
        <cline>        elif num == 3:</cline>
      </block>
      <block order="21">
        <cline>            return "This is a weekday, and it's Wednesday."</cline>
      </block>
      <block order="22">
        <cline>        elif num == 4:</cline>
      </block>
      <block order="4">
        <cline>            return "This is a weekday, and it's Thursday."</cline>
      </block>
      <block order="15">
        <cline>        else:</cline>
      </block>
      <block order="13">
        <cline>            return "This is a weekday, and it's Friday."</cline>
      </block>
      <block order="14">
        <choice correct="yes">
          <cline>    elif (num &gt; 5) and (num &lt;= 7):</cline>
        </choice>
        <choice>
          <cline>    elif num &lt;= 7: </cline>
        </choice>
      </block>
      <block order="6">
        <choice correct="yes">
          <cline>    elif (num &gt; 5) or (num &lt;= 7): </cline>
        </choice>
        <choice>
          <cline>    elif (num &gt;= 5) or (num &lt;= 7): </cline>
        </choice>
      </block>
      <block order="17">
        <cline>        if num == 6:</cline>
      </block>
      <block order="23">
        <cline>            return "It is the weekend, and it's Saturday."</cline>
      </block>
      <block order="3">
        <cline>        else:</cline>
      </block>
      <block order="10">
        <cline>            return "It is the weekend, and it's Sunday."</cline>
      </block>
      <block order="11">
        <cline>    else:</cline>
      </block>
      <block order="9">
        <cline>        return "The number does not correspond to a day of the week."</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="funct_conditional_mixedupcode_5_ac">
    <statement>
      <p>Write a function called <c>num_to_day</c> that takes in a parameter <c>num</c>. If <c>num</c> is between 1-5 inclusive,
            create a nested conditional statement that returns <c>"This is a weekday, and it's (insert day here)."</c>, 1 being Monday through 5 being Friday.
            If <c>num</c> is 6 or 7, create a nested conditional statement that returns <c>"It is the weekend, and it's (insert day here)."</c>,
            6 being Saturday and 7 being Sunday. If none of the other conditions have been met, return <c>"The number does not correspond to a day of the week."</c>.
            For example, <c>num_to_day(1)</c> should return <c>"This is a weekday, and it's Monday."</c>.</p>
    </statement>
    <program xml:id="funct_conditional_mixedupcode_5_ac_editor" interactive="activecode" language="python">
      <input>
def num_to_day(num):
    # write code here

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(num_to_day(-1),"The number does not correspond to a day of the week.","num_to_day(-1)")
        self.assertEqual(num_to_day(0),"The number does not correspond to a day of the week.","num_to_day(0)")
        self.assertEqual(num_to_day(1),"This is a weekday, and it's Monday.","num_to_day(1)")
        self.assertEqual(num_to_day(2),"This is a weekday, and it's Tuesday.","num_to_day(2)")
        self.assertEqual(num_to_day(3),"This is a weekday, and it's Wednesday.","num_to_day(3)")
        self.assertEqual(num_to_day(4),"This is a weekday, and it's Thursday.","num_to_day(4)")
        self.assertEqual(num_to_day(5),"This is a weekday, and it's Friday.","num_to_day(5)")
        self.assertEqual(num_to_day(6),"It is the weekend, and it's Saturday.","num_to_day(6)")
        self.assertEqual(num_to_day(7),"It is the weekend, and it's Sunday.","num_to_day(7)")
        self.assertEqual(num_to_day(8),"The number does not correspond to a day of the week.","num_to_day(8)")
        self.assertEqual(num_to_day(-100),"The number does not correspond to a day of the week.","num_to_day(-100)")
        self.assertEqual(num_to_day(1001),"The number does not correspond to a day of the week.","num_to_day(1001)")

myTests().main()
        </input>
    </program>
  </exercise>
</section>
