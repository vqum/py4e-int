<?xml version="1.0"?>
<section xml:id="functions_function-and-string-mixed-up-code-questions">
  <title>Function and String Mixed-Up Code Questions</title>
  <exercise label="Function_String_MixedUpCode_1_v2" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function <c>joinStrings(str1, str2)</c> that takes two different strings
            as parameters, <c>str1</c> and <c>str2</c>, and returns them as one string with <c>str1</c> before <c>str2</c>.
            For example, <c>joinStrings('he','llo')</c> returns <c>hello</c>.</p>
    </statement>
    <blocks>
      <block order="6">
        <choice correct="yes">
          <cline>def joinStrings(str1, str2):</cline>
        </choice>
        <choice>
          <cline>def joinStrings(): </cline>
        </choice>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline>    joined = str1 + str2</cline>
        </choice>
        <choice>
          <cline>    joined = str1.join(str2) </cline>
        </choice>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>    return joined</cline>
        </choice>
        <choice>
          <cline>    Return joined </cline>
        </choice>
      </block>
    </blocks>
  </exercise>
  <exercise label="Function_String_MixedUpCode_1_v2_ac">
    <statement>
      <p>Write a function <c>joinStrings(str1, str2)</c> that takes two different strings
            as parameters, <c>str1</c> and <c>str2</c>, and returns them as one string with <c>str1</c> before <c>str2</c>.
            For example, <c>joinStrings('he','llo')</c> returns <c>hello</c>.</p>
    </statement>
    <program xml:id="Function_String_MixedUpCode_1_v2_ac_editor" interactive="activecode" language="python">
      <input>

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(joinStrings('he', 'llo'),"hello","joinStrings('he', 'llo')")
        self.assertEqual(joinStrings('bye', 'bye'),"byebye","joinStrings('bye', 'bye')")
        self.assertEqual(joinStrings('Walk', 'Away'),"WalkAway","joinStrings('Walk', 'Away')")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="Function_String_MixedUpCode_2_v2" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function <c>rect_per(w, h)</c> that takes the width, <c>w</c>, and the height, <c>h</c>, as parameters. Calculate the perimeter, which is the width plus the height times two,
            and return a string in the form - <c>Perimeter of rectangle with width of (w) and height of (h) is (perimeter)</c>.  For example, <c>rect_per(5,10)</c>
            returns <c>Perimeter of rectangle with width of 5 and height of 10 is 30</c>.</p>
    </statement>
    <blocks>
      <block order="7">
        <choice correct="yes">
          <cline>def rect_per(w, h):</cline>
        </choice>
        <choice>
          <cline>def rect_per(w, h) </cline>
        </choice>
      </block>
      <block order="6">
        <choice correct="yes">
          <cline>    perimeter = (w + h) * 2</cline>
        </choice>
        <choice>
          <cline>    perimeter = w + h * 2 </cline>
        </choice>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>    answer = "Perimeter of rectangle with width of " + str(w) + " and height of " + str(h) + " is " + str(perimeter)</cline>
        </choice>
        <choice>
          <cline>    answer = "Perimeter of rectangle with width of " + str(w) + " and height of " + str(h) + " is " + perimeter </cline>
        </choice>
      </block>
      <block order="1">
        <cline>    return answer</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="Function_String_MixedUpCode_2_v2_ac">
    <statement>
      <p>Write a function <c>rect_per(w, h)</c> that takes the width, <c>w</c>, and the height, <c>h</c>, as parameters. Calculate the perimeter, which is the width plus the height times two,
            and return a string in the form - <c>Perimeter of rectangle with width of (w) and height of (h) is (perimeter)</c>.  For example, <c>rect_per(5,10)</c>
            returns <c>Perimeter of rectangle with width of 5 and height of 10 is 30</c>.</p>
    </statement>
    <program xml:id="Function_String_MixedUpCode_2_v2_ac_editor" interactive="activecode" language="python">
      <input>

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(rect_per(5, 10),"Perimeter of rectangle with width of 5 and height of 10 is 30","rect_per(5, 10)")
        self.assertEqual(rect_per(2, 3),"Perimeter of rectangle with width of 2 and height of 3 is 10","rect_per(2, 3)")
        self.assertEqual(rect_per(2.5, 3.5),"Perimeter of rectangle with width of 2.5 and height of 3.5 is 12.0","rect_per(2.5, 3.5)")
        self.assertEqual(rect_per(1.3, 2.6),"Perimeter of rectangle with width of 1.3 and height of 2.6 is 7.8","rect_per(1.3, 2.6)")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="Function_String_MixedUpCode_3" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function <c>cube(n)</c> that takes a number, <c>n</c>, and cubes it and returns a string in the form
            <c>Cube of (n) is (n cubed)</c>.  For example, <c>cube(4)</c> returns <c>Cube of 4 is 64</c>.</p>
    </statement>
    <blocks>
      <block order="4">
        <cline>def cube(n):</cline>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>    cube_num = n ** 3</cline>
        </choice>
        <choice>
          <cline>    cube_num = n * 3 </cline>
        </choice>
      </block>
      <block order="3">
        <cline>    answer = "Cube of " + str(n) + " is " + str(cube_num)</cline>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline>    return answer</cline>
        </choice>
        <choice>
          <cline>    return cube_num </cline>
        </choice>
      </block>
    </blocks>
  </exercise>
  <exercise label="Function_String_MixedUpCode_3_ac">
    <statement>
      <p>Write a function <c>cube(n)</c> that takes a number, <c>n</c>, and cubes it and returns a string in the form
            <c>Cube of (n) is (n cubed)</c>.  For example, <c>cube(4)</c> returns <c>Cube of 4 is 64</c>.</p>
    </statement>
    <program xml:id="Function_String_MixedUpCode_3_ac_editor" interactive="activecode" language="python">
      <input>

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(cube(3),"Cube of 3 is 27","cube(3)")
        self.assertEqual(cube(4),"Cube of 4 is 64","cube(4)")
        self.assertEqual(cube(5),"Cube of 5 is 125","cube(5)")
        self.assertEqual(cube(1),"Cube of 1 is 1","cube(1)")
        self.assertEqual(cube(1.5),"Cube of 1.5 is 3.375","cube(1.5)")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="Function_String_MixedUpCode_4" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function <c>atlas(c_name)</c> that takes a country name, <c>c_name</c>,
            as a parameter and returns a string in the form of
            <c>The last letter of (c_name) is (last)</c>.  For example, <c>atlas('Germany')</c> returns
            <c>The last letter of Germany is y</c>.</p>
    </statement>
    <blocks>
      <block order="4">
        <cline>def atlas(c_name):</cline>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline>    last = c_name[-1]</cline>
        </choice>
        <choice>
          <cline>    last = c_name[:-1] </cline>
        </choice>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>    return("The last letter of " + c_name + " is " + last)</cline>
        </choice>
        <choice>
          <cline>    return("The last letter of" + c_name + "is" + last) </cline>
        </choice>
      </block>
    </blocks>
  </exercise>
  <exercise label="Function_String_MixedUpCode_4_ac">
    <statement>
      <p>Write a function <c>atlas(c_name)</c> that takes a country name, <c>c_name</c>,
            as a parameter and returns a string in the form of
            <c>The last letter of (c_name) is (last)</c>.  For example, <c>atlas('Germany')</c> returns
            <c>The last letter of Germany is y</c>.</p>
    </statement>
    <program xml:id="Function_String_MixedUpCode_4_ac_editor" interactive="activecode" language="python">
      <input>

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(atlas('Germany'),"The last letter of Germany is y","atlas('Germany')")
        self.assertEqual(atlas('USA'),"The last letter of USA is A","atlas('USA')")
        self.assertEqual(atlas('India'),"The last letter of India is a","atlas('India')")
        self.assertEqual(atlas('China'),"The last letter of China is a","atlas('China')")
        self.assertEqual(atlas('Ghana'),"The last letter of Ghana is a","atlas('Ghana')")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="Function_String_MixedUpCode_5" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function <c>dateYear(date)</c> that takes a string, <c>date</c>, in the format MM/DD/YYYY and returns the year.
            For example, <c>dateYear(11/07/2000)</c> should return <c>2000</c>.</p>
    </statement>
    <blocks>
      <block order="2">
        <cline>def dateYear(date):</cline>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>    year = date[6:]</cline>
        </choice>
        <choice>
          <cline>    year = date[7:] </cline>
        </choice>
      </block>
      <block order="4">
        <cline>    return year</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="Function_String_MixedUpCode_5_ac">
    <statement>
      <p>Write a function <c>dateYear(date)</c> that takes a string, <c>date</c>, in the format MM/DD/YYYY and returns the year.
            For example, <c>dateYear(11/07/2000)</c> should return <c>2000</c>.</p>
    </statement>
    <program xml:id="Function_String_MixedUpCode_5_ac_editor" interactive="activecode" language="python">
      <input>

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(dateYear('03/07/1961'),"1961","dateYear('03/07/1961')")
        self.assertEqual(dateYear('12/24/1945'),"1945","dateYear('12/24/1945')")
        self.assertEqual(dateYear('11/07/2000'),"2000","dateYear('11/07/2000')")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="Function_String_MixedUpCode_6" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function <c>capitalize(str)</c>, that takes a string, <c>str</c>, and returns the string with the first letter capitalized.
            For example, <c>capitalize('america')</c> would return <c>America</c>.</p>
    </statement>
    <blocks>
      <block order="3">
        <choice correct="yes">
          <cline>def capitalize(str):</cline>
        </choice>
        <choice>
          <cline>Def Capitalize(str): </cline>
        </choice>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline>    answer = str[0].upper() + str[1:]</cline>
        </choice>
        <choice>
          <cline>    answer = str.upper() + str[1:] </cline>
        </choice>
      </block>
      <block order="2">
        <cline>    return answer</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="Function_String_MixedUpCode_6_ac">
    <statement>
      <p>Write a function <c>capitalize(str)</c>, that takes a string, <c>str</c>, and returns the string with the first letter capitalized.
            For example, <c>capitalize('america')</c> would return <c>America</c>.</p>
    </statement>
    <program xml:id="Function_String_MixedUpCode_6_ac_editor" interactive="activecode" language="python">
      <input>

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(capitalize('america'),"America","capitalize('america')")
        self.assertEqual(capitalize('walk'),"Walk","capitalize('walk')")
        self.assertEqual(capitalize('Bend'),"Bend","capitalize('Bend')")
        self.assertEqual(capitalize('flower'),"Flower","capitalize('flower')")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="Function_String_MixedUpCode_7" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function <c>mod_password(password)</c>, that takes a string, <c>password</c>, and returns a new string that replaces all <c>'s'</c> in the string with <c>'$'</c>.
            For example, <c>mod_password('suspense')</c> returns <c>$u$pen$e</c>.</p>
    </statement>
    <blocks>
      <block order="1">
        <cline>def mod_password(password):</cline>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline>    new = password.replace('s', '$')</cline>
        </choice>
        <choice>
          <cline>    new = password.remove('s') + '$' </cline>
        </choice>
      </block>
      <block order="3">
        <cline>    return new</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="Function_String_MixedUpCode_7_ac">
    <statement>
      <p>Write a function <c>mod_password(password)</c>, that takes a string, <c>password</c>, and returns a new string that replaces all <c>'s'</c> in the string with <c>'$'</c>.
            For example, <c>mod_password('suspense')</c> returns <c>$u$pen$e</c>.</p>
    </statement>
    <program xml:id="Function_String_MixedUpCode_7_ac_editor" interactive="activecode" language="python">
      <input>

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(mod_password('suspense'),"$u$pen$e","mod_password('suspense')")
        self.assertEqual(mod_password('sue'),"$ue","mod_password('sue')")
        self.assertEqual(mod_password('sass'),"$a$$","mod_password('sass')")
        self.assertEqual(mod_password('away'),"away","mod_password('away')")
        self.assertEqual(mod_password('apples'),"apple$","mod_password('apples')")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="Function_String_MixedUpCode_8" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function <c>first_last(str)</c>, that takes a string, <c>str</c>, and returns a new string with the first two characters of the word
            followed by the last two characters. Assume <c>str</c> is four characters or more.
            For example, <c>first_last('wander')</c> returns <c>waer</c>.</p>
    </statement>
    <blocks>
      <block order="4">
        <cline>def first_last(str):</cline>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>    out = str[:2] + str[-2:]</cline>
        </choice>
        <choice>
          <cline>    out = str[-2:] + str[:2] </cline>
        </choice>
      </block>
      <block order="2">
        <cline>    return out</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="Function_String_MixedUpCode_8_ac">
    <statement>
      <p>Write a function <c>first_last(str)</c>, that takes a string, <c>str</c>, and returns a new string with the first two characters of the word
            followed by the last two characters. Assume <c>str</c> is four characters or more.
            For example, <c>first_last('wander')</c> returns <c>waer</c>.</p>
    </statement>
    <program xml:id="Function_String_MixedUpCode_8_ac_editor" interactive="activecode" language="python">
      <input>

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(first_last('wander'),"waer","first_last('wander')")
        self.assertEqual(first_last('hope'),"hope","first_last('hope')")
        self.assertEqual(first_last('through'),"thgh","first_last('through')")

myTests().main()
        </input>
    </program>
  </exercise>
</section>
