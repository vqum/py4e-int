<?xml version="1.0"?>
<section xml:id="functions_functions-and-conditionals-write-code-questions">
  <title>Functions and Conditionals Write Code Questions</title>

        <exercise>
          <statement>
            <p>Write a function called <c>cropped_photo</c> that takes the <c>height</c> and <c>width</c> of a photo.
                            If the <c>height</c> and <c>width</c> are equal, then the function returns <c>"Cropped Photo"</c>. Otherwise,
                            it returns <c>"The photo needs to be cropped."</c> Assume <c>height</c> and <c>width</c> are positive. For example,
                            <c>cropped_photo(23.2, 23.2)</c> should return <c>"Cropped Photo"</c>.</p>
          </statement>
          <program interactive="activecode" language="python" xml:id="funct_conditional_writecode1q_editor">
            <input>
def cropped_photo(height, width):
    # write code here

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(cropped_photo(30, 80),"The photo needs to be cropped.","cropped_photo(30, 80)")
        self.assertEqual(cropped_photo(50, 50),"Cropped Photo","cropped_photo(50, 50)")
        self.assertEqual(cropped_photo(50.5, 50),"The photo needs to be cropped.","cropped_photo(50.5, 50)")
        self.assertEqual(cropped_photo(23.2, 23.2),"Cropped Photo","cropped_photo(23.2, 23.2)")

myTests().main()
        </input>
          </program>
          <solution>


    
                        Write a function called cropped_photo that takes the height and width of a photo.
                            If the height and width are equal, then the function returns "Cropped Photo". Otherwise,
                            it returns "The photo needs to be cropped." Assume height and width are positive. For example,
                            cropped_photo(23.2, 23.2) should return "Cropped Photo".

    
    <program xml:id="funct_conditional_writecode1a_editor" language="python"><input>
def cropped_photo(height, width):
    if height == width:
        return "Cropped Photo"
    else:
        return "The photo needs to be cropped."
        </input></program>
                    </solution>
        </exercise>

        <exercise label="funct_conditional_writecode2q">
          <statement>
            <p>Write a function called <c>bonus</c> that takes two parameters, <c>years</c> and <c>quality</c>.
                    If <c>years</c> is more than 5, then the person gets a bonus.
                    The person also gets a bonus if their <c>quality</c> of work was more than 90.
                    They can also get a bonus if they worked for at least 3 <c>years</c> and had <c>quality</c> more than 80.
                    If the person is eligible for a bonus, return <c>"Eligible for Bonus"</c>. Otherwise, return <c>"Ineligible for Bonus"</c>.
                    For example, <c>bonus(3, 81)</c> should return <c>"Eligible for Bonus"</c>.</p>
          </statement>
          <program xml:id="funct_conditional_writecode2q_editor" interactive="activecode" language="python">
            <input>
def bonus(years, quality):
    # write code here

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(bonus(7, 40),"Eligible for Bonus","bonus(7, 40)")
        self.assertEqual(bonus(5, 40),"Ineligible for Bonus","bonus(5, 40)")
        self.assertEqual(bonus(2, 98),"Eligible for Bonus","bonus(2, 98)")
        self.assertEqual(bonus(2, 90),"Ineligible for Bonus","bonus(2, 90)")
        self.assertEqual(bonus(3, 81),"Eligible for Bonus","bonus(3, 81)")
        self.assertEqual(bonus(4, 81),"Eligible for Bonus","bonus(4, 81)")
        self.assertEqual(bonus(3, 67),"Ineligible for Bonus","bonus(3, 67)")
        self.assertEqual(bonus(3, 80),"Ineligible for Bonus","bonus(3, 80)")
        self.assertEqual(bonus(2, 88),"Ineligible for Bonus","bonus(2, 88)")

myTests().main()
        </input>
          </program>
        </exercise>

        <exercise>
          <statement>
            <p>Write a function called <c>move_elevator</c> that takes two parameters, <c>current_floor</c> and <c>next_floor</c>. If the elevator moves
                            to a floor above, then it should return <c>"Up"</c>. Otherwise, it should return <c>"Down"</c>. Also, if <c>next_floor</c> is the same as <c>current_floor</c>, it should return 0.
                            Assume there are no 0 or negative floors. For example, <c>move_elevator(5, 8)</c> should return <c>"Up"</c>.</p>
          </statement>
          <program interactive="activecode" language="python" xml:id="funct_conditional_writecode3q_editor">
            <input>
def move_elevator(current_floor, next_floor):
    # write code here

====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(move_elevator(5, 8),"Up","move_elevator(5, 8)")
        self.assertEqual(move_elevator(2, 2),0,"move_elevator(2, 2)")
        self.assertEqual(move_elevator(9, 3),"Down","move_elevator(9, 3)")

myTests().main()
        </input>
          </program>
          <solution>


    
                        Write a function called move_elevator that takes two parameters, current_floor and next_floor. If the elevator moves
                            to a floor above, then it should return "Up". Otherwise, it should return "Down". Also, if next_floor is the same as current_floor, it should return 0.
                            Assume there are no 0 or negative floors. For example, move_elevator(5, 8) should return "Up".

    
    <program xml:id="funct_conditional_writecode3a_editor" language="python"><input>
def move_elevator(current_floor, next_floor):
    if next_floor &lt; current_floor:
        return "Down"
    elif next_floor &gt; current_floor:
        return "Up"
    else:
        return 0
        </input></program>
                    </solution>
        </exercise>

        <exercise label="funct_conditional_writecode4q">
          <statement>
            <p>Write a function called <c>lunch_break</c> that takes a parameter <c>class_standing</c> and determines how long a lunch break will be based on
                    the student's class standing. If a person is a &#x2018;Freshman', return <c>40</c>. If a person is a &#x2018;Sophomore', return <c>30</c>.
                    If a person is a &#x2018;Junior', return <c>20</c>. If a person is a &#x2018;Senior', return <c>15</c>. If a person is none of these, return <c>0</c>.
                    For example, <c>lunch_break('Alumni')</c> should return <c>0</c>.</p>
          </statement>
          <program xml:id="funct_conditional_writecode4q_editor" interactive="activecode" language="python">
            <input>
def lunch_break(class_standing):
    # write code here

====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(lunch_break('Freshman'),40,"lunch_break('Freshman')")
        self.assertEqual(lunch_break('Sophomore'),30,"lunch_break('Sophomore')")
        self.assertEqual(lunch_break('Junior'),20,"lunch_break('Junior')")
        self.assertEqual(lunch_break('Senior'),15,"lunch_break('Senior')")
        self.assertEqual(lunch_break('Alumni'),0,"lunch_break('Alumni')")

myTests().main()
        </input>
          </program>
        </exercise>

        <exercise>
          <statement>
            <p>Write a function called <c>pay_rent</c> that takes in one parameter,
                            <c>units</c>. If <c>units</c> is less than 200, return <c>"$100"</c>.
                            If <c>units</c> is less than 500 and greater than or equal to 200, return <c>"$200"</c>. Otherwise, return <c>"$300"</c>.
                            For example, <c>pay_rent(175)</c> should return <c>"$100"</c>.</p>
          </statement>
          <program interactive="activecode" language="python" xml:id="funct_conditional_writecode5q_editor">
            <input>
def pay_rent(units):
    # write code here

====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(pay_rent(175), "$100","pay_rent(175)")
        self.assertEqual(pay_rent(199), "$100","pay_rent(199)")
        self.assertEqual(pay_rent(200), "$200","pay_rent(200)")
        self.assertEqual(pay_rent(201), "$200","pay_rent(201)")
        self.assertEqual(pay_rent(373), "$200","pay_rent(373)")
        self.assertEqual(pay_rent(499), "$200","pay_rent(499)")
        self.assertEqual(pay_rent(500), "$300","pay_rent(500)")
        self.assertEqual(pay_rent(501), "$300","pay_rent(501)")
        self.assertEqual(pay_rent(1007), "$300","pay_rent(1007)")

myTests().main()
        </input>
          </program>
          <solution>


    
                        Write a function called pay_rent that takes in one parameter,
                            units. If units is less than 200, return "$100".
                            If units is less than 500 and greater than or equal to 200, return "$200". Otherwise, return "$300".
                            For example, pay_rent(175) should return "$100".

    
    <program xml:id="funct_conditional_writecode5a_editor" language="python"><input>
def pay_rent(units):
    if units &lt; 200:
        return "$100"
    elif units &lt; 500:
        return "$200"
    else:
        return "$300"
        </input></program>
                    </solution>
        </exercise>

        <exercise label="funct_conditional_writecode6q">
          <statement>
            <p>Write a function called <c>play_weather</c> that takes the string <c>weather</c> as a parameter and
                    returns if one should play or not. If the <c>weather</c> is &#x2018;sunny' or &#x2018;cloudy', then the function
                    should return <c>"The person should play"</c>. If the <c>weather</c> is &#x2018;rainy', &#x2018;windy' or &#x2018;snowy',
                    then the function should return <c>"The person should not play"</c>. If the <c>weather</c> is none of these, the
                    function should return <c>"It is not safe to go outside"</c>. For example, <c>play_weather('sunny')</c> should return <c>"The person should play"</c>.</p>
          </statement>
          <program xml:id="funct_conditional_writecode6q_editor" interactive="activecode" language="python">
            <input>
def play_weather(weather):
    # write code here

====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(play_weather('sunny'), "The person should play", "play_weather('sunny')")
        self.assertEqual(play_weather('cloudy'), "The person should play", "play_weather('cloudy')")
        self.assertEqual(play_weather('rainy'), "The person should not play", "play_weather('rainy')")
        self.assertEqual(play_weather('windy'), "The person should not play", "play_weather('windy')")
        self.assertEqual(play_weather('snowy'), "The person should not play", "play_weather('snowy')")
        self.assertEqual(play_weather('stormy'), "It is not safe to go outside", "play_weather('stormy')")

myTests().main()
        </input>
          </program>
        </exercise>
</section>
