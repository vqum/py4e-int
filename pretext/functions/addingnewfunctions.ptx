<?xml version="1.0"?>
<section xml:id="functions_adding-new-functions">
  <title>Adding new functions</title>
    <idx>Function</idx>
    <idx><h>Function</h><h>Definition</h></idx>
    <idx><h>Definition</h><h>Function</h></idx>
    <idx><h>Def</h><h>Keyword</h></idx>
    <idx><h>Keyword</h><h>Def</h></idx>
    <idx>Argument</idx>
    <idx><h>Parentheses</h><h>Empty</h></idx>
    <idx><h>Empty</h><h>Parentheses</h></idx>
    <idx>Header</idx>
    <idx>Body</idx>
    <idx>Indentation</idx>
    <idx>Colon</idx>
    <idx>Ellipses</idx>
    <idx><h>Function</h><h>Object</h></idx>
    <idx><h>Object</h><h>Function</h></idx>
  <p>So far, we have only been using the functions that come with Python, but
            it is also possible to add new functions. A <em>function definition</em> specifies
            the name of a new function and the sequence of statements that execute when
            the function is called. Once we define a function, we can reuse the function
            over and over throughout our program.</p>
  <p>Here is an example:</p>
  <program language="python">
    <input>
def print_lyrics():
    print("I'm a lumberjack, and I'm okay.")
    print('I sleep all night and I work all day.')
</input>
  </program>
  <p><c>def</c> is a keyword that indicates that this is a function
            definition. The name of the function is <c>print_lyrics</c>. The rules for
            function names are the same as for variable names: letters, numbers and
            some punctuation marks are legal, but the first character can't be a
            number. You can't use a keyword as the name of a function, and you
            should avoid having a variable and a function with the same name.</p>
  <p>The empty parentheses after the name indicate that this function doesn't
            take any arguments. Later we will build functions that take arguments as
            their inputs.</p>
  <exercise label="functAdd_MC_empty">
    <statement>
      <p>Q-1: What does it means when there are empty parentheses after a function name?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>It lets you know whether a function is self-defined or included in a Python module.</p>
        </statement>
        <feedback>
          <p>Incorrect! You can find all built-in functions with a quick search. Try again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>It means that the function does not return anything.</p>
        </statement>
        <feedback>
          <p>Incorrect! Return statements indicate what a function returns. Try again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>It lets you know that nothing will print.</p>
        </statement>
        <feedback>
          <p>Incorrect! A print statement indicates if a function prints something. Try again.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>It indicates that a function doesn't take any arguments.</p>
        </statement>
        <feedback>
          <p>Correct! Empty parentheses indicate that the function doesn't take any arguments.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <p>The first line of the function definition is called the <em>header</em>; the rest
            is called the <em>body</em>. The header has to end with a colon and the body has
            to be indented. By convention, the indentation is always four spaces. The
            body can contain any number of statements.</p>
  <exercise label="functAdd_MC_firstLine">
    <statement>
      <p>Q-2: What is the first line of a function definition called? What is every line after the first line called?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>body; header</p>
        </statement>
        <feedback>
          <p>Incorrect! The order is off. Where does a header typically go? Try again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>title; body</p>
        </statement>
        <feedback>
          <p>Incorrect! Body is correct, but title is not. Try again.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>header; body</p>
        </statement>
        <feedback>
          <p>Correct! The header is the first line of a function definition and the rest is the body.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>initialization; body</p>
        </statement>
        <feedback>
          <p>Incorrect! We initialize variables, but functions are defined. Try again.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <p>If you type a function definition in interactive mode, the interpreter
            prints ellipses (&#x2026;) to let you know that the definition isn't
            complete:</p>
  <program language="python">
    <input>
&gt;&gt;&gt; def print_lyrics():
...     print("I'm a lumberjack, and I'm okay.")
...     print('I sleep all night and I work all day.')
...
</input>
  </program>
  <p>To end the function, you have to enter an empty line (this is not
            necessary in a script).</p>
  <p>Defining a function creates a variable with the same name.</p>
  <program xml:id="functAdd_lyrics" interactive="activecode" language="python">
    <input>
def print_lyrics():
    print("I'm a lumberjack, and I'm okay.")
    print('I sleep all night and I work all day.')

print(print_lyrics)
print(type(print_lyrics))
        </input>
  </program>
  <p>The value of <c>print_lyrics</c> is a <em>function object</em>, which
            has type <q>function</q>.</p>
  <exercise label="functAdd_MC_weather">
    <statement>
      <p>Q-4: Consider the code below. Which statement is true?</p>
      <program language="python">
        <input>
def printWeather():
    print("It is sunny!")
</input>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>The value of printWeather is a function object, which has type "function".</p>
        </statement>
        <feedback>
          <p>Correct! The value of printWeather is a function object, meaning it has the type "function".</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>The value of printWeather is a definition object, which has type "def".</p>
        </statement>
        <feedback>
          <p>Incorrect! The codeblock shows a function definition, but that is not the object/type of printWeather. Try again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>The value of printWeather is a def object, which has type "def".</p>
        </statement>
        <feedback>
          <p>Incorrect! Function definitions use the ``def`` keyword, but that is not the object/type of printWeather. Try again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>The value of printWeather is a function object, which has type "funct".</p>
        </statement>
        <feedback>
          <p>Incorrect! The value of printWeather is a function object, but its type is not "funct". Try again.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <p>The syntax for calling the new function is the same as for built-in
            functions:</p>
  <program xml:id="functAdd_call" interactive="activecode" language="python">
    <input>
def print_lyrics():
    print("I'm a lumberjack, and I'm okay.")
    print('I sleep all night and I work all day.')

print_lyrics()
        </input>
  </program>
  <p>Once you have defined a function, you can use it inside another
            function. For example, to repeat the previous refrain, we could write a
            function called <c>repeat_lyrics</c> and then call that function:</p>
  <program xml:id="functAdd_repeat" interactive="activecode" language="python">
    <input>
def print_lyrics():
    print("I'm a lumberjack, and I'm okay.")
    print('I sleep all night and I work all day.')

def repeat_lyrics():
    print_lyrics()
    print_lyrics()

repeat_lyrics()
        </input>
  </program>
  <p>But that's not really how the song goes.</p>
  <exercise label="functAdd_PP_menu" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Construct a block of code that correctly creates a function called <q>printMenu</q>
            that prints the menu and prices, then call the function. Watch your indentation!</p>
    </statement>
    <blocks>
      <block order="7">
        <choice correct="yes">
          <cline>def printMenu():</cline>
        </choice>
        <choice>
          <cline>def printMenu() </cline>
        </choice>
      </block>
      <block order="2">
        <cline>definition printMenu(): </cline>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>    print("Pizza, $5")</cline>
          <cline>    print("Hamburger, $6")</cline>
          <cline>    print("Soda, $1")</cline>
        </choice>
        <choice>
          <cline>    print(Pizza, $5) </cline>
          <cline>    print(Hamburger, $6)</cline>
          <cline>    print(Soda, $1)</cline>
        </choice>
      </block>
      <block order="6">
        <choice correct="yes">
          <cline>printMenu()</cline>
        </choice>
        <choice>
          <cline>printMenu(): </cline>
        </choice>
      </block>
    </blocks>
  </exercise>
  <exercise label="functAdd_PP_price" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>The following code should define the function printPrice, that prints items and their prices,
            and define a second function printReceipt, that uses  printPrice to print a receipt. Then,
            the code should call printReceipt. Watch your indentation!</p>
    </statement>
    <blocks>
      <block order="7">
        <choice correct="yes">
          <cline>def printPrice():</cline>
        </choice>
        <choice>
          <cline>def printPrice() </cline>
        </choice>
      </block>
      <block order="9">
        <cline>definition printPrice(): </cline>
      </block>
      <block order="10">
        <choice correct="yes">
          <cline>    print("Pencils, $1")</cline>
          <cline>    print("Pens, $2")</cline>
          <cline>    print("Notebook, $1")</cline>
        </choice>
        <choice>
          <cline>    print(Pencils, $1) </cline>
          <cline>    print(Pens, $2)</cline>
          <cline>    print(Notebook, $1)</cline>
        </choice>
      </block>
      <block order="1">
        <cline>def printReceipt():</cline>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline>    print("Here is your receipt: ")</cline>
          <cline>    printPrice()</cline>
          <cline>    print("Thanks for shopping!")</cline>
        </choice>
        <choice>
          <cline>    print(Here is your receipt: ) </cline>
          <cline>    printPrice():</cline>
          <cline>    print(Thanks for shopping!)</cline>
        </choice>
      </block>
      <block order="6">
        <choice correct="yes">
          <cline>printReceipt()</cline>
        </choice>
        <choice>
          <cline>printReceipt(): </cline>
        </choice>
      </block>
    </blocks>
  </exercise>
</section>
