<?xml version="1.0"?>
<section xml:id="functions_functions-with-loops-multiple-choice-questions">
  <title>Functions with Loops Multiple Choice Questions</title>
  <exercise label="functions_with_loops_mc1">
    <statement>
      <p>Q-1: Given the code below, what would the function print?</p>
      <program language="python">
        <input>
def countodd(lst):
   num_of_odd = 0
      for item in lst:
         if item % 2 == 1:
            num_of_odd += 1

   return num_of_odd

print(countodd([1,2,3,4,5]))
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>1</p>
        </statement>
        <feedback>
          <p>Try again! This function uses modulus to find the amount of odd numbers in the list that is passed in.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>2</p>
        </statement>
        <feedback>
          <p>Try again! This function uses modulus to find the amount of odd numbers in the list that is passed in.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>3</p>
        </statement>
        <feedback>
          <p>Correct!</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>4</p>
        </statement>
        <feedback>
          <p>Try again! This function uses modulus to find the amount of odd numbers in the list that is passed in.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>5</p>
        </statement>
        <feedback>
          <p>Try again! This function uses modulus to find the amount of odd numbers in the list that is passed in.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="functions_with_loops_mc2">
    <statement>
      <p>Q-2: After how many iterations will this code execute the <c>break</c>?</p>
      <program language="python">
        <input>
def divide_by_two_until_one(num):
   count = 0
   while (True):
      num = num/2
      count = count + 1
      if (num &lt;= 1):
         break
   return count

print(divide_by_two_until_one(50))
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>50</p>
        </statement>
        <feedback>
          <p>Try again! This function will divide the number that is passed in by two until it reaches one.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>25</p>
        </statement>
        <feedback>
          <p>Try again! This function will divide the number that is passed in by two until it reaches one.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>5</p>
        </statement>
        <feedback>
          <p>Try again! This function will divide the number that is passed in by two until it reaches one.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>6</p>
        </statement>
        <feedback>
          <p>Correct!</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>2</p>
        </statement>
        <feedback>
          <p>Try again! This function will divide the number that is passed in by two until it reaches one.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="functions_with_loops_mc3">
    <statement>
      <p>Q-3: Which of the following values for <c>x</c>, <c>y</c>, and <c>z</c> would result in the function returning <q>True</q>?</p>
      <program language="python">
        <input>
def addition(x,y,z):
   if (x + y) == z:
      return "True"
   else:
      return "False"
</input>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>x = 5, y = 6, z = 11</p>
        </statement>
        <feedback>
          <p>Correct!</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>x = 1, y = 5, z = 6</p>
        </statement>
        <feedback>
          <p>Correct!</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>x = 1, y = 3, z = 10</p>
        </statement>
        <feedback>
          <p>Try again! The value of z should be 4 in order to return "True".</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>x = -2, y = 1, z = -1</p>
        </statement>
        <feedback>
          <p>Correct!</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>x = 50, y = 41, z = 94</p>
        </statement>
        <feedback>
          <p>Try again! The value of z should be 91 in order to return "True".</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="functions_with_loops_mc4">
    <statement>
      <p>Q-4: How many times would <c>"Hello world!"</c> print?</p>
      <program language="python">
        <input>
for i in range(4):
   print("Hello world!")
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>3</p>
        </statement>
        <feedback>
          <p>Try again! The in range function has an inclusive end value.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>4</p>
        </statement>
        <feedback>
          <p>Correct!</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>0</p>
        </statement>
        <feedback>
          <p>Try again! The in range function has an inclusive end value.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>5</p>
        </statement>
        <feedback>
          <p>Try again! The in range function has an inclusive end value.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="functions_with_loops_mc5">
    <statement>
      <p>Q-5: How many times does the following code print and in what pattern?</p>
      <program language="python">
        <input>
lst1 = [1, 3, 5, 7]
lst2 = [2, 4, 6, 8, 10]

for x in lst1:
   for y in lst2:
      print(x * y)
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>It prints 19 times and it skip counts by the current value in lst2.</p>
        </statement>
        <feedback>
          <p>Try again! For loops include the last element.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>It prints 20 times and it skip counts by the current value in lst1.</p>
        </statement>
        <feedback>
          <p>Try again! This code counts by the second list.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>It prints 19 times and it skip counts by the current value in lst1.</p>
        </statement>
        <feedback>
          <p>Try again! For loops include the last element and count by the second list.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>It prints 20 times and it skip counts by the current value in lst2.</p>
        </statement>
        <feedback>
          <p>Correct!</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="functions_with_loops_mc6">
    <statement>
      <p>Q-6: What does the following code print?</p>
      <program language="python">
        <input>
out = ""
for i in range(2):
    for j in range(2):
        out += "i: " + str(i) + " j:" + str(j) + ", "
print(out)
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>i: 0 j: 0, i: 1 j: 1,</p>
        </statement>
        <feedback>
          <p>The inner loop will loop twice for each value of i.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>i: 0 j: 0, i: 1 j: 1, i: 2 j: 2,</p>
        </statement>
        <feedback>
          <p>The values of i and j will range from 0 to 1.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>i: 1 j: 1, i: 1 j: 2, i: 2: j: 1, i:2: j:2,</p>
        </statement>
        <feedback>
          <p>The values of i and j will range from 0 to 1.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>i: 0 j: 0, i: 0 j: 1, i: 1: j: 0, i:1: j:1,</p>
        </statement>
        <feedback>
          <p>Correct! The values of i and j range from 0 to 1 and the inner loop executes twice each time i changes.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="functions_with_loops_mc7">
    <statement>
      <p>Q-7: What does the following code print?</p>
      <program language="python">
        <input>
l1 = [1, 2]
l2 = [3, 4]
out = []
for val1 in l1:
    for val2 in l2:
        out.append(val1 + val2)
print(out)
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>[4, 6]</p>
        </statement>
        <feedback>
          <p>This would be true if there was a single loop using an index to loop though both lists</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>[4, 5, 5, 6]</p>
        </statement>
        <feedback>
          <p>It adds l1[0] and l2[0], then l1[0] and l2[1], then l1[1] and l2[0], then l1[1] and l2[1].</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>[1, 2, 3, 4]</p>
        </statement>
        <feedback>
          <p>This would be true if the two loops were one after the other instead of nested and it just added the value in each list</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>[13, 14, 23, 24]</p>
        </statement>
        <feedback>
          <p>The + adds the numbers together, it does not concatenate them.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="functions_with_loops_mc8">
    <statement>
      <p>Q-8: What does the following code print?</p>
      <program language="python">
        <input>
l1 = [1, 2, 3]
l2 = [4, 5]
out = []
for val1 in l1:
    for val2 in l2:
        out.append(val1 + val2)
print(out)
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>[5, 7]</p>
        </statement>
        <feedback>
          <p>This would be true if there was a single loop using an index to loop though both lists but only to the length of the smallest.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>[5, 6, 7, 6, 7, 8]</p>
        </statement>
        <feedback>
          <p>This would be true if it looped through l2 and then l1 in the inner loop.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>[5, 6, 6, 7, 7, 8]</p>
        </statement>
        <feedback>
          <p>For every value in l1 it loops through all the values in l2.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>[14, 15, 24, 25, 34, 35]</p>
        </statement>
        <feedback>
          <p>The + adds the numbers together, it does not concatenate them.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="functions_with_loops_mc9">
    <statement>
      <p>Q-9: What does the following code print?</p>
      <program language="python">
        <input>
l1 = [1, 2, 3]
l2 = [4, 5]
out = []
for val1 in l2:
    for val2 in l1:
        out.append(val1 + val2)
print(out)
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>[5, 7]</p>
        </statement>
        <feedback>
          <p>This would be true if there was a single loop using an index to loop though both lists but only to the length of the smallest.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>[5, 6, 7, 6, 7, 8]</p>
        </statement>
        <feedback>
          <p>For every value in l2 it loops through all the values in l1.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>[5, 6, 6, 7, 7, 8]</p>
        </statement>
        <feedback>
          <p>This would be true if looped through l1 and then l2 in the inner loop.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>[41, 42, 43, 51, 52, 53]</p>
        </statement>
        <feedback>
          <p>The + adds the numbers together, it does not concatenate them.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="functions_with_loops_mc10">
    <statement>
      <p>Q-10: What does the following code print?</p>
      <program language="python">
        <input>
l1 = ['1', '2', '3']
l2 = ['4', '5']
out = []
for val1 in l1:
    for val2 in l2:
        out.append(val1 + val2)
print(out)
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>[5, 7]</p>
        </statement>
        <feedback>
          <p>This would be true if there was a single loop using an index to loop though both lists but only to the length of the smallest and the items were numbers.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>[5, 6, 7, 6, 7, 8]</p>
        </statement>
        <feedback>
          <p>This would be true if it looped through l2 and then l1 in the inner loop and the list items were numbers.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>[5, 6, 6, 7, 7, 8]</p>
        </statement>
        <feedback>
          <p>This would be true if it looped through l1 and then l2 in the inner loop and the list items were numbers.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>['14', '15', '24', '25', '34', 35']</p>
        </statement>
        <feedback>
          <p>Since the list items are strings the + will concatenate the values.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>
