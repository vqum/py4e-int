<?xml version="1.0"?>
<section xml:id="functions_random-numbers">
  <title>Random numbers</title>
<idx><h>Random</h><h>Number</h></idx>
<idx><h>Number</h><h>Random</h></idx>
<idx>Deterministic</idx>
<idx>Pseudorandom</idx>
<idx><h>Random</h><h>Module</h></idx>
<idx><h>Module</h><h>Random</h></idx>
<idx><h>Random</h><h>Function</h></idx>
<idx><h>Function</h><h>Random</h></idx>
<idx><h>Randint</h><h>Function</h></idx>
<idx><h>Function</h><h>Randint</h></idx>
<idx><h>Choice</h><h>Function</h></idx>
<idx><h>Function</h><h>Choice</h></idx>
  <p>If you give most computer programs the same input multiple times,
            they will always produce exactly the same output. Programs like this
            are said to be <em>deterministic</em>. Determinism is usually a good thing,
            since we expect the same calculation to yield the same result. For some
            applications, though, we want the computer to be unpredictable. Games
            are an obvious example, but there are more.</p>
  <p>Making a program truly nondeterministic turns out to be no easy task, but
            there are ways to make programs at least seem nondeterministic. One way is
            to use <em>algorithms</em> that generate <em>pseudorandom</em> numbers. Pseudorandom
            numbers are not truly random because they are generated by a deterministic
            computation, but just by looking at the numbers it is all but impossible to
            distinguish them from a truly random set.</p>
  <p>The <c>random</c> module provides functions that generate
            pseudorandom numbers (which I will simply call <q>random</q> from here on).</p>
  <p>The function <c>random</c> returns a random float between 0.0 and
            1.0 (including 0.0 but not 1.0). Each time you call <c>random</c>,
            you get the next number in a long series. To see a sample, run this
            loop:</p>
  <program xml:id="functRandom_float" interactive="activecode" language="python">
    <input>
import random

for i in range(10):
    x = random.random()
    print(x)
        </input>
  </program>
  <p>This program produces the following list of 10 random numbers between
            0.0 and up to but not including 1.0. Notice how the numbers you ran above
            are different than the ones below, which were generated earlier.</p>
  <pre>0.11132867921152356
0.5950949227890241
0.04820265884996877
0.841003109276478
0.997914947094958
0.04842330803368111
0.7416295948208405
0.510535245390327
0.27447040171978143
0.028511805472785867</pre>
  <p>
    <term>Run the program more than once and see what numbers you get.</term>
  </p>
  <p>The <c>random</c> function is only one of many functions that
            handle random numbers. The function <c>randint</c> takes the
            parameters <c>low</c> and <c>high</c>, and returns an
            integer between <c>low</c> and <c>high</c> (including both).</p>
  <program xml:id="functRandom_randint" interactive="activecode" language="python">
    <input>
import random

print(random.randint(5, 10))
print(random.randint(5, 10))
        </input>
  </program>
  <p>To choose an element from a sequence at random, you can use
            <c>choice</c>:</p>
  <program xml:id="functRandom_choice" interactive="activecode" language="python">
    <input>
import random

t = [1, 2, 3]
print(random.choice(t))
print(random.choice(t))
        </input>
  </program>
  <p>The <c>random</c> module also provides functions to generate
            random values from continuous distributions including Gaussian,
            exponential, gamma, and a few more.</p>
  <exercise label="functRandom_fill1">
    <statement>
      <p>Q-4: The ________ module provides functions that generate pseudorandom numbers <var/>  </p>
    </statement>
    <setup>
      <var>
        <condition string="[Rr]andom">
          <feedback>
            <p>Correct! Some functions include <c>random</c>, <c>randint</c>, <c>choice</c>, and more.</p>
          </feedback>
        </condition>
        <condition string=".*">
          <feedback>
            <p>Incorrect! What is the word that comes before the period in these function calls? Try again.</p>
          </feedback>
        </condition>
      </var>
    </setup>
  </exercise>
  <exercise label="functRandom_pp_100" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Construct a block of code that correctly generates a random integer between 1 and 100
            (inclusive), then prints it out. Hint: there are two code blocks that are not used.</p>
    </statement>
    <blocks>
      <block order="4">
        <cline>import random</cline>
      </block>
      <block order="3">
        <cline>choice = random.randint(1, 100)</cline>
      </block>
      <block order="5" correct="no">
        <cline>choice = random.random(1, 100) </cline>
      </block>
      <block order="2" correct="no">
        <cline>choice = random.choice(1, 100) </cline>
      </block>
      <block order="1">
        <cline>print(choice)</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="functRandom_pp_nums" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Construct a block of code that correctly generates a random number from the list
            called <q>nums</q>, then prints it out. Hint: there are four code blocks that are not used.</p>
    </statement>
    <blocks>
      <block order="6">
        <cline>import random</cline>
      </block>
      <block order="7">
        <choice correct="yes">
          <cline>nums = [1, 2, 4, 5, 6, 76, 12]</cline>
        </choice>
        <choice>
          <cline>nums = (1, 2, 4, 5, 6, 76, 12) </cline>
        </choice>
      </block>
      <block order="4">
        <cline>choice = random.choice(nums)</cline>
      </block>
      <block order="5" correct="no">
        <cline>choice = random.choice("nums") </cline>
      </block>
      <block order="3" correct="no">
        <cline>choice = random.random(nums) </cline>
      </block>
      <block order="8" correct="no">
        <cline>choice = random.randint("nums") </cline>
      </block>
      <block order="1">
        <cline>print(choice)</cline>
      </block>
    </blocks>
  </exercise>
</section>
