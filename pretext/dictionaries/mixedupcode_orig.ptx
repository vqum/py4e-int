<?xml version="1.0"?>
<section xml:id="dictionaries_mixed-up-code-questions">
  <title>Mixed-Up Code Questions</title>
  <exercise label="dictionaries_mixedupcode_question10_1" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function <c>letter_dict</c> that takes in <c>string</c> as a parameter and returns a dictionary containing the amount of times letters appear in the given <c>string</c>.
            For example, <c>letter_dict('It is')</c> should return <c>{'i': 2, 't': 1, 's': 1}</c>. (Note: Pretend the <c>string</c> doesn't have any punctuation besides spaces.)</p>
    </statement>
    <blocks>
      <block order="12">
        <cline>def letter_dict(string):</cline>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>    d = dict()</cline>
        </choice>
        <choice>
          <cline>    d = dictionary() </cline>
        </choice>
      </block>
      <block order="10">
        <cline>    for char in string:</cline>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>        if char == ' ':</cline>
        </choice>
        <choice>
          <cline>        if char = ' ': </cline>
        </choice>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>            continue</cline>
        </choice>
        <choice>
          <cline>            break </cline>
        </choice>
      </block>
      <block order="14">
        <choice correct="yes">
          <cline>        if char.lower() not in d:</cline>
        </choice>
        <choice>
          <cline>        if char in d: </cline>
        </choice>
      </block>
      <block order="8">
        <cline>            d[char.lower()] = 1</cline>
      </block>
      <block order="13">
        <cline>        else:</cline>
      </block>
      <block order="11">
        <cline>            d[char.lower()] += 1</cline>
      </block>
      <block order="9">
        <cline>    return d</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="dictionaries_mixedupcode_question10_1_ac">
    <statement>
      <p>Write a function <c>letter_dict</c> that takes in <c>string</c> as a parameter and returns a dictionary containing the amount of times letters appear in the given <c>string</c>.
            For example, <c>letter_dict('It is')</c> should return <c>{'i': 2, 't': 1, 's': 1}</c>. (Note: Pretend the <c>string</c> doesn't have any punctuation besides spaces.)</p>
    </statement>
    <program xml:id="dictionaries_mixedupcode_question10_1_ac_editor" interactive="activecode" language="python">
      <input>


====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(letter_dict('It is'),{'i': 2, 't': 1, 's': 1},"letter_dict('It is')")
        self.assertEqual(letter_dict('It isSsSsS'),{'i': 2, 't': 1, 's': 6},"letter_dict('It isSsSsS')")
        self.assertEqual(letter_dict('HELLO'),{'h': 1, 'e': 1, 'l': 2, 'o': 1},"letter_dict('HELLO')")
        self.assertEqual(letter_dict('goodbye'),{'g': 1, 'o': 2, 'd': 1, 'b': 1, 'y': 1, 'e': 1},"letter_dict('goodbye')")
        self.assertEqual(letter_dict(' Nice to meet      YOU   '),{'n': 1, 'i': 1, 'c': 1, 'e': 3, 't': 2, 'o': 2, 'm': 1, 'y': 1, 'u': 1},"letter_dict(' Nice to meet      YOU   ')")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="dictionaries_mixedupcode_question10_2" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function <c>word_dict</c> that takes in <c>string</c> as a parameter and returns a dictionary containing the amount of times a word appears in the given <c>string</c>.
            For example, <c>word_dict('HELLO heLlo there  ')</c> should return <c>{'hello': 2, 'there': 1}</c>. (Note: Pretend the <c>string</c> doesn't have any punctuation besides spaces.)</p>
    </statement>
    <blocks>
      <block order="2">
        <cline>def word_dict(string):</cline>
      </block>
      <block order="3">
        <cline>    dictionary = {}</cline>
      </block>
      <block order="6">
        <choice correct="yes">
          <cline>    for word in string.split():</cline>
        </choice>
        <choice>
          <cline>    for word.lower() in string.split(): </cline>
        </choice>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>        dictionary[word.lower()] = dictionary.get(word.lower(), 0) + 1</cline>
        </choice>
        <choice>
          <cline>        dictionary[word.lower()] = dictionary.get(word.lower(), 0) </cline>
        </choice>
      </block>
      <block order="7">
        <cline>    return dictionary</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="dictionaries_mixedupcode_question10_2_ac">
    <statement>
      <p>Write a function <c>word_dict</c> that takes in <c>string</c> as a parameter and returns a dictionary containing the amount of times a word appears in the given <c>string</c>.
            For example, <c>word_dict('HELLO heLlo there  ')</c> should return <c>{'hello': 2, 'there': 1}</c>. (Note: Pretend the <c>string</c> doesn't have any punctuation besides spaces.)</p>
    </statement>
    <program xml:id="dictionaries_mixedupcode_question10_2_ac_editor" interactive="activecode" language="python">
      <input>


====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(word_dict('HELLO heLlo there  '),{'hello': 2, 'there': 1},"word_dict('HELLO heLlo there  ')")
        self.assertEqual(word_dict(' Hello HELLO he helLO hello HE'),{'hello': 4, 'he': 2},"word_dict(' Hello HELLO he helLO hello HE')")
        self.assertEqual(word_dict('There is a rainbow'),{'there': 1, 'is': 1, 'a': 1, 'rainbow': 1},"word_dict('There is a rainbow')")
        self.assertEqual(word_dict('That rainbow is more beautiful than any other rainbow I have seen before'),{'that': 1, 'rainbow': 2, 'is': 1, 'more': 1, 'beautiful': 1, 'than': 1, 'any': 1, 'other': 1, 'i': 1, 'have': 1, 'seen': 1, 'before': 1},"word_dict('That rainbow is more beautiful than any other rainbow I have seen before')")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="dictionaries_mixedupcode_question10_3" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function <c>a_counter</c> that takes in <c>string</c> as a parameter, creates a <c>dictionary</c>, and returns the amount of a's in the given <c>string</c> using the <c>dictionary</c>.
            For example, <c>a_counter('Alice and Apples')</c> should return <c>3</c>.</p>
    </statement>
    <blocks>
      <block order="6">
        <cline>def a_counter(string):</cline>
      </block>
      <block order="2">
        <cline>    dictionary = {}</cline>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline>    for char in string:</cline>
        </choice>
        <choice>
          <cline>    for char in string.split(): </cline>
        </choice>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>        dictionary[char.lower()] = dictionary.get(char.lower(), 0) + 1</cline>
        </choice>
        <choice>
          <cline>        dictionary[char.lower()] = dictionary.get(char.lower(), 0) </cline>
        </choice>
      </block>
      <block order="8">
        <choice correct="yes">
          <cline>    return dictionary.get('a', 0)</cline>
        </choice>
        <choice>
          <cline>    return dictionary['a'] </cline>
        </choice>
      </block>
    </blocks>
  </exercise>
  <exercise label="dictionaries_mixedupcode_question10_3_ac">
    <statement>
      <p>Write a function <c>a_counter</c> that takes in <c>string</c> as a parameter, creates a <c>dictionary</c>, and returns the amount of a's in the given <c>string</c> using the <c>dictionary</c>.
            For example, <c>a_counter('Alice and Apples')</c> should return <c>3</c>.</p>
    </statement>
    <program xml:id="dictionaries_mixedupcode_question10_3_ac_editor" interactive="activecode" language="python">
      <input>


====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(a_counter('Alice and Apples'),3,"a_counter('Alice and Apples')")
        self.assertEqual(a_counter('Australia is awesome!'),4,"a_counter('Australia is awesome!')")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="dictionaries_mixedupcode_question10_4" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function called <c>sales_tax</c> that takes in a <c>list_of_costs</c> (floating point values) as a parameter and
            returns a dictionary with the original costs as keys and the final costs after the sales tax of 6 percent as values.
            The final costs should be rounded to the hundredths place. For example, <c>sales_tax([1.25, 8, 5])</c> returns <c>{1.25: 1.33, 8: 8.48, 5: 5.3}</c>.</p>
    </statement>
    <blocks>
      <block order="2">
        <cline>def sales_tax(list_of_costs):</cline>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>    final_dictionary = {}</cline>
        </choice>
        <choice>
          <cline>    final_dictionary = [] </cline>
        </choice>
      </block>
      <block order="7">
        <cline>    for cost in list_of_costs:</cline>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline>        final_dictionary[cost] = round(cost * 1.06, 2)</cline>
        </choice>
        <choice>
          <cline>        final_dictionary[cost] = round(cost * 0.06, 2) </cline>
        </choice>
      </block>
      <block order="1">
        <cline>    return final_dictionary</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="dictionaries_mixedupcode_question10_4_ac">
    <statement>
      <p>Write a function called <c>sales_tax</c> that takes in a <c>list_of_costs</c> (floating point values) as a parameter and
            returns a dictionary with the original costs as keys and the final costs after the sales tax of 6 percent as values.
            The final costs should be rounded to the hundredths place. For example, <c>sales_tax([1.25, 8, 5])</c> returns <c>{1.25: 1.33, 8: 8.48, 5: 5.3}</c>.</p>
    </statement>
    <program xml:id="dictionaries_mixedupcode_question10_4_ac_editor" interactive="activecode" language="python">
      <input>


====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(sales_tax([1.25, 8, 5]),{1.25: 1.33, 8: 8.48, 5: 5.3},"sales_tax([1.25, 8, 5])")
        self.assertEqual(sales_tax([0]),{0: 0.0},"sales_tax([0])")
        self.assertEqual(sales_tax([5]),{5: 5.3},"sales_tax([5])")
        self.assertEqual(sales_tax([18.5, 100, 2000.0]),{18.5: 19.61, 100: 106.0, 2000.0: 2120.0},"sales_tax([18.5, 100, 2000.0])")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="dictionaries_mixedupcode_question10_5" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function called <c>discount_and_tax</c> that takes in a <c>list_of_costs</c> (floating point values) and a <c>discount</c> percentage as parameters and
            returns a dictionary with the original costs as keys and the final costs after applying the <c>discount</c> (first) and the sales tax of 6 percent (second) as values.
            The final costs should be rounded to the hundredths place. For example, <c>discount_and_tax([1.25, 8, 5], 20)</c> should return <c>{1.25: 1.06, 8: 6.78, 5: 4.24}</c>.</p>
    </statement>
    <blocks>
      <block order="4">
        <cline>def discount_and_tax(list_of_costs, discount):</cline>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline>    discount_multiplier = 1 - (discount / 100)</cline>
        </choice>
        <choice>
          <cline>    discount_multiplier = (discount / 100) </cline>
        </choice>
      </block>
      <block order="7">
        <cline>    dictionary = {}</cline>
      </block>
      <block order="3">
        <cline>    for cost in list_of_costs:</cline>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline>        dictionary[cost] = round(cost * discount_multiplier * 1.06, 2)</cline>
        </choice>
        <choice>
          <cline>        dictionary[cost] = round(cost * discount_multiplier * 0.06, 2) </cline>
        </choice>
      </block>
      <block order="6">
        <cline>    return dictionary</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="dictionaries_mixedupcode_question10_5_ac">
    <statement>
      <p>Write a function called <c>discount_and_tax</c> that takes in a <c>list_of_costs</c> (floating point values) and a <c>discount</c> percentage as parameters and
            returns a dictionary with the original costs as keys and the final costs after applying the <c>discount</c> (first) and the sales tax of 6 percent (second) as values.
            The final costs should be rounded to the hundredths place. For example, <c>discount_and_tax([1.25, 8, 5], 20)</c> should return <c>{1.25: 1.06, 8: 6.78, 5: 4.24}</c>.</p>
    </statement>
    <program xml:id="dictionaries_mixedupcode_question10_5_ac_editor" interactive="activecode" language="python">
      <input>


====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(discount_and_tax([1.25, 8, 5], 20),{1.25: 1.06, 8: 6.78, 5: 4.24},"discount_and_tax([1.25, 8, 5], 20)")
        self.assertEqual(discount_and_tax([0], 85),{0: 0.0},"discount_and_tax([0], 85)")
        self.assertEqual(discount_and_tax([5], 15),{5: 4.5},"discount_and_tax([5], 15)")
        self.assertEqual(discount_and_tax([18.5, 100, 2000.0], 1),{18.5: 19.41, 100: 104.94, 2000.0: 2098.8},"discount_and_tax([18.5, 100, 2000.0], 1)")
        self.assertEqual(discount_and_tax([18.5, 100, 2000.0], 99),{18.5: 0.2, 100: 1.06, 2000.0: 21.2},"discount_and_tax([18.5, 100, 2000.0], 99)")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="dictionaries_mixedupcode_question10_6" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function called <c>create_dictionary</c> that takes in <c>keys_list</c> and <c>values_list</c> as parameters
            and returns a dictionary with the <c>keys_list</c> as keys and the <c>values_list</c> as values. Assume <c>keys_list</c> and <c>values_list</c> are the same length, and
            they only contain numbers and strings. For example, <c>create_dictionary(['one', 'two', 'three'], [1, 2, 3])</c> should return <c>{'one': 1, 'two': 2, 'three': 3}</c>.</p>
    </statement>
    <blocks>
      <block order="7">
        <cline>def create_dictionary(keys_list, values_list):</cline>
      </block>
      <block order="2">
        <cline>    combination = {}</cline>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline>    for i in range(len(keys_list)):</cline>
        </choice>
        <choice>
          <cline>    for i in len(keys_list): </cline>
        </choice>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>        combination[keys_list[i]] = values_list[i]</cline>
        </choice>
        <choice>
          <cline>        combination[keys_list[i]] = combination[values_list[i]] </cline>
        </choice>
      </block>
      <block order="6">
        <cline>    return combination</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="dictionaries_mixedupcode_question10_6_ac">
    <statement>
      <p>Write a function called <c>create_dictionary</c> that takes in <c>keys_list</c> and <c>values_list</c> as parameters
            and returns a dictionary with the <c>keys_list</c> as keys and the <c>values_list</c> as values. Assume <c>keys_list</c> and <c>values_list</c> are the same length, and
            they only contain numbers and strings. For example, <c>create_dictionary(['one', 'two', 'three'], [1, 2, 3])</c> should return <c>{'one': 1, 'two': 2, 'three': 3}</c>.</p>
    </statement>
    <program xml:id="dictionaries_mixedupcode_question10_6_ac_editor" interactive="activecode" language="python">
      <input>


====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(create_dictionary(['one', 'two', 'three'], [1, 2, 3]),{'one': 1, 'two': 2, 'three': 3},"create_dictionary(['one', 'two', 'three'], [1, 2, 3])")
        self.assertEqual(create_dictionary(['one', 2.5, 'three', 4], [1, 'two and a half', 3, 'four']),{'one': 1, 2.5: 'two and a half', 'three': 3, 4: 'four'},"create_dictionary(['one', 2.5, 'three', 4], [1, 'two and a half', 3, 'four'])")
        self.assertEqual(create_dictionary(['me'], ['I']),{'me': 'I'},"create_dictionary(['me'], ['I'])")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="dictionaries_mixedupcode_question10_7" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function called <c>lowest_value_keys</c> that takes in <c>dictionary</c> as a parameter and returns a list of the keys containing the lowest value of all the keys in the dictionary.
            Assume all values of the <c>dictionary</c> are integers or floats. For example, <c>lowest_value_keys({'pizza': 11, 'fruits': 0, 'toys': 0, 'rice bags': 1.9, 'ice': 1.8})</c> should return <c>['fruits', 'toys']</c>.</p>
    </statement>
    <blocks>
      <block order="2">
        <cline>def lowest_value_keys(dictionary):</cline>
      </block>
      <block order="3">
        <cline>    keys_list = []</cline>
      </block>
      <block order="7">
        <choice correct="yes">
          <cline>    minimum = min(dictionary.values())</cline>
        </choice>
        <choice>
          <cline>    minimum = min(dictionary) </cline>
        </choice>
      </block>
      <block order="5">
        <cline>    minimum = minimum(dictionary) </cline>
      </block>
      <block order="8">
        <choice correct="yes">
          <cline>    for key, value in dictionary.items():</cline>
        </choice>
        <choice>
          <cline>    for value in dictionary.values(): </cline>
        </choice>
      </block>
      <block order="4">
        <cline>    for key in dictionary.keys(): </cline>
      </block>
      <block order="11">
        <cline>        if value == minimum:</cline>
      </block>
      <block order="6">
        <cline>            keys_list.append(key)</cline>
      </block>
      <block order="9">
        <cline>    return keys_list</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="dictionaries_mixedupcode_question10_7_ac">
    <statement>
      <p>Write a function called <c>lowest_value_keys</c> that takes in <c>dictionary</c> as a parameter and returns a list of the keys containing the lowest value of all the keys in the dictionary.
            Assume all values of the <c>dictionary</c> are integers or floats. For example, <c>lowest_value_keys({'pizza': 11, 'fruits': 0, 'toys': 0, 'rice bags': 1.9, 'ice': 1.8})</c> should return <c>['fruits', 'toys']</c>.</p>
    </statement>
    <program xml:id="dictionaries_mixedupcode_question10_7_ac_editor" interactive="activecode" language="python">
      <input>


====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(lowest_value_keys({'pizza': 5, 'fruits': 20, 'toys': 3, 'rice bags': 2}),['rice bags'],"lowest_value_keys({'pizza': 5, 'fruits': 20, 'toys': 3, 'rice bags': 2})")
        self.assertEqual(lowest_value_keys({'pizza': 5, 'fruits': 20, 'toys': 3, 'rice bags': 1.9, 'ice': 1.8}),['ice'],"lowest_value_keys({'pizza': 5, 'fruits': 20, 'toys': 3, 'rice bags': 1.9, 'ice': 1.8})")
        self.assertEqual(lowest_value_keys({'pizza': 0, 'fruits': 20, 'toys': 3, 'rice bags': 1.9, 'ice': 1.8}),['pizza'],"lowest_value_keys({'pizza': 0, 'fruits': 20, 'toys': 3, 'rice bags': 1.9, 'ice': 1.8})")
        self.assertEqual(lowest_value_keys({'pizza': 11, 'fruits': 0, 'toys': 0, 'rice bags': 1.9, 'ice': 1.8}),['fruits', 'toys'],"lowest_value_keys({'pizza': 11, 'fruits': 0, 'toys': 0, 'rice bags': 1.9, 'ice': 1.8})")
        self.assertEqual(lowest_value_keys({'pizza': 100}),['pizza'],"lowest_value_keys({'pizza': 100})")
        self.assertEqual(lowest_value_keys({'pizza': 100, 'pizza2': 100, 'pizza3': 100}),['pizza', 'pizza2', 'pizza3'],"lowest_value_keys({'pizza': 100, 'pizza2': 100, 'pizza3': 100})")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="dictionaries_mixedupcode_question10_8" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function called <c>duplicated_data</c> that takes in <c>dictionary1</c> and <c>dictionary2</c> as parameters and returns a dictionary with key-value pairs that are
            in both dictionaries. For example, <c>duplicated_data({'Ten': 10, 'Twenty' : 20, 'Thirty' : 30}, {'Ten': 10, 'Twenty' : 20})</c> should return <c>{'Ten': 10, 'Twenty': 20}</c>.</p>
    </statement>
    <blocks>
      <block order="2">
        <cline>def duplicated_data(dictionary1, dictionary2):</cline>
      </block>
      <block order="4">
        <cline>    dict = {}</cline>
      </block>
      <block order="8">
        <choice correct="yes">
          <cline>    for key, value in dictionary1.items():</cline>
        </choice>
        <choice>
          <cline>    for key, value in dictionary2: </cline>
        </choice>
      </block>
      <block order="6">
        <cline>    for key, value in dictionary2.items(): </cline>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>        if dictionary2.get(key) == value:</cline>
        </choice>
        <choice>
          <cline>        if dictionary2[key] == value: </cline>
        </choice>
      </block>
      <block order="1">
        <cline>            dict[key] = value</cline>
      </block>
      <block order="9">
        <cline>    return dict</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="dictionaries_mixedupcode_question10_8_ac">
    <statement>
      <p>Write a function called <c>duplicated_data</c> that takes in <c>dictionary1</c> and <c>dictionary2</c> as parameters and returns a dictionary with key-value pairs that are
            in both dictionaries. For example, <c>duplicated_data({'Ten': 10, 'Twenty' : 20, 'Thirty' : 30}, {'Ten': 10, 'Twenty' : 20})</c> should return <c>{'Ten': 10, 'Twenty': 20}</c>.</p>
    </statement>
    <program xml:id="dictionaries_mixedupcode_question10_8_ac_editor" interactive="activecode" language="python">
      <input>


====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(duplicated_data({'Ten': 10, 'Twenty' : 20, 'Thirty' : 30}, {'Ten': 10, 'Twenty' : 20, 'Thirty' : 30}),{'Ten': 10, 'Twenty': 20, 'Thirty': 30},"duplicated_data({'Ten': 10, 'Twenty' : 20, 'Thirty' : 30}, {'Ten': 10, 'Twenty' : 20, 'Thirty' : 30})")
        self.assertEqual(duplicated_data({'Ten': 10, 'Twenty' : 20, 'Thirty' : 30}, {'Ten': 10, 'Twenty' : 20}),{'Ten': 10, 'Twenty': 20},"duplicated_data({'Ten': 10, 'Twenty' : 20, 'Thirty' : 30}, {'Ten': 10, 'Twenty' : 20})")
        self.assertEqual(duplicated_data({'Ten': 10, 'Twenty' : 20, 'Thirty' : 30}, {'Five': 5, 'Six' : 6}),{},"duplicated_data({'Ten': 10, 'Twenty' : 20, 'Thirty' : 30}, {'Five': 5, 'Six' : 6})")
        self.assertEqual(duplicated_data({'Ten': 10, 'Twenty' : 20, 'Five' : 'Five'}, {'Five': 'Five', 'Six' : 'Six'}),{'Five': 'Five'},"duplicated_data({'Ten': 10, 'Twenty' : 20, 'Five' : 'Five'}, {'Five': 'Five', 'Six' : 'Six'})")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="dictionaries_mixedupcode_question10_9" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function called <c>total_price</c> that takes in <c>quantity_dict</c> and <c>price_dict</c> and returns the total cost of all items.
            Assume keys in both dictionaries are the same, and the values in <c>quantity_dict</c> are integers.
            For example, <c>total_price({'fries': 7, 'hot dogs': 9, 'soda': 9}, {'fries': 1.5, 'hot dogs': 1, 'soda': 1.1})</c> should return <c>29.4</c>.</p>
    </statement>
    <blocks>
      <block order="1">
        <cline>def total_price(quantity_dict, price_dict):</cline>
      </block>
      <block order="4">
        <cline>    total_price = 0</cline>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>    for key in quantity_dict.keys():</cline>
        </choice>
        <choice>
          <cline>    for value in quantity_dict.values(): </cline>
        </choice>
      </block>
      <block order="6">
        <choice correct="yes">
          <cline>        total_price += quantity_dict.get(key) * price_dict.get(key)</cline>
        </choice>
        <choice>
          <cline>        total_price += quantity_dict[key] + price_dict[key] </cline>
        </choice>
      </block>
      <block order="7">
        <cline>    return total_price</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="dictionaries_mixedupcode_question10_9_ac">
    <statement>
      <p>Write a function called <c>total_price</c> that takes in <c>quantity_dict</c> and <c>price_dict</c> and returns the total cost of all items.
            Assume keys in both dictionaries are the same, and the values in <c>quantity_dict</c> are integers.
            For example, <c>total_price({'fries': 7, 'hot dogs': 9, 'soda': 9}, {'fries': 1.5, 'hot dogs': 1, 'soda': 1.1})</c> should return <c>29.4</c>.</p>
    </statement>
    <program xml:id="dictionaries_mixedupcode_question10_9_ac_editor" interactive="activecode" language="python">
      <input>


====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertAlmostEqual(total_price({'fries': 7, 'hot dogs': 9, 'soda': 9}, {'fries': 1.5, 'hot dogs': 1, 'soda': 1.1}),29.4,1,"total_price({'fries': 7, 'hot dogs': 9, 'soda': 9}, {'fries': 1.5, 'hot dogs': 1, 'soda': 1.1})")
        self.assertAlmostEqual(total_price({'fries': 0, 'hot dogs': 48, 'soda': 3}, {'fries': 1.13, 'hot dogs': 3, 'soda': 3.97}),155.91,2,"total_price({'fries': 0, 'hot dogs': 48, 'soda': 3}, {'fries': 1.13, 'hot dogs': 3, 'soda': 3.97})")
        self.assertAlmostEqual(total_price({'pizza': 5}, {'pizza': 2.50}),12.5,1,"total_price({'pizza': 5}, {'pizza': 2.50})")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="dictionaries_mixedupcode_question10_10" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function called <c>scale_recipe</c> that takes in <c>quantity_dict</c> and <c>scale_factor</c> as parameters and
            returns a dictionary with <c>quantity_dict</c> scaled by the <c>scale_factor</c>.
            For example, <c>scale_recipe({'fries': 7, 'hot dogs': 9, 'soda': 8}, 4)</c> should return <c>{'fries': 28, 'hot dogs': 36, 'soda': 32}</c>.</p>
    </statement>
    <blocks>
      <block order="3">
        <cline>def scale_recipe(quantity_dict, scale_factor):</cline>
      </block>
      <block order="4">
        <cline>    for key in quantity_dict.keys():</cline>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>        quantity_dict[key] = quantity_dict.get(key) * scale_factor</cline>
        </choice>
        <choice>
          <cline>        quantity_dict[key] = quantity_dict.get(key) / scale_factor </cline>
        </choice>
      </block>
      <block order="5">
        <cline>    return quantity_dict</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="dictionaries_mixedupcode_question10_10_ac">
    <statement>
      <p>Create a function called <c>scale_recipe</c> that takes in <c>quantity_dict</c> and <c>scale_factor</c> as parameters and
            returns a dictionary with <c>quantity_dict</c> scaled by the <c>scale_factor</c>.
            For example, <c>scale_recipe({'fries': 7, 'hot dogs': 9, 'soda': 8}, 4)</c> should return <c>{'fries': 28, 'hot dogs': 36, 'soda': 32}</c>.</p>
    </statement>
    <program xml:id="dictionaries_mixedupcode_question10_10_ac_editor" interactive="activecode" language="python">
      <input>


====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(scale_recipe({'fries': 7, 'hot dogs': 9, 'soda': 8}, 4),{'fries': 28, 'hot dogs': 36, 'soda': 32},"scale_recipe({'fries': 7, 'hot dogs': 9, 'soda': 8}, 4)")
        self.assertEqual(scale_recipe({'fries': 7, 'hot dogs': 9, 'soda': 8}, 0.5),{'fries': 3.5, 'hot dogs': 4.5, 'soda': 4.0},"scale_recipe({'fries': 7, 'hot dogs': 9, 'soda': 8}, 0.5)")
        self.assertEqual(scale_recipe({'brownie mix': 1, 'oil': 1/3, 'egg': 1, 'water': 1/3}, 4),{'brownie mix': 4, 'oil': 1.3333333333333333, 'egg': 4, 'water': 1.3333333333333333},"scale_recipe({'brownie mix': 1, 'oil': 1/3, 'egg': 1, 'water': 1/3}, 4)")

myTests().main()
        </input>
    </program>
  </exercise>
</section>
