<?xml version="1.0"?>
<exercises xml:id="tuples_multiple-choice-questions">
  <title>Multiple Choice Questions</title>
  <exercise label="TupleExquestion10_1">
    <statement>
      <p>11-9-1: Which of the following would complete <c>val =</c> to set <c>val</c> to 20 by slicing <c>aTuple</c>.</p>
      <program language="python">
        <input>
aTuple = ("Orange", (10, 20, 30), (5, 15, 25))
val =
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>val = aTuple[1:2][1]</p>
        </statement>
        <feedback>
          <p>Incorrect! Running this code would result in an error. Try again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>val = aTuple[2][1]</p>
        </statement>
        <feedback>
          <p>Incorrect! This would access the value 15. Try again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>val = aTuple[1:2](1)</p>
        </statement>
        <feedback>
          <p>Incorrect! Running this code would result in an error. Try again.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>val = aTuple[1][1]</p>
        </statement>
        <feedback>
          <p>Correct! This first goes to the second item in the tuple, then grabs the second item from the list, which is 20.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="TupleExquestion10_2">
    <statement>
      <p>11-9-2: True or False? A python tuple can be created without using any parentheses.</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>True</p>
        </statement>
        <feedback>
          <p>Correct! You can create tuples using tuple packing which requires no parentheses.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>False</p>
        </statement>
        <feedback>
          <p>Incorrect! Parentheses are not always necessary. Try again.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="TupleExquestion10_3">
    <statement>
      <p>11-9-3: What type will be printed when the following code executes?</p>
      <program language="python">
        <input>
aTuple = ("Orange")
print type(aTuple)
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>list</p>
        </statement>
        <feedback>
          <p>Incorrect! A list would use []. Try again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>tuple</p>
        </statement>
        <feedback>
          <p>Incorrect! To create a tuple with a single item, there must be a comma after the first item. Try again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>array</p>
        </statement>
        <feedback>
          <p>Incorrect! Arrays do not exist in Python. Try again.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>str</p>
        </statement>
        <feedback>
          <p>Correct! To create a tuple with a single item, there must be a comma after the first item.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="TupleExquestion10_4">
    <statement>
      <p>11-9-4: What will the following code return?</p>
      <program language="python">
        <input>
def practice(tup):
    a, b, c = tup
    return a
aTuple = "Yellow", 20, "Red"
practice(aTuple)
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>("Yellow", 20, "Red")</p>
        </statement>
        <feedback>
          <p>Incorrect! Hint: think about how tuple assignment works. Try again.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Yellow</p>
        </statement>
        <feedback>
          <p>Correct! Tuple assignment makes the first value of the tuple equal to a.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>20</p>
        </statement>
        <feedback>
          <p>Incorrect! Hint: think about how tuple assignment works. Try again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Red</p>
        </statement>
        <feedback>
          <p>Incorrect! Hint: think about how tuple assignment works. Try again.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="TupleExquestion10_5">
    <statement>
      <p>11-9-5: What will the following code return?</p>
      <program language="python">
        <input>
def tuple_indexing(tup):
    tup[1] = 800
    return tup

aTuple = (100, 200, 300, 400, 500)
print(tuple_indexing(aTuple))
</input>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>Nothing, it will cause an error.</p>
        </statement>
        <feedback>
          <p>Correct! A tuple is immutable, therefore you cannot change its values.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>(100, 800, 200, 300, 400, 500)</p>
        </statement>
        <feedback>
          <p>Incorrect! Remember, tuples are immutable. Try again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>(800, 100, 200, 300, 400, 500)</p>
        </statement>
        <feedback>
          <p>Incorrect! Remember, tuples are immutable. Try again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>(100, 200, 800, 300, 400, 500)</p>
        </statement>
        <feedback>
          <p>Incorrect! Remember, tuples are immutable. Try again.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="TupleExquestion10_6">
    <statement>
      <p>11-9-6: Which of the following options will produce the same output?</p>
      <program language="python">
        <input>
    tupl1 = (5, 3, 1, 9, 0)
    # options i, ii, iii, or iv


i) print(tup1[:-1])
ii) print(tup1[0:5])
iii) print(tupl1[0:4])
iv) print(tupl1[-4:])
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>i, ii</p>
        </statement>
        <feedback>
          <p>Incorrect! ii will cause an error because the highest index in tupl1 is 4. Try again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>ii, iv</p>
        </statement>
        <feedback>
          <p>Incorrect! ii will cause an error because the highest index in tupl1 is 4. Try again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>i, iv</p>
        </statement>
        <feedback>
          <p>Incorrect! i will output all items besides the last, whereas iv will output all items besides the first. Try again.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>i, iii</p>
        </statement>
        <feedback>
          <p>Correct! These two options will both output all the items in the tuple except for the last one.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="TupleExquestion10_7">
    <statement>
      <p>11-9-7: What is returned when the following code is run?</p>
      <program language="python">
        <input>
def tuple_comparison(tup1, tup2):
    return tup1 &lt; tup2

tup1 = (66, 4, 17, 4)
tup2 = (66, 4, 16, 5)
tuple_comarison(tup1, tup2)
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>True</p>
        </statement>
        <feedback>
          <p>Incorrect! When the first numbers in both tuples are equal, the comparison operator will move on to the next pair of numbers. Try again.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>False</p>
        </statement>
        <feedback>
          <p>Correct! The compiler will look at the first pair of different numbers, then decide whether it is true or false depending on that pair.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="TupleExquestion10_8">
    <statement>
      <p>11-9-8: What is printed when the following code is run?</p>
      <program language="python">
        <input>
a = (1, 2, 3, 4)
print(a[1:-1])
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Error, tuple slicing doesn't exist</p>
        </statement>
        <feedback>
          <p>Incorrect! Tuple slicing does exist. Try again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>[2, 3, 4]</p>
        </statement>
        <feedback>
          <p>Incorrect! The output will be in the form of a tuple. Try again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>(2, 3, 4)</p>
        </statement>
        <feedback>
          <p>Incorrect! The value of -1 means to stop after the second to last item. Try again.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>(2, 3)</p>
        </statement>
        <feedback>
          <p>Correct! This tuple slicing grabs the second item all the way to the second to last item.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="TupleExquestion10_9">
    <statement>
      <p>11-9-9: What is the name of an error caused when a data structure has the wrong type, size, or composition?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>KeyError</p>
        </statement>
        <feedback>
          <p>Incorrect! A KeyError is raised when you try to access a dictionary with a key that doesn't yet exist. Try again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>TypeError</p>
        </statement>
        <feedback>
          <p>Incorrect! A TypeError is raised when you attempt to call a function or use an operator on something of the incorrect type. Try again.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Shape Error</p>
        </statement>
        <feedback>
          <p>Correct! Shape errors are more likely to occur when working with compound data structures.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="TupleExquestion10_10">
    <statement>
      <p>11-9-10: What is printed when the following code is run?</p>
      <program language="python">
        <input>
def practice(m):
    m = list(m)
    x, y = m
    return y

m = ('have', 'fun')
print(practice(m))
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>have</p>
        </statement>
        <feedback>
          <p>Incorrect! This would be printed if in line 3 we called print(x) instead. Try again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>['have', 'fun']</p>
        </statement>
        <feedback>
          <p>Incorrect! Hint: think about how tuple assignment works and apply that knowledge to lists. Try again.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>fun</p>
        </statement>
        <feedback>
          <p>Correct! y is associated with the last value of tuple m.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>('have', 'fun')</p>
        </statement>
        <feedback>
          <p>Incorrect! This is the original tuple, but the function returns the second element of the tuple.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="TupleExquestion10_11">
    <statement>
      <p>11-9-11: What is printed when the following code is run?</p>
      <program language="python">
        <input>
tup = ('30', '3', '2', '8')
print(sorted(tup))
</input>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>['2', '3', '30', '8']</p>
        </statement>
        <feedback>
          <p>This returns a list with the strings sorted in ascending order.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>['2', '3', '8', '30']</p>
        </statement>
        <feedback>
          <p>Incorrect, this would be the right order for numbers, but not for strings.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>['30', '8', '3', '2']</p>
        </statement>
        <feedback>
          <p>This would be correct if it was sorting numbers in descending order.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>['8', '30', '3', '2']</p>
        </statement>
        <feedback>
          <p>This would be correct if it was sorting in descending order.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="TupleExquestion10_12">
    <statement>
      <p>11-9-12: What is printed when the following code is run?</p>
      <program language="python">
        <input>
tup = ('30', '3', '2', '8')
print(sorted(tup), reverse = True)
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>['2', '3', '30', '8']</p>
        </statement>
        <feedback>
          <p>This would be true if it sorted the strings in ascending order.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>['2', '3', '8', '30']</p>
        </statement>
        <feedback>
          <p>This would be correct if if was sorting numbers in ascending order.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>['30', '8', '3', '2']</p>
        </statement>
        <feedback>
          <p>This would be correct if it was sorting numbers in descending order.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>['8', '30', '3', '2']</p>
        </statement>
        <feedback>
          <p>It sorts the strings in descending order.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="TupleExquestion10_13">
    <statement>
      <p>11-9-13: What is printed when the following code is run?</p>
      <program language="python">
        <input>
tup = (30, 3, 2, 8)
print(sorted(tup), reverse = True)
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>[2, 3, 30, 8]</p>
        </statement>
        <feedback>
          <p>This would be true if the values were strings and it sorted in ascending order.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>[2, 3, 8, 30]</p>
        </statement>
        <feedback>
          <p>This would be correct if the values were sorted in ascending order.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>[30, 8, 3, 2]</p>
        </statement>
        <feedback>
          <p>It sorts the numbers in descending order.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>[8, 30, 3, 2]</p>
        </statement>
        <feedback>
          <p>This would be correcdt if the values were strings.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</exercises>
