<?xml version="1.0"?>
<section xml:id="tuples_the-most-common-words">
  <title>The Most Common Words</title>
  <p>Coming back to our running example of the text from <em>Romeo and Juliet</em>
            Act 2, Scene 2, we can write a program using last section's technique to
            print the ten most common words in the text as follows:</p>
  <program xml:id="most_common_words_sort" interactive="activecode" language="python3">
    <input>
import string

# Count the words in the file
with open("romeo-full.txt", "r") as fhand:
    lines = fhand.readlines()
counts = {}
table = str.maketrans("", "", string.punctuation)
for line in lines:
    line = line.translate(table)
    for word in line.split():
        if word not in counts.keys():
            counts[word] = 1
        else:
            counts[word] += 1

# Sort the dictionary by value
sorted_counts = sorted(counts.items(), key = lambda t: t[1], reverse = True)

# print the top ten
for t in sorted_counts[:10]:
    print(t)
        </input>
  </program>
  <p>The first part of the program reads the file and creates/fills in the
            dictionary that maps each word to the amount of times it appears in the document.
            For this program, instead of simply printing out counts and
            ending the program, we construct a list of <c>(val, key)</c>
            tuples and then sort the list in reverse order.</p>
  <p>Since the value is first, it will be used for the comparisons. If there
            is more than one tuple with the same value, it will look at the second
            element (the key), so tuples whose values are equal will be further
            sorted in reverse alphabetical order of the key.</p>
  <p>At the end, we write a nice <c>for</c> loop which does a multiple
            assignment iteration and prints out the ten most common words by
            iterating through a slice of the list (<c>lst[:10]</c>).</p>
  <p>Now, the output finally looks like what we want for our word frequency
            analysis.</p>
  <pre>61 i
42 and
40 romeo
34 to
34 the
32 thou
32 juliet
30 that
29 my
24 thee</pre>
  <p>The fact that this complex data parsing and analysis can be done with an
            easy-to-understand Python program is one reason why Python is a
            good choice as a language for exploring information.</p>
  <exercise label="question10_6_1">
    <statement>
      <p>11-9-2: Which of the following correctly uses the slice operator to grab the first 5 items of a list &#x2018;lst'? Select all that apply.</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>lst[1:5]</p>
        </statement>
        <feedback>
          <p>Incorrect! Remember, list indices start at 0, not 1. Try again.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>lst[:5]</p>
        </statement>
        <feedback>
          <p>Correct! This line of code slices list lst from its first value to its fifth value.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>lst[0:4]</p>
        </statement>
        <feedback>
          <p>Incorrect! The slice operator stops at the index before the value after the colon. Try again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>lst[:4]</p>
        </statement>
        <feedback>
          <p>Incorrect! The slice operator stops at the index before the value after the colon. Try again.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question10_6_2">
    <statement>
      <p>11-9-3: How will the following code be sorted once this code is run?</p>
      <program language="python">
        <input>
weather = {'Reykjavik': 60, 'Buenos Aires': 55, 'Cairo': 96, 'Berlin': 89, 'Caloocan': 78}
sorted_weather = weather.sort()
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>First city name (alphabetically), then temperature (lowest to highest)</p>
        </statement>
        <feedback>
          <p>Incorrect! Remember, some methods can only be used on specific data types. Try again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>First temperature (highest to lowest), then city name(alphabetically)</p>
        </statement>
        <feedback>
          <p>Incorrect! Remember, some methods can only be used on specific data types. Try again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>First city name (alphabetically), then temperature (highest to lowest)</p>
        </statement>
        <feedback>
          <p>Incorrect! Remember, some methods can only be used on specific data types. Try again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>First temperature (lowest to highest), then city name (alphabetically)</p>
        </statement>
        <feedback>
          <p>Incorrect! Remember, some methods can only be used on specific data types. Try again.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>An error will occur</p>
        </statement>
        <feedback>
          <p>Correct! The sort() method cannot be used on dictionaries. Instead, add the data from the dictionary to a list first.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question10_6_3_v2" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Construct a block of code that uses tuples to keep track of the word count in the file &#x2018;heineken.txt'. Then, print out the 10 most frequently appearing words preceded by how many times they appear.</p>
    </statement>
    <blocks>
      <block order="5">
        <cline>counter = {}</cline>
        <cline>list_of_tuples = []</cline>
      </block>
      <block order="2">
        <cline>with open("heineken.txt", "r") as filename:</cline>
      </block>
      <block order="7">
        <cline>    lines = filename.readlines()</cline>
      </block>
      <block order="11">
        <cline>for line in lines:</cline>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>    for word in line.split():</cline>
        </choice>
        <choice>
          <cline>              for word in lines.split(): </cline>
        </choice>
      </block>
      <block order="1">
        <cline>                  counter[word] = counter.get(word, 0) + 1</cline>
      </block>
      <block order="9">
        <choice correct="yes">
          <cline>sorted_counts = sorted(counter.items(), key = lambda t: t[1], reverse = True)</cline>
        </choice>
        <choice>
          <cline>sorted_counts = sorted(counter.items(), key = lambda t: t[1]) </cline>
        </choice>
      </block>
      <block order="6">
        <cline>for t in sorted_counts[:10]:</cline>
      </block>
      <block order="4">
        <cline>    print(t)</cline>
      </block>
    </blocks>
  </exercise>
</section>
