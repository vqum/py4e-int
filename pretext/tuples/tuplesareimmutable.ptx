<?xml version="1.0"?>
<section xml:id="tuples_tuples-are-immutable">
  <title>Tuples are Immutable</title>
<idx>Tuple</idx>
<idx>Sequence</idx>
<idx>Immutable</idx>
<idx>Slice Operator</idx>
<idx>Item Assignment</idx>
  <p>A tuple is a sequence of values much like a list. The values stored
            in a tuple can be any type, and they are indexed by integers. The
            important difference is that tuples are <em>immutable</em>.
            Tuples are also <em>comparable</em> and
            <em>hashable</em> so we can sort lists of them and use tuples as
            key values in Python dictionaries.</p>
  <p>Fun fact: The word <q>tuple</q> comes from the names given to sequences
            of numbers of varying lengths: single, double, triple, quadruple,
            quintuple, sextuple, septuple, etc.</p>
  <p>Syntactically, a tuple is a comma-separated list of values:</p>
  <program language="python">
    <input>
t = 'a', 'b', 'c', 'd', 'e'
</input>
  </program>
  <p>Although it is not necessary, it is common to enclose tuples in
            parentheses to help us quickly identify tuples when we look at Python
            code:</p>
  <program language="python">
    <input>
t = ('a', 'b', 'c', 'd', 'e')
</input>
  </program>
  <p>To create a tuple with a single element, you have to include the final
            comma:</p>
  <program xml:id="tuplesareimmutable_exercise_1" interactive="activecode" language="python">
    <input>
t1 = ('a',)
print(type(t1))
        </input>
  </program>
  <p>Without the comma Python treats <c>('a')</c> as an expression with a string
            in parentheses that evaluates to a string:</p>
  <program xml:id="tuplesareimmutable_exercise_2" interactive="activecode" language="python">
    <input>
t2 = ('a')
print(type(t2))
        </input>
  </program>
  <p>If you want to create an empty tuple, you don't need to include a comma:</p>
  <program xml:id="tuplesareimmutable_exercise_3" interactive="activecode" language="python">
    <input>
t = ()
print(type(t))
        </input>
  </program>
  <p>Another way to construct a tuple is the built-in function
            <c>tuple</c>. With no argument, it creates an empty tuple:</p>
  <program xml:id="tuplesareimmutable_exercise_4" interactive="activecode" language="python">
    <input>
t = tuple()
print(t) #should print ()
        </input>
  </program>
  <exercise label="question10_1_1">
    <statement>
      <p>11-9-5: Which of these lines of code correctly creates a tuple? (select all answers)</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>t = ()</p>
        </statement>
        <feedback>
          <p>Correct! This is one way to create a tuple.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>t = tuple()</p>
        </statement>
        <feedback>
          <p>Correct! This is one way to create a tuple.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>t = tup()</p>
        </statement>
        <feedback>
          <p>Incorrect! This is a syntax error. Try again.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>t = 'a', 'b', 'c', 'd'</p>
        </statement>
        <feedback>
          <p>Correct! This is one way to create a tuple.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <p>If the argument is a sequence (string, list, or tuple), the result of
            the call to <c>tuple</c> is a tuple with the elements of the
            sequence:</p>
  <program xml:id="tuplesareimmutable_exercise_5" interactive="activecode" language="python">
    <input>
t = tuple('lupins')
print(t) #should print ('l', 'u', 'p', 'i', 'n', 's')
        </input>
  </program>
  <p>Because <c>tuple</c> is the name of a constructor, you should
            avoid using it as a variable name.</p>
  <p>Most list operators also work on tuples. The bracket operator indexes an
            element:</p>
  <program xml:id="tuplesareimmutable_exercise6" interactive="activecode" language="python">
    <input>
t = ('a', 'b', 'c', 'd', 'e')
print(t[0]) #should print 'a'
        </input>
  </program>
  <p>And the slice operator selects a range of elements.</p>
  <program xml:id="tuplesareimmutable_exercise7" interactive="activecode" language="python">
    <input>
t = ('a', 'b', 'c', 'd', 'e')
print(t[1:3]) #should print ('b', 'c')
        </input>
  </program>
  <exercise label="question10_1_2">
    <statement>
      <p>11-9-9: Which line of code correctly grabs the fourth element of tuple t?</p>
      <program language="python">
        <input>
t = ('Ep', 'is', 'od', 'e ', 'III')
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>t['e ']</p>
        </statement>
        <feedback>
          <p>Incorrect! The bracket operator takes the index of a value as its parameter, not the value itself. Try again.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>t[3]</p>
        </statement>
        <feedback>
          <p>Correct! The index 3 grabs the fourth item in tuple t.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>t[4]</p>
        </statement>
        <feedback>
          <p>Incorrect! Remember, indices start at 0, not 1. Try again.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <p>But if you try to modify one of the elements of the tuple, you get an
            error:</p>
  <program xml:id="tuplesareimmutable_exercise8" interactive="activecode" language="python">
    <input>
t = ('a', 'b', 'c', 'd', 'e')
t[0] = 'A'
print(t) #TypeError: object doesn't support item assignment
        </input>
  </program>
  <p>You can't modify the elements of a tuple, but you can replace one tuple
            with another:</p>
  <program xml:id="tuplesareimmutable_exercise9" interactive="activecode" language="python">
    <input>
t = ('a', 'b', 'c', 'd', 'e')
t = ('A',) + t[1:]
print(t) #should print ('A', 'b', 'c', 'd', 'e')
        </input>
  </program>
  <exercise label="question10_1_3">
    <statement>
      <p>Write code that replaces the third and sixth elements of tuple t with their capitalized versions.</p>
    </statement>
    <program xml:id="question10_1_3_editor" interactive="activecode" language="python">
      <input>
t = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')

====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(t, ('a', 'b', 'C', 'd', 'e', 'F', 'g', 'h'), "Making sure 'C' and 'F' are capitalized.")

myTests().main()
        </input>
    </program>
  </exercise>
</section>
