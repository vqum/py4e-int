<?xml version="1.0"?>
<section xml:id="strings_write-code-questions">
  <title>Write Code Questions</title>
  <exercise label="str-ex-hiacq">
    <statement>
      <p>Fix line 2 so that it prints <q>Hi</q> instead of <q>hi</q>.</p>
    </statement>
    <program xml:id="str-ex-hiacq_editor" interactive="activecode" language="python">
      <input>
s1 = "hi"
s1.capitalize()
print(s1)

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(s1,"Hi")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="str-ex-hiansw" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Fix line 2 so that it prints <q>Hi</q> instead of <q>hi</q>.</p>
    </statement>
    <blocks>
      <block order="3">
        <cline>s1 = "hi"</cline>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>s1 = s1.capitalize()</cline>
        </choice>
        <choice>
          <cline>s1.capitalize() </cline>
        </choice>
      </block>
      <block order="1">
        <cline>print(s1)</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="str-ex-meowacq">
    <statement>
      <p>Fix the code so that only <q>meow</q> is printed.</p>
    </statement>
    <program xml:id="str-ex-meowacq_editor" interactive="activecode" language="python">
      <input>
sentence = "The cat goes meow."
s2 = [16:13]sentence
print(s2)

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

        def testOne(self):
            self.assertEqual(s2,"meow")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="str-ex-meowansw" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Fix the code so that only <q>meow</q> is printed.</p>
    </statement>
    <blocks>
      <block order="2">
        <cline>sentence = "The cat goes meow."</cline>
      </block>
      <block order="4">
        <cline>s2 = sentence[13:17]</cline>
      </block>
      <block order="1">
        <cline>s2 = [16:13]sentence</cline>
      </block>
      <block order="3">
        <cline>print(s2)</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="str-ex-eggsacq">
    <statement>
      <p>Write code to evaluate the length of the string <q>I like green eggs</q>
            and print it. Save the string as s1. It should print <q>The length is 17</q>.</p>
    </statement>
    <program xml:id="str-ex-eggsacq_editor" interactive="activecode" language="python">
      <input>

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(s1,"The length is 17")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="str-ex-eggsansw" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Write code to evaluate the length of the string <q>I like green eggs</q>
            and print it. It should print <q>The length is 17</q>.</p>
    </statement>
    <blocks>
      <block order="2">
        <cline>sentence = 'I like green eggs'</cline>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>print('The length is ' + str(len(sentence)))</cline>
        </choice>
        <choice>
          <cline>print("The length is " + len(sentence)) </cline>
        </choice>
      </block>
    </blocks>
  </exercise>
  <exercise label="str-ex-countacq">
    <statement>
      <p>Create a function named <c>count</c> that accepts a string and a letter
            as arguments, then returns the count of that letter in the string.
            For example, if the function call was <c>count("banana", "a")</c> it would
            return <c>3</c>. <em>Hint: use the</em> <c>count</c> <em>method.</em></p>
    </statement>
    <program xml:id="str-ex-countacq_editor" interactive="activecode" language="python">
      <input>

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(count('banana','a'),3,"Tested 'a' in 'banana'")
        self.assertEqual(count('pineapple','s'),0,"Tested 's' in 'pineapple'")
        self.assertEqual(count('pepperoni pizza','p'),4,"Tested 'p' in 'pepperoni pizza'")
        self.assertEqual(count('racecar','r'),2,"Tested 'r' in 'racecar'")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="str-ex-countansw" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function named <c>count</c> that accepts a string and a letter
            as arguments, then returns the count of that letter in the string.
            For example, if the function call was <c>count("banana", "a")</c> it would
            return <c>3</c>. <em>Hint: use the</em> <c>count</c> <em>method.</em></p>
    </statement>
    <blocks>
      <block order="2">
        <choice correct="yes">
          <cline>def count(str, letter):</cline>
        </choice>
        <choice>
          <cline>def count(str, letter) </cline>
        </choice>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>    return str.count(letter)</cline>
        </choice>
        <choice>
          <cline>    return count(letter) </cline>
        </choice>
      </block>
    </blocks>
  </exercise>
  <exercise label="str-ex-floatacq">
    <statement>
      <p>Take the following Python code that stores this string: <c>string = "X-DSPAM-Confidence: 0.8475"</c>.
            Use <c>find</c> and string slicing to extract the portion of the string after the colon character
            and then use the <c>float</c> function to convert the extracted string into a floating point number called <c>num</c>.</p>
    </statement>
    <program xml:id="str-ex-floatacq_editor" interactive="activecode" language="python">
      <input>
string = "X-DSPAM-Confidence: 0.8475"


====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(num,0.8475)

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="str-ex-floatansw" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Take the following Python code that stores this string: <c>string = "X-DSPAM-Confidence: 0.8475"</c>.
            Use <c>find</c> and string slicing to extract the portion of the string after the colon character
            and then use the <c>float</c> function to convert the extracted string into a floating point number called <c>num</c>.</p>
    </statement>
    <blocks>
      <block order="3">
        <cline>string = "X-DSPAM-Confidence: 0.8475"</cline>
      </block>
      <block order="6">
        <cline>colonpos = string.find(':')</cline>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>digit = string[colonpos + 1:]</cline>
        </choice>
        <choice>
          <cline>digit = string[colonpos:] </cline>
        </choice>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline>num = float(digit)</cline>
        </choice>
        <choice>
          <cline>num = int(digit) </cline>
        </choice>
      </block>
    </blocks>
  </exercise>
  <exercise label="str-ex-ducksacq">
    <statement>
      <p>In Robert McCloskey's book <em>Make Way for Ducklings</em>, the names of the ducklings are
            Jack, Kack, Lack, Mack, Nack, Ouack, Pack, and Quack.
            The following loop tries to output these names in order.
            Of course, that's not quite right because Ouack and Quack are misspelled.
            Can you fix it?</p>
    </statement>
    <program xml:id="str-ex-ducksacq_editor" interactive="activecode" language="python">
      <input>
prefixes = "JKLMNOPQ"
suffix = "ack"

for letter in prefixes:
    print(letter + suffix)
        </input>
    </program>
  </exercise>
  <exercise label="str-ex-ducksansw" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>In Robert McCloskey's book <em>Make Way for Ducklings</em>, the names of the ducklings are
            Jack, Kack, Lack, Mack, Nack, Ouack, Pack, and Quack.
            The following loop tries to output these names in order.
            Of course, that's not quite right because Ouack and Quack are misspelled.
            Can you fix it?</p>
    </statement>
    <blocks>
      <block order="5">
        <cline>prefixes = "JKLMNOPQ"</cline>
        <cline>suffix = "ack"</cline>
      </block>
      <block order="1">
        <cline>for letter in prefixes:</cline>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>    if letter == 'O' or letter == 'Q':</cline>
          <cline>        print(letter + "u" + suffix)</cline>
        </choice>
        <choice>
          <cline>    if letter = 'o' or letter = 'Q': </cline>
          <cline>        print(letter + "u" + suffix)</cline>
        </choice>
      </block>
      <block order="4">
        <cline>    else:</cline>
        <cline>        print(letter + suffix)</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="str-ex-digitsacq">
    <statement>
      <p>Write a function <c>numDigits</c> that will return the number of digits in an integer <c>n</c>.</p>
    </statement>
    <program xml:id="str-ex-digitsacq_editor" interactive="activecode" language="python">
      <input>
def numDigits(n):
    # your code here

====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(numDigits(2),1,"Tested numDigits on input of 2")
        self.assertEqual(numDigits(55),2,"Tested numDigits on input of 55")
        self.assertEqual(numDigits(1352),4,"Tested numDigits on input of 1352")
        self.assertEqual(numDigits(444),3,"Tested numDigits on input of 444")
        </input>
    </program>
  </exercise>
  <exercise label="str-ex-digitsansw" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Write a function <c>numDigits</c> that will return the number of digits in an integer <c>n</c>.</p>
    </statement>
    <blocks>
      <block order="3">
        <choice correct="yes">
          <cline>def numDigits(n):</cline>
        </choice>
        <choice>
          <cline>def numDigits(n) </cline>
        </choice>
      </block>
      <block order="4">
        <cline>    n_str = str(n)</cline>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>    return len(n_str)</cline>
        </choice>
        <choice>
          <cline>    return len(n) </cline>
        </choice>
      </block>
    </blocks>
  </exercise>
  <exercise label="str-ex-nameacq">
    <statement>
      <p>Write code to print out the statement <q>Hi my name is Bob and I am 2</q> using only string methods
            or string slicing. You must get every part of the new string from the given strings, not by using
            string literals.
            Name the final string <c>statement</c>.</p>
    </statement>
    <program xml:id="str-ex-nameacq_editor" interactive="activecode" language="python">
      <input>
s1 = "hi"
s2 = "My name is Bob, and he and I love to eat ham."

====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(statement,"Hi my name is Bob and I am 2")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="str-ex-nameansw" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Write code to print out the statement <q>Hi my name is Bob and I am 2</q> using only string methods
            or string slicing. You must get every part of the new string from the given strings, not by using
            string literals.
            Name the final string <c>statement</c>.</p>
    </statement>
    <blocks>
      <block order="1">
        <cline>s1 = "hi"</cline>
        <cline>s2 = "My name is Bob, and he and I love to eat ham."</cline>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline>statement = s1.capitalize() + s2[2:3] + s2.lower()[0:3] + s2[3:14] + s2[22:29] + s2[4:6] + s2[2:3] + str(len(s1))</cline>
        </choice>
        <choice>
          <cline>statement = s1.capitalize() + s2[7:8] + s2[5:6] + s2[1:2] + s2[3:15] + s2[22:29] + s2[4:6] + s2[2:3] + str(len(s1)) </cline>
        </choice>
      </block>
      <block order="4">
        <cline>print(statement)</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="str-ex-nameInputacq">
    <statement>
      <p>Write a program that asks a user for their name and from the input
            prints the first letter of their name in lowercase.</p>
    </statement>
    <program xml:id="str-ex-nameInputacq_editor" interactive="activecode" language="python">
      <input>

        </input>
    </program>
  </exercise>
  <exercise label="str-ex-nameInputansw" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Write a program that asks a user for their name and from the input
            prints the first letter of their name in lowercase.</p>
    </statement>
    <blocks>
      <block order="7">
        <cline>prompt = "What is your name?"</cline>
      </block>
      <block order="2">
        <cline>name = input(prompt)</cline>
      </block>
      <block order="6">
        <cline>first = name[0]</cline>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline>lowerFirst = first.lower()</cline>
        </choice>
        <choice>
          <cline>first.lower() </cline>
        </choice>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>print(lowerFirst)</cline>
        </choice>
        <choice>
          <cline>print(first) </cline>
        </choice>
      </block>
    </blocks>
  </exercise>
  <exercise label="str-ex-loweracq">
    <statement>
      <p>Write a program that asks for user input and prints their
            input in all lowercase, as well as the length of their string.</p>
    </statement>
    <program xml:id="str-ex-loweracq_editor" interactive="activecode" language="python">
      <input>

        </input>
    </program>
  </exercise>
  <exercise label="str-ex-loweransw" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Write a program that asks for user input and prints their
            input in all lowercase, as well as the length of their string.</p>
    </statement>
    <blocks>
      <block order="3">
        <cline>user_input = input("Enter a string: ")</cline>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline>print(user_input.lower() + " " + str(len(user_input)))</cline>
        </choice>
        <choice>
          <cline>print(user_input.lower() + " " + len(user_input)) </cline>
        </choice>
      </block>
    </blocks>
  </exercise>
</section>
