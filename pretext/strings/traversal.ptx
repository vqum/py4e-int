<?xml version="1.0"?>
<section xml:id="strings_traversal-through-a-string-with-a-loop">
  <title>Traversal through a string with a loop</title>
<idx>Traversal</idx>
<idx><h>Loop</h><h>Traversal</h></idx>
<idx><h>Traversal</h><h>Loop</h></idx>
<idx><h>For</h><h>Loop</h></idx>
<idx><h>Loop</h><h>For</h></idx>
<idx><h>For</h><h>Statement</h></idx>
<idx><h>Statement</h><h>For</h></idx>
  <p>A lot of computations involve processing a string one character at a
            time. Often, they start at the beginning, select each character in turn,
            do something to it, and continue until the end. This pattern of
            processing is called a <em>traversal</em>. One way to write a
            traversal is with a <c>while</c> loop:</p>
  <program xml:id="stringWhileLoop" interactive="codelens" language="python">
    <input>
fruit = "fruit"
index = 0
while index &lt; len(fruit):
    letter = fruit[index]
    print(letter)
    index = index + 1
    </input>
  </program>
  <p>This loop traverses the string and displays each letter on a line by
            itself. The loop condition is <c>index &lt; len(fruit)</c>, so when
            <c>index</c> is equal to the length of the string, the condition
            is false, and the body of the loop is not executed. The last character
            accessed is the one with the index <c>len(fruit)-1</c>, which is
            the last character in the string.</p>
  <exercise>
    <statement/>
    <program interactive="" language=""/>
  </exercise>
  <p>Another way to write a traversal is with a <c>for</c> loop:</p>
  <program xml:id="string-forLoop" interactive="activecode" language="python">
    <input>
fruit = "peach"
for char in fruit:
    print(char)
        </input>
  </program>
  <p>Each time through the loop, the next character in the string is assigned
            to the variable <c>char</c>. The loop continues until no
            characters are left.</p>
  <exercise label="str-trav-mc-plus2">
    <statement>
      <p>11-9-4: How many times is the letter &#x2018;r' printed by the following statements?</p>
      <program language="python">
        <input>
s = "strawberry"
idx = 1
while idx &lt; len(s):
    print(s[idx])
    idx = idx + 2
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>0</p>
        </statement>
        <feedback>
          <p>Incorrect! "strawberry" has two consecutive r's, so the way the loop is set up, this answer is impossible. Try again.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>1</p>
        </statement>
        <feedback>
          <p>Correct! idx starts at 1 and continues to the next odd number. There is only one 'r' whose index is an odd number.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>2</p>
        </statement>
        <feedback>
          <p>Incorrect! This would be true if idx started at 0. Try again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>3</p>
        </statement>
        <feedback>
          <p>Incorrect! This would be true if idx incremented by 1 each loop. Try again.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="str-trav-mc-hello">
    <statement>
      <p>11-9-5: How many times is the word HELLO printed by the following statements?</p>
      <program language="python">
        <input>
s = "green grapes"
for ch in s:
    print("HELLO")
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>10</p>
        </statement>
        <feedback>
          <p>Incorrect! Iteration by item will print "HELLO" once for each character in the string. Try again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>11</p>
        </statement>
        <feedback>
          <p>Incorrect! The space is part of the string, so "HELLO" will be printed for it as well. Try again.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>12</p>
        </statement>
        <feedback>
          <p>Correct! There are 12 characters in the string, including the space, and "HELLO" is printed once for each character.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Error, the for statement needs to use the range function.</p>
        </statement>
        <feedback>
          <p>Incorrect! The for statement can iterate over a sequence item by item. Try again.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="str-trav-mc-mod">
    <statement>
      <p>11-9-6: How many times is the letter i printed by the following statements?</p>
      <program language="python">
        <input>
s = "mississippi"
for idx in range(len(s)):
    if idx % 2 == 0:
        print(s[idx])
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>1</p>
        </statement>
        <feedback>
          <p>Incorrect! This program only prints the characters at even index positions. Try again.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>2</p>
        </statement>
        <feedback>
          <p>Correct! It will print all the characters at even index positions and the i character appears twice in an even location.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>4</p>
        </statement>
        <feedback>
          <p>Incorrect! The for loop visits each index but the if statement means only some of their values are printed. Try again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Error, the for statement cannot have an if in its body.</p>
        </statement>
        <feedback>
          <p>Incorrect! for statements can have any kind of statements in their bodies, including if statements. Try again.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>
