<?xml version="1.0"?>
<section xml:id="strings_mixed-up-code-questions">
  <title>Mixed-up Code Questions</title>
  
  <exercise label="str-mixed-emotion" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create the function, <c>mood(emotion)</c>, to return a string with the <c>emotion</c>
            followed by <c>" 4 you"</c>. For example, if <c>emotion</c> is <q>So happy</q> it should
            return <c>"So happy 4 you!"</c>.</p>
    </statement>
    <blocks>
      <block order="4">
        <cline>def mood(emotion):</cline>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>    out = emotion + " 4 you!"</cline>
        </choice>
        <choice>
          <cline>    out = emotion + "4 you!" </cline>
        </choice>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline>    return out</cline>
        </choice>
        <choice>
          <cline>    return emotion </cline>
        </choice>
      </block>
    </blocks>
  </exercise>

  <exercise label="str-mixed-book" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create the function, <c>item_purchase(item, price)</c>, to return a string with the <c>item</c> purchased followed by the <c>price</c>.
            For example if <c>item</c> is <q>new book</q> and price is <c>12</c> the function should return <c>"My new book cost $12"</c>.</p>
    </statement>
    <blocks>
      <block order="2">
        <choice correct="yes">
          <cline>def item_purchase(item, price):</cline>
        </choice>
        <choice>
          <cline>def item_purchase(price, item): </cline>
        </choice>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline>    out = "My " + item + " cost $" + str(price)</cline>
        </choice>
        <choice>
          <cline>    out = "My " + item + " cost $" + price </cline>
        </choice>
      </block>
      <block order="6">
        <choice correct="yes">
          <cline>    return out</cline>
        </choice>
        <choice>
          <cline>    Return out </cline>
        </choice>
      </block>
    </blocks>
  </exercise>

  <exercise label="str-mixed-code" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create the function <c>phrase(person, thing)</c>, to return a string with a <c>person</c> of your choosing followed by a <c>thing</c>
            of what that person likes to do. For example, if the <c>person</c> is <c>sam</c> and <c>thing</c> is <c>Likes to code</c>, the
            returned string should be <c>"Sam likes to code"</c>. Make sure that <c>person</c> is capitalized and <c>thing</c> is lowercase.</p>
    </statement>
    <blocks>
      <block order="1">
        <choice correct="yes">
          <cline>def phrase(person, thing):</cline>
        </choice>
        <choice>
          <cline>def phrase(person, thing) </cline>
        </choice>
      </block>
      <block order="6">
        <choice correct="yes">
          <cline>    person = person.capitalized()</cline>
          <cline>    thing = thing.lower()</cline>
        </choice>
        <choice>
          <cline>    person.capitalized() </cline>
          <cline>    thing.lower()</cline>
        </choice>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline>    return person + " " + thing</cline>
        </choice>
        <choice>
          <cline>    return person + thing </cline>
        </choice>
      </block>
    </blocks>
  </exercise>

  <exercise label="str-mixed-time" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Let's imagine that last weekend you went on a camping trip with your family. Create a function
            <c>time(hours, minutes)</c>. Return a string that says how long it took you to get home in minutes. For example,
            if <c>hours</c> was <c>3</c> and <c>minutes</c> was <c>13</c>, the returned string should be, <c>"It took us 193 minutes to get home"</c>.</p>
    </statement>
    <blocks>
      <block order="2">
        <choice correct="yes">
          <cline>def time(hours, minutes):</cline>
        </choice>
        <choice>
          <cline>def time(hours, minutes) </cline>
        </choice>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>    total = hours * 60 + minutes</cline>
        </choice>
        <choice>
          <cline>    total = hours + 60 * minutes </cline>
        </choice>
      </block>
      <block order="6">
        <choice correct="yes">
          <cline>    return "It took us " + str(total) + " minutes to get home"</cline>
        </choice>
        <choice>
          <cline>    return "It took us " + str(total) " minutes to get home"  </cline>
        </choice>
      </block>
    </blocks>
  </exercise>

  <exercise label="str-mixed-feeling" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create the function, <c>food(fave, least_fave)</c>, to return a string with your <c>fave</c> food followed by your <c>least_fave</c> food both in lowercase.
            For example, if your <c>fave</c> food is <q>PIZZA</q> and your <c>least_fave</c> is <q>broccoli</q>, return
            <c>"My favorite food is pizza, but I don't like broccoli"</c>. Be sure to change <c>fave</c> and <c>least_fave</c> to lowercase.</p>
    </statement>
    <blocks>
      <block order="1">
        <cline>def food(fave, least_fave):</cline>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline>    fave_l = fave.lower()</cline>
          <cline>    least_l = least_fave.lower()</cline>
          <cline>    start = "My favorite food is "</cline>
          <cline>    end = ", but I don't like "</cline>
        </choice>
        <choice>
          <cline>    fave.lower() </cline>
          <cline>    least_fave.lower()</cline>
          <cline>    start = "My favorite food is "</cline>
          <cline>    end = ", but I don't like "</cline>
        </choice>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>    return start + fave_l + end + least_l</cline>
        </choice>
        <choice>
          <cline>    return start + fave_l + least_l + end </cline>
        </choice>
      </block>
    </blocks>
  </exercise>

  <exercise label="str-mixed-animal" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create the function, <c>animal(type)</c>, to return the string, <q>My <c>type_animal</c> looks like a Muppet</q> with <c>type</c> being
            any animal of your choosing. For example, if your <c>type</c> is <q>sheepdog</q>, then the returned string should
            be <c>"My sheepdog looks like a Muppet"</c>.</p>
    </statement>
    <blocks>
      <block order="3">
        <cline>def animal(type):</cline>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline>    end = " looks like a Muppet"</cline>
        </choice>
        <choice>
          <cline>    end = "looks like a Muppet" </cline>
        </choice>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>    return "My " + type + end</cline>
        </choice>
        <choice>
          <cline>    return "My" + type + end </cline>
        </choice>
      </block>
    </blocks>
  </exercise>

  <exercise label="str-mixed-add" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Let's imagine you went on a huge shopping spree. Create the function, <c>total(store1, store2, store3)</c>,
            to return the total of how much you spent at the three stores. For example, if you spent <c>30</c> in <c>store1</c>, <c>13</c> in <c>store2</c>, and <c>56</c> in <c>store3</c>,
            <c>ans</c> return <c>"$30 + $13 + $56 = $99"</c>.</p>
    </statement>
    <blocks>
      <block order="2">
        <cline>def total(store1, store2, store3):</cline>
      </block>
      <block order="1">
        <cline>    total = store1 + store2 + store3</cline>
      </block>
      <block order="5">
        <cline>    s1 = "$" + str(store1)</cline>
        <cline>    s2 = "$" + str(store2)</cline>
        <cline>    s3 = "$" + str(store3)</cline>
        <cline>    t = "$" + str(total)</cline>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>    return s1 + " + " + s2 + " + " + s3 + " = " + t</cline>
        </choice>
        <choice>
          <cline>    return s1 + s2 + s3 + t </cline>
        </choice>
      </block>
    </blocks>
  </exercise>

  <exercise label="str-mixed-wizard" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create the function <c>combine(var1, var2)</c>, to return a string by combining the two variables <c>var1</c> and <c>var2</c>.
            For example, if <c>var1</c> is <q>i am a</q> and <c>var2</c> is <q>CS wizard</q>, the function should return the string, <c>"I am a cs wizard"</c>.
            Make sure <c>var1</c> is capitalized and <c>var2</c> is lowercase.</p>
    </statement>
    <blocks>
      <block order="5">
        <cline>def combine(var1, var2):</cline>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>    var1 = var1.capitalize()</cline>
          <cline>    var2 = var2.lower()</cline>
        </choice>
        <choice>
          <cline>    var1.capitalize() </cline>
          <cline>    var2.lower()</cline>
        </choice>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline>    return var1 + " " + var2</cline>
        </choice>
        <choice>
          <cline>    return var1 + var2 </cline>
        </choice>
      </block>
    </blocks>
  </exercise>

  <exercise label="str-mixed-colors" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create the function, <c>colors(col1, col2)</c>, should return a string combining the variables <c>col1</c> and <c>col2</c>. For example,
            if <c>col1</c> and <c>col2</c> is <q>&#x2018;red'</q> and <q>&#x2018;blue'</q>, then the function should return <c>Red is a primary color and
so is blue</c>.  Be sure to capitalize the first color and lowercase at second.</p>
    </statement>
    <blocks>
      <block order="3">
        <cline>def colors(col1, col2):</cline>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>    mid = " is a primary color, and so is "</cline>
        </choice>
        <choice>
          <cline>    mid = "is a primary color, and so is" </cline>
        </choice>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline>    col1 = col1.capitalize() + mid</cline>
          <cline>    col2 = col2.lower()</cline>
        </choice>
        <choice>
          <cline>    col1 = col1.lower() + mid </cline>
          <cline>    col2 = col2.capitalize()</cline>
        </choice>
      </block>
      <block order="6">
        <choice correct="yes">
          <cline>    return col1 + col2</cline>
        </choice>
        <choice>
          <cline>    return col1 + " " + col2 </cline>
        </choice>
      </block>
    </blocks>
  </exercise>

  <exercise label="str-mixed-dogs" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create the function, <c>fave_animal(animal)</c>, to return the string, <q>Petting <c>animal</c> makes me happier than anything else</q> where <c>animal</c>
            is any animal of your choice. For example, if <c>animal</c> is <q>dogs</q>, then the function should return, <c>"Petting dogs makes
me happier than anything else"</c>.</p>
    </statement>
    <blocks>
      <block order="3">
        <cline>def fave_animal(animal):</cline>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>    end = " makes me happier than anything else"</cline>
        </choice>
        <choice>
          <cline>    end = "makes me happier than anything else" </cline>
        </choice>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline>    return "Petting " + animal + end</cline>
        </choice>
        <choice>
          <cline>    return "Petting " + "animal" + end </cline>
        </choice>
      </block>
    </blocks>
  </exercise>

  <!--
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=str-mixed-emotion-sq data-questionlist='str-mixed-emotion, str-mixed-emotion-ac'         data-toggleoptions="toggle, " data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: str-mixed-emotion, str-mixed-emotion-ac&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=str-mixed-book-sq data-questionlist='str-mixed-book, str-mixed-book-ac'         data-toggleoptions="toggle, " data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: str-mixed-book, str-mixed-book-ac&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=str-mixed-code-sq data-questionlist='str-mixed-code, str-mixed-code-ac'         data-toggleoptions="toggle, " data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: str-mixed-code, str-mixed-code-ac&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=str-mixed-time-sq data-questionlist='str-mixed-time, str-mixed-time-ac'         data-toggleoptions="toggle, " data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: str-mixed-time, str-mixed-time-ac&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=str-mixed-feeling-sq data-questionlist='str-mixed-feeling, str-mixed-feeling-ac'         data-toggleoptions="toggle, " data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: str-mixed-feeling, str-mixed-feeling-ac&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=str-mixed-animal-sq data-questionlist='str-mixed-animal, str-mixed-animal-ac'         data-toggleoptions="toggle, " data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: str-mixed-animal, str-mixed-animal-ac&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=str-mixed-add-sq data-questionlist='str-mixed-add, str-mixed-add-ac'         data-toggleoptions="toggle, " data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: str-mixed-add, str-mixed-add-ac&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=str-mixed-wizard-sq data-questionlist='str-mixed-wizard, str-mixed-wizard-ac'         data-toggleoptions="toggle, " data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: str-mixed-wizard, str-mixed-wizard-ac&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=str-mixed-colors-sq data-questionlist='str-mixed-colors, str-mixed-colors-ac'         data-toggleoptions="toggle, " data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: str-mixed-colors, str-mixed-colors-ac&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=str-mixed-dogs-sq data-questionlist='str-mixed-dogs, str-mixed-dogs-ac'         data-toggleoptions="toggle, " data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: str-mixed-dogs, str-mixed-dogs-ac&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  -->
</section>
