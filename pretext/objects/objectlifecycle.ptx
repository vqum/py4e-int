<?xml version="1.0"?>
<section xml:id="objects_object-lifecycle">
  <title>Object lifecycle</title>
  <p>In the previous examples, we define a class (template), use that class
            to create an instance of that class (object), and then use the instance.  When
            the program finishes, all of the variables are discarded.  Usually, we don't think
            much about the creation and destruction of variables, but often as our objects
            become more complex, we need to take some action within the object to set things
            up as the object is constructed and possibly clean things up as the object is
            discarded.</p>
  <p>If we want our object to be aware of these moments of construction and destruction,
            we add specially named methods to our object:</p>
  <program xml:id="partyanimal_lifecycle" interactive="activecode" language="python">
    <input>
class PartyAnimal:

    def __init__(self):
        print('I am constructed')

    def party(self, x):
        self.x = x
        self.x = self.x + 1
        print('So far',self.x)

    def __del__(self, x):
        self.x = x
        print('I am destructed', self.x)

an = PartyAnimal()
an.party(1)
an.party(2)
an = 42
print('an contains',an)
        </input>
  </program>
  <p>As Python constructs our object, it calls our <c>__init__</c> method to
            give us a chance to set up some default or initial values for the object.
            When Python encounters the line:</p>
  <pre>an = 42</pre>
  <p>It actually <q>thows our object away</q> so it can reuse the <c>an</c> variable
            to store the value <c>42</c>.  Just at the moment when our <c>an</c> object is
            being <q>destroyed</q> our destructor code (<c>__del__</c>) is called.  We cannot
            stop our variable from being destroyed, but we can do any necessary
            cleanup right before our object no longer exists.</p>
  <p>When developing objects, it is quite common to add a constructor to an object
            to set up initial values for the object. It is relatively rare to need a
            destructor for an object.</p>
  <exercise label="python_lifecycle">
    <statement>
      <p>Q-2: True or False? It is required to have constructor and destructor functions
            for an object.</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>True</p>
        </statement>
        <feedback>
          <p>Try again! python objects do not require constructor or
destructor functions.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>False</p>
        </statement>
        <feedback>
          <p>Correct, constructor functions are often created to initialize
variables but not required and python automatically destroys any
object if its reference count changes to a zero.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>
