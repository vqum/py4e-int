<?xml version="1.0"?>
<section xml:id="objects_mixed-up-code-exercises">
  <title>Mixed-Up Code Exercises</title>

  <exercise label="obj_mixedupcode_1" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a <c>Dog</c> class and define the <c>__init__</c> method
            that has one parameter, <c>name</c>. Then define the <c>getName</c> method, which returns the
            <c>name</c> when the method is called.</p>
    </statement>
    <blocks>
      <block order="9">
        <choice correct="yes">
          <cline>class Dog:</cline>
        </choice>
        <choice>
          <cline>class Dog </cline>
        </choice>
      </block>
      <block order="7">
        <choice correct="yes">
          <cline>    def __init__(self, name):</cline>
        </choice>
        <choice>
          <cline>    def __init__(name): </cline>
        </choice>
      </block>
      <block order="6">
        <choice correct="yes">
          <cline>        self.name = name</cline>
        </choice>
        <choice>
          <cline>        name = self.name </cline>
        </choice>
      </block>
      <block order="8">
        <cline>    def getName(self):</cline>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>        return self.name</cline>
        </choice>
        <choice>
          <cline>        return name </cline>
        </choice>
      </block>
    </blocks>
  </exercise>

  <exercise label="obj_mixedupcode_2_v2" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a class named <c>Dog</c>. Define the <c>__init__</c> method with two parameters, <c>name</c> and <c>age</c>.
            Also create the method <c>updateAge</c>, that increases the <c>age</c> by 1 and returns <c>age</c>.</p>
    </statement>
    <blocks>
      <block order="3">
        <choice correct="yes">
          <cline>class Dog:</cline>
        </choice>
        <choice>
          <cline>class Dog </cline>
        </choice>
      </block>
      <block order="6">
        <choice correct="yes">
          <cline>    def __init__(self, name, age):</cline>
        </choice>
        <choice>
          <cline>    def __init__(name, age): </cline>
        </choice>
      </block>
      <block order="9">
        <choice correct="yes">
          <cline>        self.name = name</cline>
          <cline>        self.age = age</cline>
        </choice>
        <choice>
          <cline>        name = self.name </cline>
          <cline>        age = self.age</cline>
        </choice>
      </block>
      <block order="8">
        <choice correct="yes">
          <cline>    def updateAge(self):</cline>
        </choice>
        <choice>
          <cline>    def updateAge(age): </cline>
        </choice>
      </block>
      <block order="4">
        <cline>        self.age += 1</cline>
      </block>
      <block order="7">
        <cline>        return self.age</cline>
      </block>
    </blocks>
  </exercise>

  <exercise label="obj_mixedupcode_3" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create the class <c>Cat</c>. Define the <c>__init__</c> method, it has two parameters,
            <c>name</c> and <c>age</c>. Next define the the <c>__str__</c> method to return a string with the cat's information:
            <c>"Name: name, Age: age"</c>. Then define the <c>make_sound</c> method, which should return
            the string <c>"Meow"</c>.</p>
    </statement>
    <blocks>
      <block order="8">
        <cline>class Cat:</cline>
      </block>
      <block order="1">
        <cline>    def __init__(self, name, age):</cline>
      </block>
      <block order="2">
        <cline>        self.name = name</cline>
        <cline>        self.age = age</cline>
      </block>
      <block order="6">
        <cline>    def __str__(self):</cline>
      </block>
      <block order="7">
        <cline>        return f"Name: {self.name}, Age: {self.age}"</cline>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>    def make_sound(self):</cline>
        </choice>
        <choice>
          <cline>    def make_sound(sound): </cline>
        </choice>
      </block>
      <block order="5">
        <cline>        return "Meow"</cline>
      </block>
    </blocks>
  </exercise>

  <exercise label="obj_mixedupcode_4" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a class named <c>Book</c> that has an <c>__init__</c> method with the parameters <c>title</c>
            and <c>author</c>.  Then create a <c>__str__</c> method that returns <c>"Title: title, Author: author"</c>.</p>
    </statement>
    <blocks>
      <block order="4">
        <choice correct="yes">
          <cline>class Book:</cline>
        </choice>
        <choice>
          <cline>Class Book: </cline>
        </choice>
      </block>
      <block order="6">
        <cline>    def __init__(self, title, author):</cline>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline>        self.title = title</cline>
          <cline>        self.author = author</cline>
        </choice>
        <choice>
          <cline>        title = self.title </cline>
          <cline>        author = self.author</cline>
        </choice>
      </block>
      <block order="2">
        <cline>    def __str__(self):</cline>
      </block>
      <block order="7">
        <cline>        a = self.author</cline>
        <cline>        t = self.title</cline>
        <cline>        return f"Title: {t}, Author: {a}"</cline>
      </block>
    </blocks>
  </exercise>

  <exercise label="obj_mixedupcode_5_v3" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a class named <c>Dog</c> with the <c>__init__</c> method taking <c>name</c> as its parameter
            and setting <c>self.tricks</c> to an empty list.  Then create a <c>__str__</c> method that returns a string
            with <c>"Name: name"</c>.  Then create a method, <c>updateTricks</c>, that adds
            a new trick to the list.</p>
    </statement>
    <blocks>
      <block order="1">
        <cline>class Dog:</cline>
      </block>
      <block order="7">
        <choice correct="yes">
          <cline>    def __init__(self, name):</cline>
        </choice>
        <choice>
          <cline>    def __init__(name): </cline>
        </choice>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>        self.name = name</cline>
          <cline>        self.tricks = []</cline>
        </choice>
        <choice>
          <cline>        this.name = name </cline>
          <cline>        this.tricks = []</cline>
        </choice>
      </block>
      <block order="10">
        <cline>    def __str__(self):</cline>
      </block>
      <block order="8">
        <cline>        return f'Name: {self.name}'</cline>
      </block>
      <block order="5">
        <cline>    def updateTricks(self, trick):</cline>
      </block>
      <block order="6">
        <choice correct="yes">
          <cline>        self.tricks.append(trick)</cline>
        </choice>
        <choice>
          <cline>        self.tricks.append(self.trick) </cline>
        </choice>
      </block>
    </blocks>
  </exercise>

  <exercise label="obj_mixedupcode_6" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a class named <c>Square</c> with the <c>__init__</c> method taking the length, <c>len</c>, with a default of <c>10</c> if it is not specified.  Then create a <c>__str__</c> method that returns a string
            with <c>"Length: length"</c>.  Then create an <c>area</c> method that returns the area (<c>length</c> times <c>length</c>).</p>
    </statement>
    <blocks>
      <block order="11">
        <choice correct="yes">
          <cline>class Square:</cline>
        </choice>
        <choice>
          <cline>def Square: </cline>
        </choice>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>    def __init__(self, len = 10):</cline>
        </choice>
        <choice>
          <cline>    def __init__(len = 10): </cline>
        </choice>
      </block>
      <block order="3">
        <cline>        self.len = len</cline>
      </block>
      <block order="9">
        <cline>    def __str__(self):</cline>
      </block>
      <block order="8">
        <choice correct="yes">
          <cline>        return f'Length: {self.len}'</cline>
        </choice>
        <choice>
          <cline>        return f'Length: {len}' </cline>
        </choice>
      </block>
      <block order="10">
        <choice correct="yes">
          <cline>    def area(self):</cline>
        </choice>
        <choice>
          <cline>    def __area__(self): </cline>
        </choice>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>        return self.len * self.len</cline>
        </choice>
        <choice>
          <cline>        return len * len </cline>
        </choice>
      </block>
    </blocks>
  </exercise>

  <exercise label="obj_mixedupcode_7_v2" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a class named <c>Rectangle</c> with the <c>__init__</c> method taking a <c>length</c>, and <c>width</c>.  Then create a <c>__str__</c> method that returns a string
            with <c>"l: length, w: width"</c>.  Then create an <c>area</c> method that returns the area (<c>length</c> times <c>width</c>).</p>
    </statement>
    <blocks>
      <block order="1">
        <choice correct="yes">
          <cline>class Rectangle:</cline>
        </choice>
        <choice>
          <cline>Class Rectangle: </cline>
        </choice>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>    def __init__(self, length, width):</cline>
        </choice>
        <choice>
          <cline>    def __init__(Length, width): </cline>
        </choice>
      </block>
      <block order="7">
        <cline>        self.length = length</cline>
        <cline>        self.width = width</cline>
      </block>
      <block order="6">
        <cline>    def __str__(self):</cline>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline>        return f'l: {self.length}, w: {self.width}'</cline>
        </choice>
        <choice>
          <cline>        return f'l: {len}, w: {width}' </cline>
        </choice>
      </block>
      <block order="12">
        <choice correct="yes">
          <cline>    def area(self):</cline>
        </choice>
        <choice>
          <cline>    def __area__(self): </cline>
        </choice>
      </block>
      <block order="9">
        <choice correct="yes">
          <cline>        return self.length * self.width</cline>
        </choice>
        <choice>
          <cline>        return length * width </cline>
        </choice>
      </block>
    </blocks>
  </exercise>

  <exercise label="obj_mixedupcode_8" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Given a class <c>Point</c> with a method <c>distance_from_point(point)</c>, create a class named <c>Triangle</c> with the <c>__init__</c> method taking three <c>Point</c> objects and creating an attribute <c>points</c>.
            Then create an <c>base</c> method that returns length of the longest side.
            The length of a side is the distance between two points.  For example, <c>t = Triangle(Point(0,0), Point(1,0), Point(0,2))</c> would return <c>2.23</c> from <c>base</c>.</p>
    </statement>
    <blocks>
      <block order="10">
        <cline>class Triangle:</cline>
      </block>
      <block order="9">
        <cline>    def __init__(self, p1, p2, p3):</cline>
      </block>
      <block order="6">
        <cline>        self.points = [p1, p2, p3]</cline>
      </block>
      <block order="3">
        <cline>    def base(self):</cline>
      </block>
      <block order="8">
        <cline>        dist = []</cline>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline>        for i in range(len(self.points)):</cline>
        </choice>
        <choice>
          <cline>        for i in range(len(points)): </cline>
        </choice>
      </block>
      <block order="1">
        <cline>            curr = self.points[i]</cline>
      </block>
      <block order="12">
        <cline>            prev = self.points[i-1]</cline>
      </block>
      <block order="4">
        <cline>            d = curr.distance_from_point(prev)</cline>
      </block>
      <block order="13">
        <choice correct="yes">
          <cline>            dist.append(d)</cline>
        </choice>
        <choice>
          <cline>            self.dist.append(d) </cline>
        </choice>
      </block>
      <block order="7">
        <cline>        return max(dist)</cline>
      </block>
    </blocks>
  </exercise>

  <exercise label="obj_mixedupcode_9" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a class named <c>PickItem</c> with the <c>__init__</c> method taking a list of items.
            Then create an <c>pick</c> method that returns one of the items at random.  You can use the <c>random</c> module's <c>choice</c> method for this.  Next create <c>add(item)</c> that adds the item to the list of items.</p>
    </statement>
    <blocks>
      <block order="7">
        <cline>import random</cline>
        <cline>class PickItem:</cline>
      </block>
      <block order="9">
        <choice correct="yes">
          <cline>    def __init__(self, item_list):</cline>
        </choice>
        <choice>
          <cline>    def __init__(item_list): </cline>
        </choice>
      </block>
      <block order="6">
        <cline>        self.item_list = item_list</cline>
      </block>
      <block order="4">
        <cline>    def pick(self):</cline>
      </block>
      <block order="11">
        <choice correct="yes">
          <cline>        return random.choice(self.item_list)</cline>
        </choice>
        <choice>
          <cline>        return random.choice(item_list) </cline>
        </choice>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline>    def add(self,item):</cline>
        </choice>
        <choice>
          <cline>    def add(item): </cline>
        </choice>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>        self.item_list.append(item)</cline>
        </choice>
        <choice>
          <cline>        self.item_list.append(self.item) </cline>
        </choice>
      </block>
    </blocks>
  </exercise>

  <exercise label="obj_mixedupcode_10" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a class <c>Dice</c> with an <c>__init__</c> method that takes the number of sides, <c>num_sides</c>.  Use a default of 6 if <c>num_sides</c> isn't passed in. Also set an attribute <c>history</c> to an empty list in the <c>__init__</c> method.
            Then create a <c>__str__</c> method that returns <c>"Dice with num_sides sides"</c> when <c>num_sides</c> is the number of sides.
            Next create an <c>roll</c> method that picks a random value from one to the number of sides, adds the value to the end of the <c>history</c> list, and returns it.
            You can use the <c>random</c> module's <c>randint(start,end)</c> method to return a random number from start to end inclusvie.</p>
    </statement>
    <blocks>
      <block order="6">
        <cline>import random</cline>
      </block>
      <block order="8">
        <cline>class Dice:</cline>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline>    def __init__(self, num_sides = 6):</cline>
        </choice>
        <choice>
          <cline>    def __init__(self, num_sides): </cline>
        </choice>
      </block>
      <block order="5">
        <cline>        self.num_sides = num_sides</cline>
        <cline>        self.history = []</cline>
      </block>
      <block order="4">
        <cline>    def __str__(self):</cline>
      </block>
      <block order="10">
        <cline>        return f"Dice with {self.num_sides} sides"</cline>
      </block>
      <block order="3">
        <cline>    def roll(self):</cline>
      </block>
      <block order="9">
        <cline>        value = random.randint(1, self.num_sides)</cline>
        <cline>        self.history.append(value)</cline>
      </block>
      <block order="1">
        <cline>        return value</cline>
      </block>
    </blocks>
  </exercise>

  <!--
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=obj_mixedupcode_1_sq data-questionlist='obj_mixedupcode_1, obj_mixedupcode_1_ac'         data-toggleoptions="toggle, " data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: obj_mixedupcode_1, obj_mixedupcode_1_ac&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=obj_mixedupcode_2_v2_sq data-questionlist='obj_mixedupcode_2_v2, obj_mixedupcode_2_v2_ac'         data-toggleoptions="toggle, " data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: obj_mixedupcode_2_v2, obj_mixedupcode_2_v2_ac&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=obj_mixedupcode_3_sq data-questionlist='obj_mixedupcode_3, obj_mixedupcode_3_ac'         data-toggleoptions="toggle, " data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: obj_mixedupcode_3, obj_mixedupcode_3_ac&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=obj_mixedupcode_4_sq data-questionlist='obj_mixedupcode_4, obj_mixedupcode_4_ac'         data-toggleoptions="toggle, " data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: obj_mixedupcode_4, obj_mixedupcode_4_ac&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=obj_mixedupcode_5_v3_sq data-questionlist='obj_mixedupcode_5_v3, obj_mixedupcode_5_v3_ac'         data-toggleoptions="toggle, " data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: obj_mixedupcode_5_v3, obj_mixedupcode_5_v3_ac&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=obj_mixedupcode_6_sq data-questionlist='obj_mixedupcode_6, obj_mixedupcode_6_ac'         data-toggleoptions="toggle, " data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: obj_mixedupcode_6, obj_mixedupcode_6_ac&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=obj_mixedupcode_7_v2_sq data-questionlist='obj_mixedupcode_7_v2, obj_mixedupcode_7_v2_ac'         data-toggleoptions="toggle, " data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: obj_mixedupcode_7_v2, obj_mixedupcode_7_v2_ac&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=obj_mixedupcode_8_sq data-questionlist='obj_mixedupcode_8, obj_mixedupcode_8_ac'         data-toggleoptions="toggle, " data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: obj_mixedupcode_8, obj_mixedupcode_8_ac&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=obj_mixedupcode_9_sq data-questionlist='obj_mixedupcode_9, obj_mixedupcode_9_ac'         data-toggleoptions="toggle, " data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: obj_mixedupcode_9, obj_mixedupcode_9_ac&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=obj_mixedupcode_10_sq data-questionlist='obj_mixedupcode_10, obj_mixedupcode_10_ac'         data-toggleoptions="toggle, " data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: obj_mixedupcode_10, obj_mixedupcode_10_ac&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  -->
</section>
