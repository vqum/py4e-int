<?xml version="1.0"?>
<section xml:id="iterations_loop-patterns">
  <title>Loop patterns</title>
  <introduction>
<idx>Iteration</idx>
<idx><h>For</h><h>Loop</h></idx>
<idx><h>Loop</h><h>For</h></idx>
<idx><h>While</h><h>Loop</h></idx>
<idx><h>Loop</h><h>While</h></idx>
<idx><h>Accumulator</h><h>Sum</h></idx>
<idx><h>Sum</h><h>Accumulator</h></idx>
<idx><h>Maximum</h><h>Loop</h></idx>
<idx><h>Loop</h><h>Maximum</h></idx>
<idx><h>Minimum</h><h>Loop</h></idx>
<idx><h>Loop</h><h>Minimum</h></idx>
<idx><h>Special Value</h><h>None</h></idx>
<idx><h>None</h><h>Special Value</h></idx>
  <p>Often we use a <c>for</c> or <c>while</c> loop to go through
            a list of items or the contents of a file and we are looking for
            something such as the largest or smallest value of the data we scan
            through.</p>
  <p>These loops are generally constructed by:</p>
  <p>
    <ul>
      <li>
        <p>Initializing one or more variables before the loop starts</p>
      </li>
      <li>
        <p>Performing some computation on each item in the loop body, possibly
                    changing the variables in the body of the loop</p>
      </li>
      <li>
        <p>Looking at the resulting variables when the loop completes</p>
      </li>
    </ul>
  </p>
  <p>We will use a list of numbers to demonstrate the concepts and
            construction of these loop patterns.</p>
        </introduction>
  <subsection xml:id="iterations_counting-and-summing-loops">
    <title>Counting and summing loops</title>
    <p>For example, to count the number of items in a list, we would write the
                following <c>for</c> loop:</p>
    <program xml:id="codelens561" interactive="codelens" language="python">
      <input>
count = 0
for itervar in [3, 41, 12, 9, 74, 15]:
    count = count + 1
print('Count: ', count)
    </input>
    </program>
    <p>We set the variable <c>count</c> to zero before the loop starts,
                then we write a <c>for</c> loop to run through the list of
                numbers. Our <em>iteration variable</em> is named
                <c>itervar</c> and while we do not use <c>itervar</c> in the
                loop, it does control the loop and cause the loop body to be executed
                once for each of the values in the list.</p>
    <exercise label="inLoops_MC_itVar">
      <statement>
        <p>Q-2: Which variable is the iteration variable in the code block?</p>
        <program language="python">
          <input>
count = 0
for itervar in [3, 41, 12, 9, 74, 15]:
    count = count + 1
print('Count: ', count)
</input>
        </program>
      </statement>
      <choices>
        <choice correct="yes">
          <statement>
            <p>itervar</p>
          </statement>
          <feedback>
            <p>Correct! itervar is the iteration variable.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>count</p>
          </statement>
          <feedback>
            <p>Incorrect! count is just a variable counting the iterations. Try again.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>[3, 41, 12, 9, 74, 15]</p>
          </statement>
          <feedback>
            <p>Incorrect! This is a list. The program is counting the number of values it contains, but it is not the iteration variable. Try again.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>list</p>
          </statement>
          <feedback>
            <p>Incorrect! This loop iterates through a list, but that is not the iteration variable. Try again.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <p>In the body of the loop, we add 1 to the current value of
                <c>count</c> for each of the values in the list. While the loop is
                executing, the value of <c>count</c> is the number of values we
                have seen <q>so far</q>.</p>
    <p>Once the loop completes, the value of <c>count</c> is the total
                number of items. The total number <q>falls in our lap</q> at the end of the
                loop. We construct the loop so that we have what we want when the loop
                finishes.</p>
    <p>Another similar loop that computes the total of a set of numbers is as
                follows:</p>
    <program xml:id="codelens562" interactive="codelens" language="python">
      <input>
total = 0
for itervar in [3, 41, 12, 9, 74, 15]:
    total = total + itervar
print('Total: ', total)
    </input>
    </program>
    <p>In this loop we <em>do</em> use the <em>iteration variable</em>.
                Instead of simply adding one to the <c>count</c> as in the
                previous loop, we add the actual number (3, 41, 12, etc.) to the running
                total during each loop iteration. If you think about the variable
                <c>total</c>, it contains the <q>running total of the values so
                far</q>. So before the loop starts <c>total</c> is zero because we
                have not yet seen any values, during the loop <c>total</c> is the
                running total, and at the end of the loop <c>total</c> is the
                overall total of all the values in the list.</p>
    <p>As the loop executes, <c>total</c> accumulates the sum of the
                elements; a variable used this way is sometimes called an
                <em>accumulator</em>.</p>
    <exercise label="itLoops_fill1">
      <statement>
        <p>Q-4: The variable that counts the sum of elements in a loop is called a(n) ________ <var/>  </p>
      </statement>
      <setup>
        <var>
          <condition string="[Aa]ccumulator">
            <feedback>
              <p>An accumulator is a variable used to keep track of the sum of elements in a loop.</p>
            </feedback>
          </condition>
          <condition string=".*">
            <feedback>
              <p>Incorrect! Reread the text above this question if you need help. Try again.</p>
            </feedback>
          </condition>
        </var>
      </setup>
    </exercise>
    <p>Neither the counting loop nor the summing loop are particularly useful
                in practice because there are built-in functions <c>len()</c> and
                <c>sum()</c> that compute the number of items in a list and the
                total of the items in the list respectively.</p>
  </subsection>
  <subsection xml:id="iterations_maximum-and-minimum-loops">
    <title>Maximum and minimum loops</title>
    <p>To find the largest value in a list or sequence, we
                construct the following loop:</p>
    <program xml:id="itr-section6_1" interactive="activecode" language="python">
      <input>
largest = None
print('Before:', largest)
for itervar in [3, 41, 12, 9, 74, 15]:
    if largest is None or itervar &gt; largest :
        largest = itervar
    print('Loop:', itervar, largest)
print('Largest:', largest)
        </input>
    </program>
    <p>When the program executes, the output is as follows:</p>
    <pre>Before: None
Loop: 3 3
Loop: 41 41
Loop: 12 41
Loop: 9 41
Loop: 74 74
Loop: 15 74
Largest: 74</pre>
    <p>The variable <c>largest</c> is best thought of as <q>the largest
                value we have seen so far.</q> Before the loop, we set <c>largest</c>
                to the constant <c>None</c>. <c>None</c> is a special
                constant value which we can store in a variable to mark the variable as
                <q>empty</q>.</p>
    <exercise label="inLoops_MC_none_v2">
      <statement>
        <p>Q-6: Which of the following is <em>not</em> true about <c>None</c>?</p>
      </statement>
      <choices>
        <choice>
          <statement>
            <p>It is a constant value.</p>
          </statement>
          <feedback>
            <p>Incorrect! None is a constant value. Try again.</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement>
            <p>It is a variable.</p>
          </statement>
          <feedback>
            <p>Correct! None is a constant value that can be assigned to a variable, not a variable itself.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>It marks a variable as empty.</p>
          </statement>
          <feedback>
            <p>Incorrect! None marks a variable as empty. Try again.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>The value of a variable that starts off as ``None`` can change.</p>
          </statement>
          <feedback>
            <p>Incorrect! The value of None only means that the variable is empty. The variable can then be updated or reassigned. Try again.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <p>Before the loop starts, the largest value we have seen so far is
                <c>None</c> since we have not yet seen any values. While the loop
                is executing, if <c>largest</c> is <c>None</c> then we take
                the first value we see as the largest so far. You can see in the first
                iteration when the value of <c>itervar</c> is 3, since
                <c>largest</c> is <c>None</c>, we immediately set
                <c>largest</c> to be 3.</p>
    <p>After the first iteration, <c>largest</c> is no longer
                <c>None</c>, so the second part of the compound logical expression
                that checks <c>itervar &gt; largest</c> triggers only when we see a
                value that is larger than the <q>largest so far</q>. When we see a new <q>even
                larger</q> value we take that new value for <c>largest</c>. You can
                see in the program output that <c>largest</c> progresses from 3 to
                41 to 74.</p>
    <p>At the end of the loop, we have scanned all of the values and the
                variable <c>largest</c> now does contain the largest value in the
                list.</p>
    <p>To compute the smallest number, the code is very similar with one small
                change:</p>
    <program xml:id="itr-section6_2" interactive="activecode" language="python">
      <input>
smallest = None
print('Before:', smallest)
for itervar in [3, 41, 12, 9, 74, 15]:
    if smallest is None or itervar &lt; smallest:
        smallest = itervar
    print('Loop:', itervar, smallest)
print('Smallest:', smallest)
        </input>
    </program>
    <p>Again, <c>smallest</c> is the <q>smallest so far</q> before, during,
                and after the loop executes. When the loop has completed,
                <c>smallest</c> contains the minimum value in the list.</p>
    <p>Again as in counting and summing, the built-in functions
                <c>max()</c> and <c>min()</c> make writing these exact loops
                unnecessary.</p>
    <p>The following is a simple version of the Python built-in
                <c>min()</c> function:</p>
    <program xml:id="itr-section6_3" interactive="activecode" language="python">
      <input>
def min(values):
    smallest = None
    for value in values:
        if smallest is None or value &lt; smallest:
            smallest = value
    return smallest

nums = [1,2,3,4,5]
print(min(nums))
        </input>
    </program>
    <p>In the function version of the <q>smallest</q> code, we removed all of the
                <c>print</c> statements so as to be equivalent to the
                <c>min</c> function which is already built in to Python.</p>
  </subsection>
</section>
