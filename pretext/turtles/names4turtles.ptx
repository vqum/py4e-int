<?xml version="1.0"?>
<section xml:id="turtles_history-of-turtles">
  <title>History of Turtles</title>
  <introduction>
  <idx>comment</idx>
  <idx>library</idx>
  <idx>screen</idx>
  <idx><h>turtle</h><h>screen</h></idx>
  <idx><h>screen</h><h>turtle</h></idx>
  <idx><h>turtle</h><h>library</h></idx>
  <idx><h>library</h><h>turtle</h></idx>
  <p>The idea of a virtual turtle, dates back to the 1960's.  Seymour Papert and his group at MIT created the programming language LOGO which could control a robot turtle with a physical pen in it.  Kids would steer the robot around, and it would draw as it moved. Seymour said that the Turtle was, <q>an object to think with</q>.  Many modern programming languages support Turtles, including Python.</p>
  <figure align="center" xml:id="fig_names_turtles_id1">
    <caption>Figure 3: Children playing with a Logo turtle robot that could draw with a pen</caption>
    <image source="turtles/Figures/mindstorms_turtle.jpg" width="50%" alt="Children playing with a Logo turtle robot that can draw with a pen"/>
  </figure>
</introduction>

   <subsection xml:id="turtles_first-turtle-program">
    <title>A First Turtle Program</title>
    <introduction>
  <p>Today, we can play with virtual turtles in a fully-graphical and non-robotic way. Below is a Python program that first creates a Screen object (object of the Screen class) for the turtle to draw on and then creates a Turtle object (object of the Turtle class).
            The program asks the turtle object to perform some of its behaviors (methods) like moving forward a set amount and turning. The turtle draws as it moves.</p>
  </introduction>
  <exercise label="Turtle_ex_1">
    <statement>
      <p>Click the Run button to see what this code does.  The drawing will happen below the code.</p>
    </statement>
    <program xml:id="Turtle_ex_1_editor" interactive="activecode" language="python">
      <input>
from turtle import *  # use the turtle library
space = Screen()      # create a Screen object named space
alex = Turtle()       # create a Turtle object named alex
alex.forward(150)     # ask alex to move forward by 150 units
alex.left(90)         # ask alex to turn by 90 degrees
alex.forward(75)      # ask alex to move forward by 75 units
        </input>
    </program>
  </exercise>
  <exercise label="Turtle_Init_Dir_mc_q1">
    <statement>
      <p>Which way does a turtle (object of the Turtle class) face when it is first created?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>North</p>
        </statement>
        <feedback>
          <p>Some systems start with the turtle facing North, but not this one.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>South</p>
        </statement>
        <feedback>
          <p>Which way does the turtle first move in the example above?  North is at the top of the page.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>East</p>
        </statement>
        <feedback>
          <p>Turtles start off facing east which is toward the right side of the page.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>West</p>
        </statement>
        <feedback>
          <p>Which way does the turtle first move in the example above?   North is at the top of the page.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <conclusion>
  <note xml:id="turtles_index-1">
    <p>Notice that we tell <c>alex</c> the turtle what to do in the code above using <term>dot notation</term>: <c>alex.forward(150)</c>,  <c>alex.left(90)</c>, and <c>alex.forward(75)</c>. <idx>dot notation</idx> That is how you communicate with an object.  You use the name of the turtle object followed by a <c>.</c> and then the name of the method that you want to execute.</p>
  </note>
  <p>Just by going forward and turning we can have a turtle object draw many things.</p>
</conclusion>
</subsection>
  <subsection xml:id="turtles_what-does-a-left-turn-of-90-mean">
    <title>What does a left turn of 90 mean?</title>
    <p>When we ask a turtle to turn left, it will turn left based on the direction it is currently heading. A turtle object keeps track of its heading (direction it is facing). Use the figure below to help you understand how much the turtle will turn if asked to turn left 90 degrees and it is currently heading east (0 degrees).</p>
    <figure align="center" xml:id="fig_names_turtles_id2">
      <caption>Figure 1: The amount of turn for specified degrees for left and right turns</caption>
      <image source="turtles/Figures/turnDegrees.png" width="70%" alt="shows what a turn of each degrees means for left and right turns"/>
    </figure>
  </subsection>
  <subsection xml:id="turtles-practice-with-turtles">
    <introduction>
      <p>The following problems have a <em>Help Me</em> button.  You can click the <em>Help Me</em> button after you have made at least three full and distinct attempts to solve the problem to make the problem easier.</p>
    </introduction>
    
      <exercise label="turtle-capital-L" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Construct a block of code that asks the user for a number and prints three times that number.</p>
      <figure align="center" xml:id="fig_names_turtles_id3">
    <caption>Capital L drawn by turtle</caption>
    <image source="turtles/Figures/TurtleL4.png" width="50%" alt="Line-drawn capital L with arrow pointing east at right end of horizontal line. Compass at top of drawing showing North at top of drawing."/>
    </figure>
    </statement>
    <blocks>
      <block order="5">
        <choice correct="yes">
          <cline>from turtle import *</cline>
        </choice>
        <choice>
          <cline>from turtle Import *</cline>
        </choice>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline>space = Screen()</cline>
        </choice>
        <choice>
          <cline>space = screen()</cline>
        </choice>
      </block>
      <block order="7">
        <cline>ella = Turtle()</cline>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>ella.right(90)</cline>
        </choice>
        <choice>
          <cline>ella.turn(90)</cline>
        </choice>
      </block>
      <block order="3">
        <cline>ella.forward(150)</cline>
      </block>
      <block order="6">
        <cline>ella.left(90)</cline>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>ella.forward(75)</cline>
        </choice>
        <choice>
          <cline>ella.go(75)</cline>
        </choice>
      </block>
    </blocks>
  </exercise>
    
  <exercise label="turtle-checkmark">
    <statement><p>The following program uses a turtle to draw a checkmark as shown below but the lines are mixed up.  The program should do all necessary set-up: import the turtle module, get the screen/space to draw on, and create the turtle.  The turtle should turn to face southeast, draw a line that is 75 pixels long, then turn to face northeast, and draw a line that is 150 pixels long.  We have added a compass to the picture to indicate the directions north, south, west, and east.  Northeast is between north and east. Southeast is between south and east. Drag the needed blocks of statements from the left column to the right column and put them in the right order.  There may be additional blocks that are not needed in a correct solution.  Then click on <em>Check</em> to see if you are right. You will be told if any of the lines are in the wrong order or are the wrong blocks.</p>
    <figure align="center" xml:id="fig_names_turtles_id4">
    <caption>Checkmark drawn by turtle</caption>
    <image source="turtles/Figures/checkMark.png" width="50%" alt="Line-drawn checkmark with arrow pointing northeast at right end of checkmark. Compass at top of drawing showing North at top of drawing."/>
    </figure>  
    </statement>
    <blocks>
      <block order="5">
        <cline>from turtle import *</cline>
      </block>
      <block>
        <cline>space = Screen()</cline>
      </block>
      <block order="4">
        <choice>
          <cline>maria = Turtle</cline>
        </choice>
        <choice correct="yes">
          <cline>maria = Turtle()</cline>
        </choice>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>maria.right(45)</cline>
        </choice>
        <choice>
          <cline>maria.left(45)</cline>
        </choice>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>maria.forward(75)</cline>
        </choice>
        <choice>
          <cline>maria.Forward(75)</cline>
        </choice>
      </block>
      <block order="6">
        <choice correct="yes">
          <cline>maria.left(90)</cline>
        </choice>
        <choice>
          <cline>maria.right(90)</cline>
        </choice>
      </block>
      <block order="2">
        <cline>maria.forward(150)</cline>
      </block>
    </blocks>
  </exercise>

    <exercise label="var-draw-letter-fitb">
    <statement>
      <p>What letter (like A, B, C, d, etc.) will the program below draw in block style when you click the Run button? <var/>  </p>
      <program xml:id="prog-draw-letter-1" language="python" interactive="activecode">
        <input>from turtle import *    # use the turtle library
space = Screen()        # create a Screen object named space
alex = Turtle()         # create a Turtle object named alex
alex.left(180)          # turn alex by 180 degrees
alex.forward(75)        # move forward by 75 units
alex.left(90)           # turn left 90 degrees
alex.forward(100)       # more forward by 100 units
alex.left(90)           # turn left 90 degrees
alex.forward(75)        # move forward by 75 units</input></program>
    </statement>
    <setup>
      <var>
        <condition string="c|C">
          <feedback>
            <p>That's correct!</p>
          </feedback>
        </condition>
        <condition string=".*">
          <feedback>
            <p>Try to follow the directions as if you are the turtle.</p>
          </feedback>
        </condition>
      </var>
    </setup>
  </exercise>

  <p>The following example has four errors. Can you fix the errors so that the code runs correctly to print a capital L?</p>
  
  <program xml:id="turtle_error_1" interactive="activecode" language="python">
<input>from turtle import *    # use the turtle library
space = screen()        # create a Screen object named space
alisha = Turtle         # create a Turtle object named alisha
alisha.right(90)        # turn alisha south
alisha.forward          # move forward by 150 units
alisha.left(90)         # turn to face east
alisha.Forward(75)      # move forward by 75 units</input>
</program>

<p>The following example has 4 errors.  Can you fix the errors so that the code runs correctly to print a capital C?</p>
<program xml:id="turtle_error_2" interactive="activecode" language="python">
  <input>from turtle Import *    # use the turtle library
space = Screen()        # create a Screen object named space
alex = Turtle           # create a Turtle object named alex
alex.left(180)          # turn alex by 180 degrees
alex.forward(75)        # move forward by 75 units
alex.turn(90)           # turn left 90 degrees
alex.forward(100)       # more forward by 100 units
alex.left(90)           # turn left 90 degrees
alex.forward            # move forward by 75 units
</input></program>
<note><p>Case matters in Python so <c>screen</c> is not the same as <c>Screen</c>. Also the open and close parentheses are required after every function and procedure call, even if it doesn't take any input.</p></note>
  </subsection>
</section>
