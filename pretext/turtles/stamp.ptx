<?xml version="1.0"?>
<section xml:id="turtles_the-turtle-stamp-procedure">
  <title>The Turtle Stamp Procedure</title>
  <p>You can change the shape of the turtle using the <c>shape</c> procedure.  In the program below we set it to look more like a turtle.</p>
  <p>A turtle can also <term>stamp</term> a copy of itself on the screen (turtle drawing area), and this will remain after the turtle has moved somewhere else.  Do this with the <c>stamp</c> procedure.  Stamping works even when the pen is up.  You can ask the turtle to pick up the pen using the <c>up</c> procedure as shown below.  When the pen is up the turtle will not draw a line when it moves.</p>
  <p>Here is an example that shows off these new features.</p>
  <exercise label="stampex">
    <statement>
      <p>Run the code to see what it draws.</p>
    </statement>
    <program xml:id="stampex_editor" interactive="activecode" language="python">
      <input>
from turtle import *
space = Screen()
tess = Turtle()
tess.color("blue")
tess.shape("turtle")

print(range(5, 60, 2))
tess.penup()                  # ask tess to pick up her pen
for size in range(5, 60, 2):  # start with size = 5 and grow by 2
    tess.stamp()                # leave an impression on the canvas
    tess.forward(size)          # move tess along
    tess.right(24)              # and turn her
        </input>
    </program>
  </exercise>
  <p>The list of integers shown under the picture above is created by printing the <c>range(5,60,2)</c> result.  This shows you the distances used to move the turtle forward each time through the <c>for</c> loop.</p>
  <p>All except one of the shapes you see on the screen here are copies of the turtle shape created by <c>stamp</c>.  But the program still only has <em>one</em> turtle instance &#x2014; can you figure out which one is the real tess?  (Hint: if you're
            not sure, write a new line of code after the <c>for</c> loop to change tess' color, or to put her pen down and draw a line, or to change her shape, etc.)</p>
  <p>
    <term>Mixed up program</term>
  </p>
  <exercise label="turtle_4_1_turtle-stamp" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>The following program uses the stamp method to create a line of turtle shapes as shown below, but the lines are mixed up.  The program should do all necessary set-up, create the turtle, set the shape to <q>turtle</q>, and pick up the pen.  Then the turtle should repeat the following three times: go forward 50 pixels and leave a copy of the turtle at the current position.  Drag the needed blocks of statements from the left column to the right column and put them in the right order with the correct indention.  Click on <em>Check</em> to see if you are right. You will be told if any of the lines are in the wrong order or are the wrong blocks.</p>
      <image source="turtles/Figures/Turtle3Stamp.png" width="200px%"/>
    </statement>
    <blocks>
      <block order="9">
        <cline>from turtle import *</cline>
        <cline>space = Screen()</cline>
        <cline>space.setup(400,400)</cline>
      </block>
      <block order="10">
        <cline>nikea = Turtle()</cline>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline>nikea.shape("turtle")</cline>
        </choice>
        <choice>
          <cline>nikea.shape(turtle) </cline>
        </choice>
      </block>
      <block order="8">
        <choice correct="yes">
          <cline>nikea.penup()</cline>
        </choice>
        <choice>
          <cline>nikea.penUp() </cline>
        </choice>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>for size in range(3):</cline>
        </choice>
        <choice>
          <cline>for size in range(3)  </cline>
        </choice>
      </block>
      <block order="11">
        <cline>    nikea.forward(50)</cline>
      </block>
      <block order="6">
        <choice correct="yes">
          <cline>    nikea.stamp()</cline>
        </choice>
        <choice>
          <cline>    nikea.stamp </cline>
        </choice>
      </block>
    </blocks>
  </exercise>
  <exercise label="turtle_4_2_turtle-circle" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>The following program uses the stamp method to create a circle of turtle shapes as shown to the left, but the lines are mixed up.  The program should do all necessary set-up, create the turtle, set the shape to <q>turtle</q>, and pick up the pen.  Then the turtle should repeat the following ten times: go forward 50 pixels, leave a copy of the turtle at the current position, reverse for 50 pixels, and then turn right 36 degrees. Drag the needed blocks of statements from the left column to the right column and put them in the right order with the correct indention.  Click on <em>Check</em> to see if you are right. You will be told if any of the lines are in the wrong order or are the wrong blocks</p>
      <image source="turtles/Figures/TurtleCircle.png" width="200px%"/>
    </statement>
    <blocks>
      <block order="12">
        <cline>from turtle import *</cline>
        <cline>space = Screen()</cline>
        <cline>jose = Turtle()</cline>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline>jose.shape("turtle")</cline>
          <cline>jose.penup()</cline>
        </choice>
        <choice>
          <cline>jose.shape("turtle")</cline>
          <cline>jose.penup </cline>
        </choice>
      </block>
      <block order="9">
        <choice correct="yes">
          <cline>for size in range(10):</cline>
        </choice>
        <choice>
          <cline>for size in range(10) </cline>
        </choice>
      </block>
      <block order="8">
        <cline>    jose.forward(50)</cline>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>    jose.stamp()</cline>
        </choice>
        <choice>
          <cline>    jose.Stamp() </cline>
        </choice>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>    jose.forward(-50)</cline>
        </choice>
        <choice>
          <cline>    jose.forward(-25) </cline>
        </choice>
      </block>
      <block order="10">
        <choice correct="yes">
          <cline>    jose.right(36)</cline>
        </choice>
        <choice>
          <cline>    jose.right(20) </cline>
        </choice>
      </block>
    </blocks>
  </exercise>
</section>
