ack/AA-contrib.ptx:      <p xml:id="ack_index-0">What happened next is the cool part. Jeff Elkner, a high school teacher
classes-basics/MultipleClassesPractice.ptx:<section xml:id="classes-basics_multiple-classes-practice35_index-0">
classes-basics/MultipleClassesPractice_orig.ptx:<section xml:id="classes-basics_multiple-classes-practice36_index-0">
classes-basics/Objectorientedprogramming.ptx:<section xml:id="classes-basics_object-oriented-programming37_index-0">
classes-basics/ObjectsRevisited.ptx:<section xml:id="classes-basics_objects-revisited38_index-0">
classes-basics/UserDefinedClasses.ptx:<section xml:id="classes-basics_user-defined-classes40_index-0">
classes-basics/MultipleClasses.ptx:<section xml:id="classes-basics_group-work-with-multiple-classes42_index-0">
classes-basics/MultipleClassesMCQs.ptx:<section xml:id="classes-basics_multiple-choice-questions-for-multiple-classes43_index-0">
conditional/altExecution.ptx:  <p xml:id="conditional_index-0">A second form of the <c>if</c> statement is <em>alternative
conditional/debugging.ptx:  <p xml:id="conditional_index-0">The traceback Python displays when an error occurs contains a lot of
conditional/logicalOperators.ptx:  <p xml:id="conditional_index-0">There are three <em>logical operators</em>: <c>and</c>,
conditional/nested.ptx:  <p xml:id="conditional_index-0">One conditional can also be nested within another. We could have written
conditional/shortCircuit.ptx:  <p xml:id="conditional_index-0">When Python is processing a logical expression such as <c>x &gt;= 2 and
conditional/tryExcept.ptx:  <p xml:id="conditional_index-0">Earlier we saw a code segment where we used the <c>input</c> and
conditional/boolean.ptx:  <p xml:id="conditional_index-0">A <em>boolean expression</em> is an expression that is either
conditional/chained.ptx:  <p xml:id="conditional_index-0">Sometimes there are more than two possibilities and we need more than
conditional/conditionalEx.ptx:  <p xml:id="conditional_index-0">In order to write useful programs, we almost always need the ability to
database/3Keys.ptx:  <p xml:id="database_index-0">Now that we have started building a data model putting our data into
database/SQLsummary.ptx:  <p xml:id="database_index-0">So far, we have been using the Structured Query Language in our Python
database/basicModeling.ptx:  <p xml:id="database_index-0">The real power of a relational database is when we create multiple
database/creatingDBtable.ptx:  <p xml:id="database_index-0">Databases require more defined structure than Python lists or
database/dbBrowserSQLite.ptx:  <p xml:id="database_index-0">While this chapter will focus on using Python to work with data in
database/dbConcepts.ptx:  <p xml:id="database_index-0">When you first look at a database it looks like a spreadsheet with
database/debugging.ptx:  <p xml:id="database_index-0">One common pattern when you are developing a Python program to connect
database/more-select.ptx:  <p xml:id="database_index-0">There are other keywords that you can use with SELECT.  Run the following to see what they do.</p>
database/multTables.ptx:  <p xml:id="database_index-0">We will now redo the Twitter spider program using two tables, the
database/spideringTwitter.ptx:  <note xml:id="database_index-0">
database/whatIsADatabase.ptx:  <p xml:id="database_index-0">A <em>database</em> is a file that is organized for storing
database/usingJOIN.ptx:  <p xml:id="database_index-0">Now that we have followed the rules of database normalization and have
debugging/HowtoAvoidDebugging.ptx:  <p xml:id="debugging_index-0">Now, that's a lot better, and in fact depending on the hours you chose, it may be exactly right.  If you entered 8 for <c>current_time</c> and 5 for <c>wait_time</c> then 13 is correct.  But if you entered 17 (5 pm) for <c>current_time</c> and 9 for <c>wait_time</c> then the result of 26 is not correct.</p>
dictionaries/debugging.ptx:  <p xml:id="dictionaries_index-0">As you work with bigger datasets it can become unwieldy to debug by
dictionaries/dictionaries1.ptx:  <p xml:id="dictionaries_index-0">A <em>dictionary</em> is like a list, but more general. In a
dictionaries/dictionariesandfiles.ptx:  <p xml:id="dictionaries_index-0">One of the common uses of a dictionary is to count the occurrence of
dictionaries/dictionarycounters.ptx:  <p xml:id="dictionaries_index-0">Suppose you are given a string and you want to count how many times each
dictionaries/loopinganddictionaries.ptx:  <p xml:id="dictionaries_index-0">If you use a dictionary as the sequence in a <c>for</c> statement,
files/debugging.ptx:  <p xml:id="files_index-0">When you are reading and writing files, you might run into problems with
files/openingFiles.ptx:  <p xml:id="files_index-0">When we want to read or write a file (say on your hard drive), we first
files/persistence.ptx:  <p xml:id="files_index-0">So far, we have learned how to write programs and communicate our
files/readingFiles.ptx:  <p xml:id="files_index-0">While the <em>file handle</em> object does not contain the actual data in the
files/searching.ptx:  <p xml:id="files_index-0">When you are searching through data in a file, it is a very common
files/textFiles.ptx:  <p xml:id="files_index-0">A text file can be thought of as a sequence of lines, much like a Python
files/userNames.ptx:  <p xml:id="files_index-0">We really do not want to have to edit our Python code every time we want
files/writingFiles.ptx:  <p xml:id="files_index-0">To write a file, you have to open it with mode <q>w</q> as a second
files/tryExceptOpen.ptx:  <p xml:id="files_index-0">I told you not to peek. This is your last chance.</p>
functions/addingnewfunctions.ptx:  <p xml:id="functions_index-0">So far, we have only been using the functions that come with Python, but
functions/builtin.ptx:  <p xml:id="functions_index-0">Python provides a number of important built-in functions that we can use
functions/debugging.ptx:  <p xml:id="functions_index-0">If you are using a text editor to write your scripts, you might run into
functions/definitionsanduses.ptx:  <p xml:id="functions_index-0">Pulling together the code fragments from the previous section, the whole
functions/flowofexecution.ptx:  <p xml:id="functions_index-0">In order to ensure that a function is defined before its first use, you
functions/fruitfulvoid.ptx:  <p xml:id="functions_index-0">Some of the functions we are using, such as the math functions, yield
functions/functioncalls.ptx:  <p xml:id="functions_index-0">In the context of programming, a <em>function</em> is a named
functions/mathfunctions.ptx:  <p xml:id="functions_index-0">Python has a <c>math</c> module that provides most of the familiar
functions/parametersandargs.ptx:  <p xml:id="functions_index-0">Some of the built-in functions we have seen require arguments. For
functions/randomnumbers.ptx:  <p xml:id="functions_index-0">If you give most computer programs the same input multiple times,
functions/typeconversion.ptx:  <p xml:id="functions_index-0">Python also provides built-in functions that convert values from one
functions/whyfunctions.ptx:  <p xml:id="functions_index-0">It may not be clear why it is worth the trouble to divide a program into
functions/func-group.ptx:    <note xml:id="functions_index-0">
inheritance/MoreOnTesting.ptx:    <p xml:id="inheritance_index-0">There are many assert methods that you can use in your tests.  See <url href="https://docs.python.org/3/library/unittest.html" visual="https://docs.python.org/3/library/unittest.html">https://docs.python.org/3/library/unittest.html</url> for the documentation.  You will mostly use
inheritance/PillarsOfOop.ptx:  <p xml:id="inheritance_index-0">Object-oriented programming involves four key ideas: encapsulation, information
inheritance/UnitTests.ptx:    <note xml:id="inheritance_index-0">
intro/buildingBlocks.ptx:  <p xml:id="intro_building_blocks_index-0">In the next few chapters, we will learn more about the vocabulary,
intro/computerHardwareArch.ptx:  <p xml:id="intro_hardware_architecture_index-0">Before we start learning the language we speak to give instructions to
intro/goWrong.ptx:  <p xml:id="intro_go_wrong_index-0">As we saw in our earliest conversations with Python, we must communicate
intro/terminology.ptx:  <p xml:id="intro_terminology_index-0">Python is a <em>high-level</em> language intended to be
intro/understanding.ptx:  <p xml:id="intro_understanding_index-0">In the rest of this book, we will try to turn you into a person who is
intro/whatIsAProgram.ptx:  <p xml:id="intro_what_is_a_program_index-0">The definition of a <em>program</em> at its most basic is a
intro/words-and-sentences.ptx:  <p xml:id="intro_words_and_sentences_index-0">Unlike human languages, the Python vocabulary is actually pretty small.
intro/writingPrograms.ptx:  <p xml:id="intro_writing_programs_index-0">Typing commands into the Python interpreter is a great way to experiment
iterations/debugging.ptx:  <p xml:id="iterations_index-0">As you start writing bigger programs, you might find yourself spending
iterations/definite_for.ptx:  <p xml:id="iterations_index-0">Sometimes we want to loop through a <em>set</em> of things, such
iterations/loops.ptx:  <p xml:id="iterations_index-0">Often we use a <c>for</c> or <c>while</c> loop to go through
iterations/updating.ptx:  <p xml:id="iterations_index-0">Commonly, assignment statements are used to update a variable, where the
iterations/while.ptx:        <p xml:id="iterations_index-0">Computers are often used to automate repetitive tasks. Repeating
iterations/continue.ptx:  <p xml:id="iterations_index-0">Sometimes, you are in a loop and want to finish the
iterations/infinite_loops.ptx:  <p xml:id="iterations_index-0">An endless source of amusement for programmers is the observation that
lists/aliasing.ptx:  <p xml:id="lists_index-0">If <c>a</c> refers to an object and you assign <c>b = a</c>,
lists/debugging.ptx:  <p xml:id="lists_index-0">Careless use of lists (and other mutable objects) can lead to long hours
lists/deleteElement.ptx:  <p xml:id="lists_index-0">There are several ways to delete elements from a list. If you know the
lists/listAsArgument.ptx:  <p xml:id="lists_index-0">When you pass a list to a function, the function gets a reference to the
lists/listFunctions.ptx:  <p xml:id="lists_index-0">There are a number of built-in functions that can be used on lists that
lists/listMethods.ptx:  <p xml:id="lists_index-0">Python provides methods that operate on lists. For example,
lists/listOperations.ptx:  <p xml:id="lists_index-0">The <c>+</c> operator concatenates lists:</p>
lists/listsAndStrings.ptx:  <p xml:id="lists_index-0">A string is a sequence of characters and a list is a sequence of values,
lists/mutable.ptx:  <p xml:id="lists_index-0">The syntax for accessing the elements of a list is the same as for
lists/objectsValues.ptx:  <p xml:id="lists_index-0">If we execute these assignment statements:</p>
lists/parsing.ptx:        <p xml:id="lists_index-0">Usually when we are reading a file we want to do something to the lines
lists/sequence.ptx:        <p xml:id="lists_index-0">Like a string, a <em>list</em> is a sequence of values. In a
lists/slice.ptx:  <p xml:id="lists_index-0">The slice operator also works on lists:</p>
lists/traversing.ptx:  <p xml:id="lists_index-0">The most common way to traverse the elements of a list is with a
regex/bonussection.ptx:  <p xml:id="regex_index-0">Support for searching files using regular expressions was built into the
regex/charactermatching.ptx:  <p xml:id="regex_index-0">There are a number of other special characters that let us build even
regex/extractingdata.ptx:  <p xml:id="regex_index-0">If we want to extract data from a string in Python we can use the
regex/regularexpressions.ptx:  <p xml:id="regex_index-0">So far we have been reading through files, looking for patterns and
strings/comparison.ptx:  <p xml:id="strings_index-0">The comparison operators work on strings. To see if two strings are
strings/count.ptx:  <p xml:id="strings_index-0">The following program counts the number of times the letter
strings/debugging.ptx:  <p xml:id="strings_index-0">A skill that you should cultivate as you program is always asking
strings/format.ptx:  <p xml:id="strings_index-0">The <em>format operator</em>, <c>%</c> allows us to
strings/immutable.ptx:  <p xml:id="strings_index-0">It is tempting to use the operator on the left side of an assignment,
strings/in.ptx:  <p xml:id="strings_index-0">The word <c>in</c> is a boolean operator that takes two strings
strings/length.ptx:  <p xml:id="strings_index-0"><c>len()</c> is a built-in function that returns the number of
strings/methods.ptx:  <p xml:id="strings_index-0">Strings are an example of Python <em>objects</em>. An object
strings/parsing.ptx:  <p xml:id="strings_index-0">Often, we want to look into a string and find a substring. For example
strings/sequence.ptx:  <p xml:id="strings_index-0">A string is a <em>sequence</em> of characters. You can access
strings/slices.ptx:  <p xml:id="strings_index-0">A segment of a string is called a <em>slice</em>. Selecting a
strings/traversal.ptx:  <p xml:id="strings_index-0">A lot of computations involve processing a string one character at a
tuples/comparingtuples.ptx:  <p xml:id="tuples_index-0">The comparison operators can be used with tuples and other sequences. Python
tuples/debugging.ptx:  <p xml:id="tuples_index-0">Lists, dictionaries and tuples are known generically as <term>data
tuples/dictionariesandtuples.ptx:  <p xml:id="tuples_index-0">Dictionaries have a method called <c>items</c> that returns a list
tuples/multipleassignments.ptx:  <p xml:id="tuples_index-0">By combining <c>items</c>, tuple assignment, and <c>for</c>,
tuples/sequences.ptx:  <p xml:id="tuples_index-0">I have focused on lists of tuples, but almost all of the examples in
tuples/tupleassignment.ptx:  <p xml:id="tuples_index-0">One of the unique syntactic features of Python is the
tuples/tuplesareimmutable.ptx:  <p xml:id="tuples_index-0">A tuple is a sequence of values much like a list. The values stored
tuples/usingtuplesaskeys.ptx:  <p xml:id="tuples_index-0">Because tuples are hashable and lists are not, if we
turtles/functionsWithTurtles.ptx:  <p xml:id="turtles_index-0">Here is code that draws a square with a turtle using a <c>for</c> loop with <c>range</c>.</p>
turtles/names4turtles.ptx:  <p xml:id="turtles_index-0">Today, we can play with virtual turtles in a fully-graphical and non-robotic way. Below is a Python program that first creates a Screen object (object of the Screen class) for the turtle to draw on and then creates a Turtle object (object of the Turtle class).
turtles/patterns.ptx:  <note xml:id="turtles_index-0">
turtles/repeatturtles.ptx:  <p xml:id="turtles_index-0">We already had a turtle draw a square.  We repeated the lines in order to make the turtle go forward and turn four times.  Another way to do this is to tell the computer to do something explicitly for a certain number of times by using a <c>for</c> loop. The lines that you want to repeat in the <c>for</c> loop must be indented by 4 spaces as shown below.</p>
variables/comments.ptx:  <p xml:id="variables_comments_index-0">As programs get bigger and more complicated, they get more difficult to
variables/debugging.ptx:  <p xml:id="variables_debugging_index-0">At this point, the syntax error you are most likely to make is an
variables/expressions.ptx:  <p xml:id="variables_expressions_index-0">An <em>expression</em> is a combination of values, variables,
variables/mnemonic-names.ptx:  <p xml:id="variables_mnemonic_names_index-0">As long as you follow the simple rules of variable naming, and avoid
variables/modulus.ptx:  <p xml:id="variables_modulus_index-0">The <em>modulus operator</em> works on integers and yields the
variables/operators-and-operands.ptx:  <p xml:id="variables_operators_operands_index-0"><em>Operators</em> are special symbols that represent
variables/statements.ptx:  <p xml:id="variables_statements_index-0">A <em>statement</em> is a unit of code that the Python
variables/string-operations.ptx:  <p xml:id="variables_string_operations_index-0">The <c>+</c> operator works with strings, but it is not addition
variables/values-and-types.ptx:  <p xml:id="variables_values_types_index-0">A <em>value</em> is one of the basic things a program works
variables/variable-names-keywords.ptx:  <p xml:id="variables_names_keywords_index-0">Programmers generally choose names for their variables that are
variables/variables-section.ptx:  <p xml:id="variables_variables_index-0">One of the most powerful features of a programming language is the
variables/user-input.ptx:  <p xml:id="variables_user_input_index-0">Sometimes we would like to take the value for a variable from the user
viz/visualizingdata.ptx:  <p xml:id="viz_index-0">So far we have been learning the Python language and then learning how
web/applicationProg.ptx:  <p xml:id="web_index-0">We now have the ability to exchange data between applications using
web/loopingNodes.ptx:  <p xml:id="web_index-0">Often the XML has multiple nodes and we need to write a loop to process
web/parsingJSON.ptx:    <p xml:id="web_index-0">In the following program, we use the built-in <c>json</c>
web/securityAPI.ptx:  <p xml:id="web_index-0">It is quite common that you need an API key to make use of a
web/JSON.ptx:  <p xml:id="web_index-0">The JSON format was inspired by the object and array format used in the
web/parsingXML.ptx:        <p xml:id="web_index-0">Look at the code below and predict what will be printed.</p>
web/xml.ptx:  <p xml:id="web_index-0">XML is a mark-up language.  HTML is also a mark-up language.
