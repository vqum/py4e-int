<?xml version="1.0"?>
<section xml:id="intro_what-could-possibly-go-wrong">
  <title>What could possibly go wrong?</title>
<idx>Syntax Error</idx>
<idx>Semantic Error</idx>
<idx>Logic Error</idx>
  <p>As we saw in our earliest conversations with Python, we must communicate
            very precisely when we write Python code. The smallest deviation or
            mistake will cause Python to give up looking at your program.</p>
  <p>Beginning programmers often take the fact that Python leaves no room for
            errors as evidence that Python is mean, hateful, and cruel. While Python
            seems to like everyone else, Python knows them personally and holds a
            grudge against them. Because of this grudge, Python takes our perfectly
            written programs and rejects them as <q>unfit</q> just to torment us.</p>
  <program language="python">
    <input>
&gt;&gt;&gt; primt 'Hello world!'
File "&lt;stdin&gt;", line 1
  primt 'Hello world!'
                     ^
SyntaxError: invalid syntax
&gt;&gt;&gt; primt ('Hello world')
Traceback (most recent call last):
File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'primt' is not defined

&gt;&gt;&gt; I hate you Python!
File "&lt;stdin&gt;", line 1
  I hate you Python!
       ^
SyntaxError: invalid syntax
&gt;&gt;&gt; if you come out of there, I would teach you a lesson
File "&lt;stdin&gt;", line 1
  if you come out of there, I would teach you a lesson
            ^
SyntaxError: invalid syntax
&gt;&gt;&gt;
</input>
  </program>
  <p>There is little to be gained by arguing with Python. It is just a tool.
            It has no emotions and it is happy and ready to serve you whenever you
            need it. Its error messages sound harsh, but they are just Python's call
            for help. It has looked at what you typed, and it simply cannot
            understand what you have entered.</p>
  <p>Python is much more like a dog, loving you unconditionally, having a few
            key words that it understands, looking you with a sweet look on its face
            (<c>&gt;&gt;&gt;</c>), and waiting for you to say something it
            understands. When Python says <q>SyntaxError: invalid syntax</q>, it is
            simply wagging its tail and saying, <q>You seemed to say something but I
            just don't understand what you meant, but please keep talking to me
            (<c>&gt;&gt;&gt;</c>).</q></p>
  <p>As your programs become increasingly sophisticated, you will encounter
            three general types of errors:</p>
  <p>
        <dl>
          <li>
            <title>Syntax errors</title>
            <p>These are the first errors you will make and the easiest to fix. A
                                syntax error means that you have violated the <q>grammar</q> rules of
                                Python. Python does its best to point right at the line and
                                character where it noticed it was confused. The only tricky bit of
                                syntax errors is that sometimes the mistake that needs fixing is
                                actually earlier in the program than where Python
                                <em>noticed</em> it was confused. So the line and character
                                that Python indicates in a syntax error may just be a starting point
                                for your investigation.</p>
          </li>

          <li>
            <title>Logic errors</title>
            <p>A logic error is when your program has good syntax but there is a
                                mistake in the order of the statements or perhaps a mistake in how
                                the statements relate to one another. A good example of a logic
                                error might be, <q>take a drink from your water bottle, put it in your
                                backpack, walk to the library, and then put the top back on the
                                bottle.</q></p>
          </li>

          <li>
            <title>Semantic errors</title>
            <p>A semantic error is when your description of the steps to take is
                                syntactically perfect and in the right order, but there is simply a
                                mistake in the program. The program is perfectly correct but it does
                                not do what you <em>intended</em> for it to do. A simple
                                example would be if you were giving a person directions to a
                                restaurant and said, <q>&#x2026;when you reach the intersection with the
                                gas station, turn left and go one mile and the restaurant is a red
                                building on your left.</q> Your friend is very late and calls you to
                                tell you that they are on a farm and walking around behind a barn,
                                with no sign of a restaurant. Then you say <q>did you turn left or
                                right at the gas station?</q> and they say, <q>I followed your directions
                                perfectly, I have them written down, it says turn left and go one
                                mile at the gas station.</q> Then you say, <q>I am very sorry, because
                                while my instructions were syntactically correct, they sadly
                                contained a small but undetected semantic error.</q>.</p>
          </li>
        </dl>

  </p>
  <p>Again in all three types of errors, Python is merely trying its hardest
            to do exactly what you have asked.</p>
  <exercise label="intro-gowrong-mc-error">
    <statement>
      <p>Q-1: What type of error would this code produce?</p>
      <pre>print "Hello world!"</pre>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Logic error</p>
        </statement>
        <feedback>
          <p>Try again! This will not cause a logic error - something is missing from the code.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Semantic error</p>
        </statement>
        <feedback>
          <p>Try again! This will not cause a semantic error - something is missing from the code.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Syntax error</p>
        </statement>
        <feedback>
          <p>Print statements need parentheses.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>No error</p>
        </statement>
        <feedback>
          <p>This will throw an error.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="intro-gowrong-mc-semantic">
    <statement>
      <p>Q-2: Which of the following is a semantic error?</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>Forgetting to multiply by pi when calculating the circumference of a circle.</p>
        </statement>
        <feedback>
          <p>This will produce the wrong answer because the programmer implemented the solution incorrectly. This is a semantic error.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Forgetting to use quotation marks around a string.</p>
        </statement>
        <feedback>
          <p>Try again! This will cause a syntax error and not run.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Trying to use the string "32" in math equations.</p>
        </statement>
        <feedback>
          <p>Try again!</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="intro-gowrong-mc-syntax">
    <statement>
      <p>Q-3: Who/what finds syntax errors?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>The programmer</p>
        </statement>
        <feedback>
          <p>Try again! The programmer might find syntax errors if they look through their code, but the interpreter/compiler will find them when the code is run.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>The interpreter/compiler.</p>
        </statement>
        <feedback>
          <p>The interpreter/compiler will find syntax errors.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>The user.</p>
        </statement>
        <feedback>
          <p>Try again! The user will run into syntax errors if they exist, but the interpreter/compiler will find them.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>
