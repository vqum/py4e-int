<?xml version="1.0"?>
<section xml:id="intro_debugging">
  <title>Debugging</title>
  <p xml:id="intro_index_debugging-0">When Python spits out an error or even when it gives you a result that is different from
            what you had intended, then begins the hunt for the cause of the error. Debugging is the process
            of finding the cause of the error in your code. When you are debugging a program, and especially
            if you are working on a hard bug, there are four things to try:</p>
  <p>
        <dl>
          <li>
            <title>Reading</title>
            <p>Examine your code, read it back to yourself, and check that it says
                                what you meant to say.</p>
          </li>

          <li>
            <title>Running</title>
            <p>Experiment by making changes and running different versions. Often
                                if you display the right thing at the right place in the program,
                                the problem becomes obvious, but sometimes you have to spend some
                                time to build scaffolding.</p>
          </li>

          <li>
            <title>Ruminating</title>
            <p>Take some time to think! What kind of error is it: syntax, runtime,
                                semantic? What information can you get from the error messages, or
                                from the output of the program? What kind of error could cause the
                                problem you're seeing? What did you change last, before the problem
                                appeared?</p>
          </li>

          <li>
            <title>Retreating</title>
            <p>At some point, the best thing to do is back off, undoing recent
                                changes, until you get back to a program that works and that you
                                understand. Then you can start rebuilding.</p>
          </li>
        </dl>
  </p>
  <p>Beginning programmers sometimes get stuck on one of these activities and
            forget the others.  Finding a hard bug requires reading, running, ruminating, and sometimes retreating.
            If you get stuck on one of these activities, try the others. Each activity comes with its own failure mode.</p>
  <p>For example, reading your code might help if the problem is a
            typographical error, but not if the problem is a conceptual
            misunderstanding. If you don't understand what your program does, you
            can read it 100 times and never see the error, because the error is in
            your head.</p>
  <p>Running experiments can help, especially if you run small, simple tests.
            But if you run experiments without thinking or reading your code, you
            might fall into a pattern I call <q>random walk programming</q>, which is the
            process of making random changes until the program does the right thing.
            Needless to say, random walk programming can take a long time.</p>
  <p>You have to take time to think. Debugging is like an experimental
            science. You should have at least one hypothesis about what the problem
            is. If there are two or more possibilities, try to think of a test that
            would eliminate one of them.</p>
  <p>Taking a break helps with the thinking. So does talking. If you explain
            the problem to someone else (or even to yourself), you will sometimes
            find the answer before you finish asking the question.</p>
  <p>But even the best debugging techniques will fail if there are too many
            errors, or if the code you are trying to fix is too big and complicated.
            Sometimes the best option is to retreat, simplifying the program until
            you get to something that works and that you understand.</p>
  <p>Beginning programmers are often reluctant to retreat because they can't
            stand to delete a line of code (even if it's wrong). If it makes you
            feel better, copy your program into another file before you start
            stripping it down. Then you can paste the pieces back in a little bit at
            a time.</p>
  <exercise label="intro-debug-mc-definition">
    <statement>
      <p>Q-1: What is debugging?</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>The process of finding the cause of the error in your code.</p>
        </statement>
        <feedback>
          <p>Correct!</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>The process of making random changes until the program does the right thing.</p>
        </statement>
        <feedback>
          <p>Nope, that is *random walk programming.*</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>The process of exterminating pests from your house.</p>
        </statement>
        <feedback>
          <p>What is debugging in terms of programming?</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>The process of detecting and removing concealed microphones from (an area).</p>
        </statement>
        <feedback>
          <p>What is debugging in terms of programming?</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="intro-debug-mc-randomwalk">
    <statement>
      <p>Q-2: What is <q>random walk programming?</q></p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Stepping through the program to find bugs.</p>
        </statement>
        <feedback>
          <p>Reread above to find the answer.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Changing the names of variables in your code randomly.</p>
        </statement>
        <feedback>
          <p>Reread above to find the answer.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Going for a walk without a map.</p>
        </statement>
        <feedback>
          <p>Reread above to find the answer.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Making random changes until the program does the right thing</p>
        </statement>
        <feedback>
          <p>Correct!</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="intro-debug-dnd-terms">
    <statement>
      <p>Match each term with its meaning.</p>
    </statement>
    <feedback>
      <p>Look above for these terms.</p>
    </feedback>
    <matches>
      <match order="1">
        <premise>Reading</premise>
        <response>Examine your code, read it back to yourself, and check that it says what you meant to say.</response>
      </match>
      <match order="2">
        <premise>Running</premise>
        <response>Experiment by making changes and running different versions.</response>
      </match>
      <match order="3">
        <premise>Ruminating</premise>
        <response>Take some time to think! What kind of error is it and how can you interpret the error or output?</response>
      </match>
      <match order="4">
        <premise>Retreating</premise>
        <response>At some point, the best thing to do is back off, undoing recent changes, until you get back to a program that works and that you understand.</response>
      </match>
    </matches>
  </exercise>
</section>
