<?xml version="1.0"?>
<section xml:id="lists_write-code-questions">
  <title>Write Code Questions</title>
  <exercise>
    <statement>
      <p>Write a function <c>add_to_new_list</c> that takes in a list of strings, <c>lst</c>, as a parameter and creates a new list with the length
                    of <c>lst</c> and the first element of <c>lst</c> three times. For example, <c>add_to_new_list(["1","2","3"])</c> would return <c>[3, '111']</c>.</p>
    </statement>
    <program interactive="activecode" language="python" xml:id="list_writeMyListq_editor">
      <input>
def add_to_new_list(lst):
    # write code here
=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(add_to_new_list(['1','2','3']), [3, '111'], "add_to_new_list(['1','2','3'])")
        self.assertEqual(add_to_new_list(['0','0','0','0']), [4, '000'], "add_to_new_list(['0','0','0','0'])")
        self.assertEqual(add_to_new_list(['10.2','0.0','100','-2']), [4, '10.210.210.2'], "add_to_new_list(['10.2','0.0','100','-2'])")


myTests().main()
        </input>
    </program>
    <solution>


    
                Write a function add_to_new_list that takes in a list of strings, lst, as a parameter and creates a new list with the length
                    of lst and the first element of lst three times. For example, add_to_new_list(["1","2","3"]) would return [3, '111'].

    
    <program xml:id="list_writeMyListA_editor" language="python"><input>
def add_to_new_list(lst):
    new_list = []
    new_list.append(len(lst))
    new_list.append(lst[0] * 3)
    return new_list

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(add_to_new_list(['1','2','3']), [3, '111'], "add_to_new_list(['1','2','3'])")
        self.assertEqual(add_to_new_list(['0','0','0','0']), [4, '000'], "add_to_new_list(['0','0','0','0'])")
        self.assertEqual(add_to_new_list(['10.2','0.0','100','-2']), [4, '10.210.210.2'], "add_to_new_list(['10.2','0.0','100','-2'])")


myTests().main()
        </input></program>
            </solution>
  </exercise>
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=lists_writecode2 data-questionlist='list_writeItemsq_v2_ac, list_writeItemsq_v2_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: list_writeItemsq_v2_ac, list_writeItemsq_v2_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  <exercise>
    <statement>
      <p>Write a function <c>average</c> that takes in a list of integers, <c>aList</c>, as a parameter and returns the average of
                    all of the integers, rounded to one decimal place. For example, <c>average([99, 100, 74, 63, 100, 100])</c> would return <c>89.3</c>.</p>
    </statement>
    <program interactive="activecode" language="python" xml:id="list_writeAvgq_editor">
      <input>
def average(aList):
    # write code here

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertAlmostEqual(average([99, 100, 74, 63, 100, 100]), 89.3, 1, "average([99, 100, 74, 63, 100, 100])")
        self.assertAlmostEqual(average([0, 2, -3, 1.2, 2000]), 400.0, 1, "average([0, 2, -3, 1.2, 2000])")
        self.assertAlmostEqual(average([-2]), -2.0, 1, "average([-2])")


myTests().main()
        </input>
    </program>
    <solution>


    
                Write a function average that takes in a list of integers, aList, as a parameter and returns the average of
                    all of the integers, rounded to one decimal place. For example, average([99, 100, 74, 63, 100, 100]) would return 89.33.

    
    <program xml:id="list_writeAvgA_editor" language="python"><input>
def average(aList):
    sum = 0
    for num in aList:
        sum += num
    avg = round(sum / len(aList),2)
    return avg

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertAlmostEqual(average([99, 100, 74, 63, 100, 100]), 89.3, 1, "average([99, 100, 74, 63, 100, 100])")
        self.assertAlmostEqual(average([0, 2, -3, 1.2, 2000]), 400.0, 1, "average([0, 2, -3, 1.2, 2000])")
        self.assertAlmostEqual(average([-2]), -2.0, 1, "average([-2])")


myTests().main()
        </input></program>
            </solution>
  </exercise>
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=lists_writecode4 data-questionlist='list_write23_ac, list_write23_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: list_write23_ac, list_write23_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  <exercise>
    <statement>
      <p>Write a function <c>capitalize</c> that takes in a list of lists of strings, <c>lst</c>, and makes the first letter of each element capitalized and adds
                    it to a new list and returns that new list. For example, <c>capitalize([["hi"],["hello", "hey"]])</c> would return <c>['Hi', 'Hello', 'Hey']</c>.</p>
    </statement>
    <program interactive="activecode" language="python" xml:id="list_capitalize_q_editor">
      <input>
def capitalize(lst):
    # write code here


=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(capitalize([['hi'],['hello', 'hey']]), ['Hi', 'Hello', 'Hey'], "capitalize([['hi'],['hello', 'hey']])")
        self.assertEqual(capitalize([['HI'],['HELLO', 'HEY']]), ['Hi', 'Hello', 'Hey'], "capitalize([['HI'],['HELLO', 'HEY']])")
        self.assertEqual(capitalize([['go', 'blue'],['python', 'IS', 'The', 'Best']]), ['Go', 'Blue', 'Python', 'Is', 'The', 'Best'], "capitalize([['go', 'blue'],['python', 'IS', 'The', 'Best']])")

myTests().main()
        </input>
    </program>
    <solution>


    
                Write a function capitalize that takes in a list of lists of strings, lst, and makes the first letter of each element capitalized and adds
                    it to a new list and returns that new list. For example, capitalize([["hi"],["hello", "hey"]]) would return ['Hi', 'Hello', 'Hey'].

    
    <program xml:id="list_capitalize_a_editor" language="python"><input>
def capitalize(lst):
    new_list = []
    for i in lst:
        for j in i:
            new_list.append(j.capitalize())
    return new_list

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(capitalize([['hi'],['hello', 'hey']]), ['Hi', 'Hello', 'Hey'], "capitalize([['hi'],['hello', 'hey']])")
        self.assertEqual(capitalize([['HI'],['HELLO', 'HEY']]), ['Hi', 'Hello', 'Hey'], "capitalize([['HI'],['HELLO', 'HEY']])")
        self.assertEqual(capitalize([['go', 'blue'],['python', 'IS', 'The', 'Best']]), ['Go', 'Blue', 'Python', 'Is', 'The', 'Best'], "capitalize([['go', 'blue'],['python', 'IS', 'The', 'Best']])")

myTests().main()
        </input></program>
            </solution>
  </exercise>
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=lists_writecode6 data-questionlist='list_write5_ac, list_write5_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: list_write5_ac, list_write5_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  <exercise>
    <statement>
      <p>Write a function <c>chop</c> that takes a list, <c>lst</c>, and modifies it, removing the first and last elements.
                    For example, <c>chop([1,2,3,4,5]</c> should return <c>[2,3,4]</c>.</p>
    </statement>
    <program interactive="activecode" language="python" xml:id="list_writeChopq_editor">
      <input>
def chop(lst):
    # write code here


=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(chop([1,2,3,4,5]),[2,3,4],"chop([1,2,3,4,5])")
        self.assertEqual(chop([1,3,5,7,9,10]),[3,5,7,9],"chop([1,3,5,7,9,10])")
        self.assertEqual(chop([2,9]),[],"chop([2,9])")

myTests().main()
        </input>
    </program>
    <solution>


    
                Write a function chop that takes a list, lst, and modifies it, removing the first and last elements.
                    For example, chop([1,2,3,4,5] should return [2,3,4].

    
    <program xml:id="list_writeChopa_editor" language="python"><input>
def chop(lst):
    lst.pop(0)
    lst.pop(-1)
    return(lst)

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(chop([1,2,3,4,5]),[2,3,4],"chop([1,2,3,4,5])")
        self.assertEqual(chop([1,3,5,7,9,10]),[3,5,7,9],"chop([1,3,5,7,9,10])")
        self.assertEqual(chop([2,9]),[],"chop([2,9])")

myTests().main()
        </input></program>
            </solution>
  </exercise>
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=lists_writecode8 data-questionlist='list_writeReverse_ac, list_writeReverse_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: list_writeReverse_ac, list_writeReverse_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  <exercise>
    <statement>
      <p>Write a function <c>sumUntilEven</c> that takes in one parameter, <c>lst</c>, and returns the sum of all the
                    elements in the <c>lst</c> up to but not including the first even number. For example, <c>sumUntilEven([1,2,3,4,5]</c>
                    should return <c>1</c> and <c>sumUntilEven([1,3,5,7,9]</c> should return <c>25</c>.</p>
    </statement>
    <program interactive="activecode" language="python" xml:id="list_writeSumq_editor">
      <input>
def sumUntilEven(lst):
    # write code here

====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(sumUntilEven([1,2,3,4,5]),1,"sumUntilEven([1,2,3,4,5])")
        self.assertEqual(sumUntilEven([1,3,5,7,9]),25,"sumUntilEven([1,3,5,7,9])")
        self.assertEqual(sumUntilEven([2,4,6,7,9]),0,"sumUntilEven([2,4,6,7,9])")

myTests().main()
        </input>
    </program>
    <solution>


    
                Write a function called sumUntilEven that takes in one parameter, lst, and returns the sum of all the
                    elements in the lst up to but not including the first even number. For example, sumUntilEven([1,2,3,4,5]
                    should return 1 and sumUntilEven([1,3,5,7,9] should return 25.

    
    <program xml:id="list_writeSuma_editor" language="python"><input>
def sumUntilEven(lst):
    total = 0
    element = 0
    while element &lt; len(lst) and lst[element] % 2 != 0:
        total = total + lst[element]
        element += 1
    return total

====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(sumUntilEven([1,2,3,4,5]),1,"sumUntilEven([1,2,3,4,5])")
        self.assertEqual(sumUntilEven([1,3,5,7,9]),25,"sumUntilEven([1,3,5,7,9])")
        self.assertEqual(sumUntilEven([2,4,6,7,9]),0,"sumUntilEven([2,4,6,7,9])")

myTests().main()
        </input></program>
            </solution>
  </exercise>
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=lists_writecode10 data-questionlist='list_sortByLen_ac, list_sortByLen_pp'         data-toggleoptions="toggle, lock" data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: list_sortByLen_ac, list_sortByLen_pp&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  <exercise label="list_loop_two_lists">
    <statement>
      <p>Write a function <c>combine(names, ages)</c> that takes in two lists, <c>names</c> and <c>ages</c> and returns a list of strings in the format <c>"Name: name, age: age"</c>.  For example,
            <c>combine(["Claire", "Jennifer"],[23, 19])</c> would return <c>["Name: Claire, age: 23", "Name: Jennfier, age: 19"]</c>.</p>
    </statement>
    <program xml:id="list_loop_two_lists_editor" interactive="activecode" language="python">
      <input>
def combine(names, ages):

====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
          self.assertEqual(combine(["Mark", "Mary", "Sue"], [59, 60, 61]), ["Name: Mark, age: 59", "Name: Mary, age: 60", "Name: Sue, age: 61"], 'combine(["Mark", "Mary", "Sue"])')
          self.assertEqual(combine(["Iman"], [28]), ["Name: Iman, age: 28"], 'combine(["Iman"], [28])')
          self.assertEqual(combine(["Pedro", "Mez"], [24, 26]), ["Name: Pedro, age: 24", "Name: Mez, age: 26"], 'combine(["Pedro", "Mez"], [24, 26])')
          self.assertEqual(combine(["Claire", "Jennifer"], [23, 19]), ["Name: Claire, age: 23", "Name: Jennifer, age: 19"], 'combine(["Claire", "Jennifer"], [23, 19])')


myTests().main()
        </input>
    </program>
  </exercise>
</section>
