<?xml version="1.0"?>
<section xml:id="lists_debugging">
  <title>Debugging</title>
<idx>Debugging</idx>
<idx><h>Method</h><h>Sort</h></idx>
<idx><h>Sort</h><h>Method</h></idx>
<idx>Idiom</idx>
<idx><h>Copy to Avoid</h><h>Aliasing</h></idx>
<idx><h>Aliasing</h><h>Copy to Avoid</h></idx>
<introduction>
  <p>Careless use of lists (and other mutable objects) can lead to long hours
            of debugging. Here are some common pitfalls and ways to avoid them:</p>
        </introduction>
        <paragraphs>
            <title>Don't forget that most list methods modify the argument and return <c>None</c></title>
            <p>This is the opposite of the string methods, which
                                return a new string and leave the original alone.</p>
            <p>If you are used to writing string code like this:</p>
            <program language="python">
              <input>
word = word.strip()
</input>
            </program>
            <p>It is tempting to write list code like this:</p>
            <program language="python">
              <input>
t = t.sort()           # WRONG!
</input>
            </program>
            <p>Because <c>sort</c> returns <c>None</c>, the next
                                operation you perform with <c>t</c> is likely to fail.</p>
            <p>Before using list methods and operators, you should read the
                                documentation carefully and then test them in interactive mode. The
                                methods and operators that lists share with other sequences (like
                                strings) are documented at:</p>
            <p>
              <url href="https://docs.python.org/library/stdtypes.html#common-sequence-operations" visual="https://docs.python.org/library/stdtypes.html#common-sequence-operations">docs.python.org/library/stdtypes.html#common-sequence-operations</url>
            </p>
            <p>The methods and operators that only apply to mutable sequences are
                                documented at:</p>
            <p>
              <url href="https://docs.python.org/library/stdtypes.html#mutable-sequence-types" visual="https://docs.python.org/library/stdtypes.html#mutable-sequence-types">docs.python.org/library/stdtypes.html#mutable-sequence-types</url>
            </p>
            <exercise label="listDebug_fillMethods">
              <statement>
                <p>Q-1: Most list methods return ______, where string methods generally return a new string. <var/>  </p>
              </statement>
              <setup>
                <var>
                  <condition string="[Nn]one">
                    <feedback>
                      <p>Most list methods modify the argument and return <q>None</q>.</p>
                    </feedback>
                  </condition>
                  <condition string=".*">
                    <feedback>
                      <p>Try again.</p>
                    </feedback>
                  </condition>
                </var>
              </setup>
            </exercise>
          </paragraphs>
          
          <paragraphs>
            <title>Pick an idiom and stick with it</title>
            <p>Part of the problem with lists is that there are too many ways to do
                                things. For example, to remove an element from a list, you can use
                                <c>pop</c>, <c>remove</c>, <c>del</c>, or even a
                                slice assignment.</p>
            <p>To add an element, you can use the <c>append</c> method or the
                                <c>+</c> operator. But don't forget that these are right:</p>
            <program language="python">
              <input>
t.append(x)
t = t + [x]
</input>
            </program>
            <p>And these are wrong:</p>
            <program language="python">
              <input>
t.append([x])          # WRONG!
t = t.append(x)        # WRONG!
t + [x]                # WRONG!
t = t + x              # WRONG!
</input>
            </program>
            <p>Try out each of these examples in interactive mode to make sure you
                                understand what they do. Notice that only the last one causes a
                                runtime error; the other three are legal, but they do the wrong
                                thing.</p>
 
  <exercise label="listDebug_ac_fix">
    <statement>
      <p>Fix the following code to correctly add x, y, and z to the end of lst in that order.</p>
    </statement>
    <program xml:id="listDebug_ac_fix_editor" interactive="activecode" language="python">
      <input>
lst = [1, 1, 2, 3, 5, 8, 13]
x = 21
y = 34
z = 55
lst.append([x])
lst = lst + y
lst = lst.append(z)

====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(lst,[1,1,2,3,5,8,13,21,34,55],"Testing that x, y, and z, have been added to the end of lst")

myTests().main()
        </input>
    </program>
  </exercise>
</paragraphs>
<paragraphs>
            <title>Make copies to avoid aliasing</title>
            <p>If you want to use a method like <c>sort</c> that modifies the
                                argument, but you need to keep the original list as well, you can
                                make a copy.</p>
            <program language="python">
              <input>
orig = t[:]
t.sort()
</input>
            </program>
            <p>In this example you could also use the built-in function
                                <c>sorted</c>, which returns a new, sorted list and leaves the
                                original alone. But in that case you should avoid using
                                <c>sorted</c> as a variable name!</p>

  <exercise label="listDebug_MC_tf">
    <statement>
      <p>Q-3: True or False? The built-in function sorted affects the original list.</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>True</p>
        </statement>
        <feedback>
          <p>Try again!</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>False</p>
        </statement>
        <feedback>
          <p>Sorted returns a new, sorted list and leaves the original list as is.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</paragraphs>

<paragraphs>
            <title>Lists, <c>split</c> , and files</title>
            <p>When we read and parse files, there are many opportunities to
                                encounter input that can crash our program so it is a good idea to
                                revisit the <em>guardian</em> pattern when it comes writing
                                programs that read through a file and look for a <q>needle in the
                                haystack</q>.</p>
            <p>Let's revisit our program that is looking for the day of the week on
                                the from lines of our file:</p>
            <pre>From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008</pre>
            <p>Since we are breaking this line into words, we could dispense with
                                the use of <c>startswith</c> and simply look at the first word
                                of the line to determine if we are interested in the line at all. We
                                can use <c>continue</c> to skip lines that don't have <q>From</q>
                                as the first word as follows:</p>
            <program xml:id="listDebug_ac_print" interactive="activecode" language="python">
              <input>
fhand = open('mboxShort.txt')
for line in fhand:
    words = line.split()
    if words[0] != 'From' : continue
    print(words[2])
        </input>
            </program>
            <p>This looks much simpler and we don't even need to do the
                                <c>rstrip</c> to remove the newline at the end of the file.
                                But is it better?</p>
            <exercise label="listDebug_MC_error">
              <statement>
                <p>Q-5: What kind of error will caused by the code above?</p>
              </statement>
              <choices>
                <choice>
                  <statement>
                    <p>SyntaxError</p>
                  </statement>
                  <feedback>
                    <p>There isn't anything wrong with the syntax here! What will happen if the code reaches the end of the file?</p>
                  </feedback>
                </choice>
                <choice correct="yes">
                  <statement>
                    <p>IndexError</p>
                  </statement>
                  <feedback>
                    <p>The code will cause an IndexError because it has no stop for when the file ends.</p>
                  </feedback>
                </choice>
                <choice>
                  <statement>
                    <p>TypeError</p>
                  </statement>
                  <feedback>
                    <p>There aren't type issues with this code, because everything is read in as a string. What will happen if the code reaches the end of the file?</p>
                  </feedback>
                </choice>
                <choice>
                  <statement>
                    <p>RuntimeError</p>
                  </statement>
                  <feedback>
                    <p>This will not cause a RuntimeError. What will happen if the code reaches the end of the file?</p>
                  </feedback>
                </choice>
              </choices>
            </exercise>
            <p>It kind of works and we see the day from the first line (Sat), but
                                then the program fails with a traceback error. What went wrong? What
                                messed-up data caused our elegant, clever, and very Pythonic program
                                to fail?</p>
            <p>You could stare at it for a long time and puzzle through it or ask
                                someone for help, but the quicker and smarter approach is to add a
                                <c>print</c> statement. The best place to add the print
                                statement is right before the line where the program failed and
                                print out the data that seems to be causing the failure.</p>
            <p>Now this approach may generate a lot of lines of output, but at
                                least you will immediately have some clue as to the problem at hand.
                                So we add a print of the variable <c>words</c> right before
                                line five. We even add a prefix <q>Debug:</q> to the line so we can keep
                                our regular output separate from our debug output.</p>
            <program language="python">
              <input>
for line in fhand:
    words = line.split()
    print('Debug:', words)
    if words[0] != 'From' : continue
    print(words[2])
</input>
            </program>
            <p>When we run the program, a lot of output scrolls off the screen but
                                at the end, we see our debug output and the traceback so we know
                                what happened just before the traceback.</p>
            <pre>Debug: ['X-DSPAM-Confidence:', '0.8475']
Debug: ['X-DSPAM-Probability:', '0.0000']
Debug: []
Traceback (most recent call last):
  File "search9.py", line 6, in &lt;module&gt;
    if words[0] != 'From' : continue
IndexError: list index out of range</pre>
            <p>Each debug line is printing the list of words which we get when we
                                <c>split</c> the line into words. When the program fails, the
                                list of words is empty <c>[]</c>. If we open the file in a text editor
                                and look at the file, at that point it looks as follows:</p>
            <pre>X-DSPAM-Result: Innocent
X-DSPAM-Processed: Sat Jan  5 09:14:16 2008
X-DSPAM-Confidence: 0.8475
X-DSPAM-Probability: 0.0000

Details: http://source.sakaiproject.org/viewsvn/?view=rev&amp;rev=39772</pre>
            <p>The error occurs when our program encounters a blank line! Of course
                                there are <q>zero words</q> on a blank line. Why didn't we think of that
                                when we were writing the code? When the code looks for the first
                                word (<c>word[0]</c>) to check to see if it matches <q>From</q>, we get an
                                <q>index out of range</q> error.</p>
            <p>This of course is the perfect place to add some
                                <em>guardian</em> code to avoid checking the first word if
                                the first word is not there. There are many ways to protect this
                                code; we will choose to check the number of words we have before we
                                look at the first word:</p>
            <program xml:id="listDebug_file" interactive="activecode" language="python">
              <input>
fhand = open('mboxShort1.txt')
count = 0
for line in fhand:
    words = line.split()
    # print 'Debug:', words
    if len(words) == 0 : continue
    if words[0] != 'From' : continue
    print(words[2])
        </input>
            </program>
            <p>First we commented out the debug print statement instead of removing
                                it, in case our modification fails and we need to debug again. Then
                                we added a guardian statement that checks to see if we have zero
                                words, and if so, we use <c>continue</c> to skip to the next
                                line in the file.</p>
            <p>We can think of the two <c>continue</c> statements as helping
                                us refine the set of lines which are <q>interesting</q> to us and which
                                we want to process some more. A line which has no words is
                                <q>uninteresting</q> to us so we skip to the next line. A line which does
                                not have <q>From</q> as its first word is uninteresting to us so we skip
                                it.</p>
            <p>The program as modified runs successfully, so perhaps it is correct.
                                Our guardian statement does make sure that the <c>words[0]</c>
                                will never fail, but perhaps it is not enough. When we are
                                programming, we must always be thinking, <q>What might go wrong?</q></p>
                            </paragraphs>
</section>
