<?xml version="1.0"?>
<section xml:id="lists_mixed-up-code-questions">
  <title>Mixed-Up Code Questions</title>

  <exercise label="list_MUC_password_creator" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function <c>password_maker(word_list)</c> that takes a list of words, <c>word_list</c> and returns a string with the first and last character of
            each word in a list. For example, <c>password_maker("show", "me", "the", "money")</c> would return <c>swmetemy</c>.</p>
    </statement>
    <blocks>
      <block order="2">
        <cline>def password_maker(word_list):</cline>
      </block>
      <block order="7">
        <cline>    password = ""</cline>
      </block>
      <block order="5">
        <cline>    for word in word_list:</cline>
      </block>
      <block order="6">
        <cline>        first_char = word[0]</cline>
      </block>
      <block order="8">
        <cline>        last_char = word[-1]</cline>
      </block>
      <block order="9">
        <cline>        password += first_char</cline>
      </block>
      <block order="1">
        <cline>        password += last_char</cline>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>    return password</cline>
        </choice>
        <choice>
          <cline>    return word_list </cline>
        </choice>
      </block>
    </blocks>
  </exercise>

  <exercise label="list_MUC_rainfall_v2" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function <c>avg_rainfall(day_list)</c> that takes a list with the amount of rain for each day.
            There are some problems with the equipment, so ignore days that have a negative number for the amount of rain. Calculate the average rainfall as the sum of the non-negative values divided by the number of non-negative values. If at least one day has a non-negative rainfall return <c>Average: (average)</c> and otherwise return <c>No rain</c>.  For example,  <c>avg_rainfall([30,-2, 0])</c> should return <c>Average: 15</c> and <c>avg_rainfall([-3, -2])</c> should return <c>No rain</c>.</p>
    </statement>
    <blocks>
      <block order="4">
        <cline>def avg_rainfall(day_list):</cline>
      </block>
      <block order="3">
        <cline>    sum = 0</cline>
        <cline>    count = 0</cline>
      </block>
      <block order="12">
        <cline>    for day in day_list:</cline>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>        if day &gt;= 0:</cline>
        </choice>
        <choice>
          <cline>        if day &gt; 0: </cline>
        </choice>
      </block>
      <block order="11">
        <cline>            sum = sum + day</cline>
        <cline>            count = count + 1</cline>
      </block>
      <block order="7">
        <cline>    if count &gt; 0:</cline>
      </block>
      <block order="10">
        <cline>        avg = sum / count</cline>
      </block>
      <block order="8">
        <choice correct="yes">
          <cline>        return "Average: " + str(avg)</cline>
        </choice>
        <choice>
          <cline>        return "Average: " + avg </cline>
        </choice>
      </block>
      <block order="5">
        <cline>    else:</cline>
      </block>
      <block order="6">
        <cline>        return "No rain"</cline>
      </block>
    </blocks>
  </exercise>

  <exercise label="list_MUC_mix_items" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function <c>mix</c> that takes a list <c>list1</c> and returns a new list with the first and last items from the original list swapped.  For example, <c>mix([3, 2, 1, 4]</c>
            should return <c>[4, 2, 1, 3]</c>.</p>
    </statement>
    <blocks>
      <block order="2">
        <cline>def mix(list1):</cline>
      </block>
      <block order="7">
        <cline>    first = list1[0]</cline>
        <cline>    last = list1[-1]</cline>
      </block>
      <block order="4">
        <cline>    out = [last]</cline>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>    out.extend(list1[1:-1])</cline>
        </choice>
        <choice>
          <cline>    out.extend(list1[1:-2]) </cline>
        </choice>
      </block>
      <block order="8">
        <choice correct="yes">
          <cline>    out.append(first)</cline>
        </choice>
        <choice>
          <cline>    out.extend(first) </cline>
        </choice>
      </block>
      <block order="6">
        <cline>    return out</cline>
      </block>
    </blocks>
  </exercise>

  <exercise label="list_MUC_discount" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function <c>discount(price_list)</c> that takes a list of prices and returns a new list with the original price reduced by half.
            Limit each price to two digits after the decimal by rounding to the closest value.  Hint, you can use the <c>round</c> function to do this.</p>
    </statement>
    <blocks>
      <block order="3">
        <cline>def discount(price_list):</cline>
      </block>
      <block order="4">
        <cline>    discounts = []</cline>
      </block>
      <block order="6">
        <cline>    for price in price_list:</cline>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline>        new_price = round(price / 2, 2)</cline>
        </choice>
        <choice>
          <cline>        new_price = price / 2 </cline>
        </choice>
      </block>
      <block order="8">
        <choice correct="yes">
          <cline>        discounts.append(new_price)</cline>
        </choice>
        <choice>
          <cline>        discounts.extend(new_price) </cline>
        </choice>
      </block>
      <block order="1">
        <cline>    return discounts</cline>
      </block>
    </blocks>
  </exercise>

  <exercise label="list_MUC_append_if_a" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function <c>filter_a(word_list)</c> that takes a list of words, <c>word_list</c> and returns a new list with only the words in <c>word_list</c> that start with the letter <c>a</c>.
            For example, <c>filter_a(['a', 'bye', 'above'])</c> should return <c>['a', 'above']</c>.</p>
    </statement>
    <blocks>
      <block order="6">
        <cline>def filter_a(word_list):</cline>
      </block>
      <block order="4">
        <cline>    res = []</cline>
      </block>
      <block order="7">
        <cline>    for word in word_list:</cline>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline>        if word[0] == 'a':</cline>
        </choice>
        <choice>
          <cline>        if word[0] = 'a': </cline>
        </choice>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>            res.append(word)</cline>
        </choice>
        <choice>
          <cline>            word_list.append(res) </cline>
        </choice>
      </block>
      <block order="2">
        <cline>    return res</cline>
      </block>
    </blocks>
  </exercise>

  <exercise label="list_MUC_add_vocab" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function <c>vocab_list</c> that takes two lists: <c>terms</c> and <c>vocab</c>. It should loop through the list of terms and add each item to
            <c>vocab</c> if it is not already in that list. It should return the list <c>vocab</c>.</p>
    </statement>
    <blocks>
      <block order="2">
        <cline>def vocab_list(terms, vocab):</cline>
      </block>
      <block order="3">
        <cline>    for word in terms:</cline>
      </block>
      <block order="9">
        <choice correct="yes">
          <cline>    if response not in wordList:</cline>
        </choice>
        <choice>
          <cline>    if response in wordList: </cline>
        </choice>
      </block>
      <block order="1">
        <cline>        vocabulary.append(response)</cline>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline>        if word not in vocab:</cline>
        </choice>
        <choice>
          <cline>        if word !in vocab: </cline>
        </choice>
      </block>
      <block order="6">
        <choice correct="yes">
          <cline>            vocab.append(word)</cline>
        </choice>
        <choice>
          <cline>            word.append(vocab) </cline>
        </choice>
      </block>
      <block order="7">
        <cline>    return vocab</cline>
      </block>
    </blocks>
  </exercise>

  <!--
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=list_MUC_Password_creator_sq data-questionlist='list_MUC_password_creator, list_MUC_password_creator_ac'         data-toggleoptions="toggle, " data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: list_MUC_password_creator, list_MUC_password_creator_ac&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=list_MUC_rainfall_v2_sq data-questionlist='list_MUC_rainfall_v2, list_MUC_rainfall_v2_ac'         data-toggleoptions="toggle, " data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: list_MUC_rainfall_v2, list_MUC_rainfall_v2_ac&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=list_MUC_mix_items_sq data-questionlist='list_MUC_mix_items, list_MUC_mix_items_ac'         data-toggleoptions="toggle, " data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: list_MUC_mix_items, list_MUC_mix_items_ac&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=list_MUC_discount_sq data-questionlist='list_MUC_discount, list_MUC_discount_ac'         data-toggleoptions="toggle, " data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: list_MUC_discount, list_MUC_discount_ac&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=list_MUC_append_if_a_sq data-questionlist='list_MUC_append_if_a, list_MUC_append_if_a_ac'         data-toggleoptions="toggle, " data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: list_MUC_append_if_a, list_MUC_append_if_a_ac&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=list_MUC_add_vocab_sq data-questionlist='list_MUC_add_vocab, list_MUC_add_vocab_ac'         data-toggleoptions="toggle, " data-togglelabels="togglelabels:" data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic questi">
  <title>Mixed-Up Code Questions</title>on ...&lt;br/&gt;Selecting from: list_MUC_add_vocab, list_MUC_add_vocab_ac&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
  -->
</section>
