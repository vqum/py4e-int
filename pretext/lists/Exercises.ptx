<?xml version="1.0"?>
<exercises xml:id="lists_multiple-choice-questions">
  <title>Multiple Choice Questions</title>
  <exercise label="listEx_MC1">
    <statement>
      <p>Q-1: What is returned by the following function?</p>
      <program language="python">
        <input>
def slice_exercise():
    alist = [3, 67, "cat", [56, 57, "dog"], [ ], 3.14, False]
    print(alist[2:4])
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>[ [ ], 3.14, False]</p>
        </statement>
        <feedback>
          <p>Incorrect! This slice starts at index 4 and goes up to and includes the last item.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>["cat", [56, 57, "dog"]]</p>
        </statement>
        <feedback>
          <p>Correct! The word "cat" is at index 2 and [56, 57, "dog"] is what you get when index 4 is exclusive.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>[ [56, 57, "dog"], [ ], 3.14, False]</p>
        </statement>
        <feedback>
          <p>Incorrect! Remember that index values start at 0!</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>[27, "cat"]</p>
        </statement>
        <feedback>
          <p>Incorrect! This slice starts at index 4 and goes up to and includes the last item.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="listEx_MC2">
    <statement>
      <p>Q-2: What is returned by the following function?</p>
      <program language="python">
        <input>
def len_of_list():
    alist = [3, 67, "cat", 3.14, False]
    return len(alist)
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>4</p>
        </statement>
        <feedback>
          <p>Incorrect! The built in function, len, returns the actual number of items in the list, not the maximum index value.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>5</p>
        </statement>
        <feedback>
          <p>Correct! There are 5 items in this list.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>False</p>
        </statement>
        <feedback>
          <p>Incorrect! The built in function, len, returns the actual number of items in the list.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>3.14</p>
        </statement>
        <feedback>
          <p>Incorrect! The built in function, len, returns the actual number of items in the list.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="listEx_MC3">
    <statement>
      <p>Q-3: What is returned by the following function?</p>
      <program language="python">
        <input>
def indexing_and_upper():
    alist = [3, 67, "cat", [56, 57, "dog"], [ ], 3.14, False]
    return alist[2].upper()
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Error, you cannot use the upper method on a list.</p>
        </statement>
        <feedback>
          <p>Incorrect! alist[2] is the string cat so the upper method is legal</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>2</p>
        </statement>
        <feedback>
          <p>Incorrect! 2 is the index.  We want the item at that index.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>CAT</p>
        </statement>
        <feedback>
          <p>Correct! The string cat is upper cased to become CAT.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>FALSE</p>
        </statement>
        <feedback>
          <p>Incorrect! False is at the maximum index, not the second index.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="listEx_MC4">
    <statement>
      <p>Q-4: What is returned by the following function?</p>
      <program language="python">
        <input>
def list_within_list():
    alist = [3, 67, "cat", [56, 57, "dog"], [ ], 3.14, False]
    return alist[2][0]
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>56</p>
        </statement>
        <feedback>
          <p>Indexes start with 0, not 1.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>c</p>
        </statement>
        <feedback>
          <p>Yes, the first character of the string at index 2 is c</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>cat</p>
        </statement>
        <feedback>
          <p>cat is the item at index 2 but then we index into it further.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Error, you cannot have two index values unless you are using slicing.</p>
        </statement>
        <feedback>
          <p>Using more than one index is fine.  You read it from left to right.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="listEx_MC5">
    <statement>
      <p>Q-5: What is returned by the following function?</p>
      <program language="python">
        <input>
def list_transformation():
    alist = [4, 2, 8, 6, 5]
    blist = [alist] * 2
    alist[3] = 999
    return blist
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>[4, 2, 8, 999, 5, 4, 2, 8, 999, 5]</p>
        </statement>
        <feedback>
          <p>[alist] * 2 creates a list containing alist repeated 2 times</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>[[4, 2, 8, 999, 5], [4, 2, 8, 999, 5]]</p>
        </statement>
        <feedback>
          <p>Yes, blist contains two references, both to alist.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>[4, 2, 8, 6, 5]</p>
        </statement>
        <feedback>
          <p>print(blist)</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>[[4, 2, 8, 999, 5], [4, 2, 8, 6, 5]]</p>
        </statement>
        <feedback>
          <p>blist contains two references, both to alist so changes to alist appear both times.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="listEx_MC6">
    <statement>
      <p>Q-6: What is returned by the following function?</p>
      <program language="python">
        <input>
def list_transformation():
    alist = [4, 2, 8, 6, 5]
    blist = [ ]
    for item in alist:
        blist.append(item+5)
    return blist
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>[4, 2, 8, 6, 5]</p>
        </statement>
        <feedback>
          <p>5 is added to each item before the append is performed.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>[4, 2, 8, 6, 5, 5]</p>
        </statement>
        <feedback>
          <p>There are too many items in this list.  Only 5 append operations are performed.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>[9, 7, 13, 11, 10]</p>
        </statement>
        <feedback>
          <p>Yes, the for loop processes each item of the list.  5 is added before it is appended to blist.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Error, you cannot concatenate inside an append.</p>
        </statement>
        <feedback>
          <p>5 is added to each item before the append is performed.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="listEx_MC7">
    <statement>
      <p>Q-7: Which method would you use to figure out the position of an item in a list?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>.pop()</p>
        </statement>
        <feedback>
          <p>pop removes and returns items (default is to remove and return the last item in the list)</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>.insert()</p>
        </statement>
        <feedback>
          <p>insert will add an item at whatever position is specified.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>.count()</p>
        </statement>
        <feedback>
          <p>count returns the number of times something occurs in a list</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>.index()</p>
        </statement>
        <feedback>
          <p>Yes, index will return the position of the first occurrence of an item.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="listEx_MC8">
    <statement>
      <p>Q-8: Which method is best to use when adding an item to the end of a list?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>.insert()</p>
        </statement>
        <feedback>
          <p>While you can use insert, it is not the best method to use because you need to specify that you want to stick the new item at the end.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>.pop()</p>
        </statement>
        <feedback>
          <p>pop removes an item from a list</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>.append()</p>
        </statement>
        <feedback>
          <p>Yes, though you can use insert to do the same thing, you don't need to provide the position.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>.remove()</p>
        </statement>
        <feedback>
          <p>remove gets rid of the first occurrence of any item that it is told. It does not add an item.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="listEx_MC9">
    <statement>
      <p>Q-9: Given that we want to accumulate the total sum of a list of numbers, which of the following accumulator patterns would be appropriate?</p>
      <ol marker="I">
        <li>
      <program language="python">
        <input>
def find_sum():
    nums = [4, 5, 2, 93, 3, 5]
    s = 0
    for n in nums:
        s = s + 1
    return s
</input>
      </program>
    </li>
    <li>
      <program language="python">
        <input>
def find_sum():
    nums = [4, 5, 2, 93, 3, 5]
    s = 0
    for n in nums:
        s = n + n
    return s
</input>
      </program>
    </li>
    <li>
      
      <program language="python">
        <input>
def find_sum():
    nums = [4, 5, 2, 93, 3, 5]
    s = 0
    for n in nums:
        s = s + n
    return s
</input>
      </program>
    </li>
  </ol>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Pattern I</p>
        </statement>
        <feedback>
          <p>This pattern will only count how many items are in the list, not provide the total accumulated value.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Pattern II</p>
        </statement>
        <feedback>
          <p>This would reset the value of s each time the for loop iterated, and so by the end s would be assigned the value of the last item in the list plus the last item in the list.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Pattern III</p>
        </statement>
        <feedback>
          <p>Yes, this will solve the problem.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>none of the above would be appropriate for the problem.</p>
        </statement>
        <feedback>
          <p>One of the patterns above is a correct way to solve the problem.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="listEx_MC10">
    <statement>
      <p>Q-10: Given that we want to accumulate the total number of strings in the list, which of the following accumulator patterns would be appropriate?</p>
      <ol marker="1">
        <li>
      <program language="python">
        <input>
def num_of_strings():
    lst = ['plan', 'answer', 5, 9.29, 'order, items', [4]]
    s = 0
    for n in lst:
        s = s + n
    return s
</input>
      </program>
    </li>
    <li>
      <program language="python">
        <input>
def num_of_strings():
    lst = ['plan', 'answer', 5, 9.29, 'order, items', [4]]
    for item in lst:
        s = 0
        if isinstance(item, str):
            s = s + 1
    return s
</input>
      </program>
    </li>
    <li>
      <program language="python">
        <input>
def num_of_strings():
    lst = ['plan', 'answer', 5, 9.29, 'order, items', [4]]
    s = ""
    for n in lst:
        s = s + n
    return s
</input>
      </program>
    </li>
    <li>
      <program language="python">
        <input>
def num_of_strings():
    lst = ['plan', 'answer', 5, 9.29, 'order, items', [4]]
    s = 0
    for item in lst:
        if isinstance(item, str):
            s = s + 1
</input>
      </program>
    </li>
  </ol>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Pattern 1.</p>
        </statement>
        <feedback>
          <p>How does this solution know that the element of lst is a string and that s should be updated?</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Pattern 2.</p>
        </statement>
        <feedback>
          <p>What happens to s each time the for loop iterates?</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Pattern 3.</p>
        </statement>
        <feedback>
          <p>Reread the prompt again. What do we want to accumulate?</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Pattern 4.</p>
        </statement>
        <feedback>
          <p>Yes, this will solve the problem.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>none of the above would be appropriate for the problem.</p>
        </statement>
        <feedback>
          <p>One of the patterns above is a correct way to solve the problem.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="listEx_MC11">
    <statement>
      <p>Q-11: What will the following code print?</p>
      <program language="python"><input>def mystery(num_list):
    index = 0
    while index &lt; len(num_list):
        num = num_list[index]
        if num == 0:
            num_list.pop(index)
        index += 1

list1 = [3, 0, 2, 0, 0]
mystery(list1)
print(list1)</input></program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>[3, 0, 2, 0, 0]</p>
        </statement>
        <feedback>
          <p>The list is modified by the pop.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>[3, 0, 2]</p>
        </statement>
        <feedback>
          <p>It will pop 0's except for the last one.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>[3, 2]</p>
        </statement>
        <feedback>
          <p>This would be true if it didn't always increment the index.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>[3, 2, 0]</p>
        </statement>
        <feedback>
          <p>Since it always increments the index it will miss the last zero.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="listEx_MC12">
    <statement>
      <p>Q-12: What will the following code print?</p>
      <program language="python"><input>def mystery(num_list):
    sum = 0
    for i in range(0, len(num_list), 2):
        num = num_list[i]
        sum += num
        return sum

list1 = [1, 2, 3, 4, 5]
print(mystery(list1))</input></program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>1</p>
        </statement>
        <feedback>
          <p>It adds 1 to the sum and then returns.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>9</p>
        </statement>
        <feedback>
          <p>This would be true if it didn't return until after the loop finished</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>15</p>
        </statement>
        <feedback>
          <p>This would be true if it didn't return until after the loop finished and the range incremented by 1 rather than 2</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>None</p>
        </statement>
        <feedback>
          <p>This would be true if there wasn't a return statement</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="listEx_MC13">
    <statement>
      <p>Q-13: What will the following code print?</p>
      <program language="python"><input>def mystery(num_list):
    for num in num_list:
        if num &lt; 0:
            return False
        else:
            return True

print(mystery([3, -1, 2]))</input></program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>True</p>
        </statement>
        <feedback>
          <p>It returns true after checking the first num.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>False</p>
        </statement>
        <feedback>
          <p>This would be true if the first number in the list was negative.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>None</p>
        </statement>
        <feedback>
          <p>This would be true if there wasn't a return statement.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>It will not compile</p>
        </statement>
        <feedback>
          <p>This would be true if there was a syntax error.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="listEx_MC14">
    <statement>
      <p>Q-14: What will the following code print?</p>
      <program><input>def mystery(num_list):
    out = []
    for num in num_list:
        if num &gt; 10:
            out.append(num)
    return out


print(mystery([5, 10, 15, 20]))</input></program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>[10, 15, 20]</p>
        </statement>
        <feedback>
          <p>It only adds numbers that are greater than 10</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>[20, 15]</p>
        </statement>
        <feedback>
          <p>This would be true if append added at the front, but it adds at the end</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>[15, 20]</p>
        </statement>
        <feedback>
          <p>It adds all numbers greater than 10 in order.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>[20, 15, 10]</p>
        </statement>
        <feedback>
          <p>This would be true if append added at the front, but it adds at the end and it won't add the 10</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="listEx_MC15">
    <statement>
      <p>Q-15: What will the following code print?</p>
      <program><input>def mystery(num_list):
    out = []
    for i in range(len(num_list) - 1,0,-1):
        num = num_list[i]
        out.append(num)
    return out


print(mystery([5, 10, 15, 20]))</input></program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>[5, 10, 15, 20]</p>
        </statement>
        <feedback>
          <p>It adds the numbers in reverse order</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>[20, 15, 10, 5]</p>
        </statement>
        <feedback>
          <p>This would be true if the end for range was less than 0</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>[5, 10, 15]</p>
        </statement>
        <feedback>
          <p>It adds the numbers in reverse order</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>[20, 15, 10]</p>
        </statement>
        <feedback>
          <p>It adds the numbers in reverse order, but stops before the item at index 0.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</exercises>
