<?xml version="1.0"?>
<section xml:id="exp_questions-for-cognitive-load-experiment-a-original">
  <title>Questions for Cognitive Load Experiment - A - Original</title>
  <p>Try to solve the following mixed up code problems. You can use the <q>Help Me</q> button
            to make the problem easier if you have made at least three attempts to solve the
            problem.  After you solve each problem, please answer the poll as well.</p>
  <exercise label="exp1_pp1a_orig" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Put the blocks in order to define the function has22 to return True if there are at least two items in the list nums that are adjacent and both equal to 2, otherwise return False. For example, return True for [1, 2, 2] since there are two adjacent items equal to 2 (at index 1 and 2) and False for [2, 1, 2] since the 2's are not adjacent.</p>
    </statement>
    <blocks>
      <block order="5">
        <cline>def has22(nums):</cline>
      </block>
      <block order="6">
        <cline>    i = 1</cline>
      </block>
      <block order="10" correct="no">
        <cline>    i = 0 </cline>
      </block>
      <block order="7">
        <cline>    while i &lt; len(nums):</cline>
      </block>
      <block order="9">
        <cline>        if nums[i] == 2 and nums[i-1] == 2:</cline>
      </block>
      <block order="2" correct="no">
        <cline>        if nums[i] == 2 and nums[i+1] == 2: </cline>
      </block>
      <block order="1">
        <cline>            return True</cline>
      </block>
      <block order="4" correct="no">
        <cline>            return true </cline>
      </block>
      <block order="3">
        <cline>        i += 1</cline>
      </block>
      <block order="8">
        <cline>    return False</cline>
      </block>
    </blocks>
  </exercise>
  <exercise runestone="exp1_pp1a_poll_orig"/>
  <exercise label="exp1_q2_write_orig">
    <statement>
      <p>Finish the function to define <c>countInRange</c> that returns a count of the number of times that a <c>target</c> value appears in a list between the <c>start</c> and <c>end</c> indices (inclusive). For example, <c>countInRange(1,2,4,[1, 2, 1, 1, 1, 1])</c> should return 3 since there are three 1's between index 2 and 4 inclusive.</p>
    </statement>
    <program xml:id="exp1_q2_write_orig_editor" interactive="activecode" language="python">
      <input>
def countInRange(target, start, end, numList):

====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(countInRange(2, 0, 2, [1, 2, 2]), 2, 'countInRange(2, 0, 2, [1, 2, 2])')
        self.assertEqual(countInRange(1, 2, 4, [1, 2, 1, 1, 1, 1]), 3, 'countInRange(1, 2, 4, [1, 2, 1, 1, 1, 1])')
        self.assertEqual(countInRange(1, 0, 4, [1, 2, 1, 1, 1, 1]), 4, 'countInRange(1, 0, 4, [1, 2, 1, 1, 1, 1])')
        self.assertEqual(countInRange(2, 1, 2, [1, 2, 2]), 2, 'countInRange(2, 1, 2, [1, 2, 2])')
        self.assertEqual(countInRange(3, 1, 2, [1, 2, 2]), 0, 'countInRange(3, 1, 2, [1, 2, 2])')
        self.assertEqual(countInRange(3, 1, 2, [3, 3, 3, 3]), 2, 'countInRange(3, 1, 2, [3, 3, 3, 3])')


myTests().main()
        </input>
    </program>
  </exercise>
  <exercise runestone="exp1_q2_write_poll_orig"/>
  <exercise label="exp1_pp3_orig" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Put the blocks in order to define the function <c>diffMaxMin</c> to return the difference between the largest and smallest value in the passed list of numbers (<c>nums</c>). For example, <c>diffMaxMin([1,2,3])</c> should return <c>2</c> since the difference between 3 and 1 is 2.</p>
    </statement>
    <blocks>
      <block order="3">
        <choice correct="yes">
          <cline>def diffMaxMin(nums):</cline>
        </choice>
        <choice>
          <cline>def diffMaxMin(nums) </cline>
        </choice>
      </block>
      <block order="5">
        <cline>    large = max(nums)</cline>
        <cline>    small = min(nums)</cline>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>    return large - small</cline>
        </choice>
        <choice>
          <cline>    return small - large </cline>
        </choice>
      </block>
    </blocks>
  </exercise>
  <exercise runestone="exp1_pp3_poll_orig"/>
  <exercise label="exp1_q4_total_values_orig">
    <statement>
      <p>Finish the function <c>total_values</c> that takes a dictionary (<c>dict</c>) and returns the total of the values in the dictionary. For example, <c>total_dict_values({'red': 3, 'blue': 2, 'green': 20})</c> would return 25.</p>
    </statement>
    <program xml:id="exp1_q4_total_values_orig_editor" interactive="activecode" language="python">
      <input>
def total_values(dict):

====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(total_values({'red':2, 'blue':3, 'green':20}),25, "total_values({'red':2, 'blue':3, 'green':20})")
        self.assertEqual(total_values({'a': 3}), 3, "total_values({'a': 3})")
        self.assertEqual(total_values({'a': 3, 'b': -5}), -2, "total_values({'a': 3, 'b': -5})")
        self.assertEqual(total_values({'a': 3, 'b': -3}), 0, "total_values({'a': 3, 'b': -3})")
        self.assertEqual(total_values({}), 0, "total_values({})")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise runestone="exp1_q4_total_values_poll_orig"/>
  <exercise label="exp1_q5_pp_orig" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Put the blocks in order to define the function <c>get_names</c> that takes a list of dictionaries and returns a list of strings with the names from the dictionaries. The key for the first name is <c>first</c> and the key for the last name is <c>last</c>. Return a list of the full names (first last) as a string. If the <c>first</c> or <c>last</c> key is missing in the dictionary use <c>Unknown</c>.  For example, <c>[{'first': 'Ann', 'last': 'Brown'}, {'first': 'Darius'}]</c> should return <c>['Ann Brown', 'Darius Unknown']</c>.</p>
    </statement>
    <blocks>
      <block order="2">
        <cline>def get_names(list_of_dict):</cline>
      </block>
      <block order="4">
        <cline> name_list = []</cline>
      </block>
      <block order="7">
        <cline> for p_dict in list_of_dict:</cline>
      </block>
      <block order="9">
        <choice correct="yes">
          <cline>     first = p_dict.get('first', 'Unknown')</cline>
          <cline>     last = p_dict.get('last', 'Unknown')</cline>
        </choice>
        <choice>
          <cline>     first = p_dict.get('first', None)</cline>
          <cline>     last = p_dict.get('last',  None) </cline>
        </choice>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>     name = first + " " + last</cline>
        </choice>
        <choice>
          <cline>     name = first + last </cline>
        </choice>
      </block>
      <block order="8">
        <cline>     name_list.append(name)</cline>
      </block>
      <block order="6">
        <cline> return name_list</cline>
      </block>
    </blocks>
  </exercise>
  <exercise runestone="exp1_q5_pp_poll_orig"/>
</section>
