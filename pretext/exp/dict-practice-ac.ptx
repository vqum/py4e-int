<?xml version="1.0"?>
<section xml:id="exp_dictionary-practice-write-code">
  <title>Dictionary Practice - Write Code</title>
  <p>Try to solve the following mixed up code problems. You can use the <q>Help Me</q> button
            to make the problem easier if you have made at least three attempts to solve the
            problem.  After you solve each problem, please answer the poll as well.</p>
  <exercise label="dp_two_list_to_dict">
    <statement>
      <p>Finish the function <c>make_dir</c> below which takes two lists (<c>l1</c> and <c>l2</c>) of equal length and returns a dictionary where the items in <c>l1</c> are the keys and the items in <c>l2</c> are the values.  For example, <c>make_dir(['a', 'c'], [5, 0])</c> returns <c>{'a': 5, 'c': 0}</c>.</p>
    </statement>
    <program xml:id="dp_two_list_to_dict_editor" interactive="activecode" language="python">
      <input>
def make_dir(l1, l2):

====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(make_dir(['a', 'b', 'c'], [0, 3, 2]), {'a': 0, 'b': 3, 'c': 2}, "make_dir(['a', 'b', 'c'], [0, 3, 2])")
        self.assertEqual(make_dir(['a'], [5]), {'a': 5}, "make_dir(['a'], [5])")
        self.assertEqual(make_dir(['a', 'c'], [5, 0]), {'a': 5, 'c': 0}, "make_dir(['a', 'c'], [5, 0])")
        self.assertEqual(make_dir(['gray', 'blue'], [-3, 2]), {'gray': -3, 'blue': 2}, "make_dir(['gray', 'blue'], [-3, 2])")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="dp_list_of_tuples_to_dict">
    <statement>
      <p>Finish the function <c>make_dir</c> below which takes a list of tuples <c>tuple_list</c> and returns a dictionary where the first item in each tuple is the key and the second is the value. For example, <c>make_dir([('gray', -3), ('blue', 2)])</c> returns <c>{'gray': -3, 'blue': 2}</c>.</p>
    </statement>
    <program xml:id="dp_list_of_tuples_to_dict_editor" interactive="activecode" language="python">
      <input>
def make_dir(tuple_list):

====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(make_dir([('a', 0), ('b', 3), ('c', 2)]), {'a': 0, 'b': 3, 'c': 2}, "make_dir([('a', 0), ('b', 3), ('c', 2)])")
        self.assertEqual(make_dir([('a', 5)]), {'a': 5}, "make_dir([('a', 5)])")
        self.assertEqual(make_dir([('gray', -3), ('blue', 2)]), {'gray': -3, 'blue': 2}, "make_dir([('gray', -3), ('blue', 2)])")



myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="dp_get_tuple_from_dict">
    <statement>
      <p>Finish the function <c>get_tuple</c> below which takes a dictionary <c>dict</c> and a <c>key</c> and if the <c>key</c> is found in the dictionary it returns <c>(key, value)</c> otherwise it returns <c>(key, 'Not Found')</c>.  For example, <c>get_tuple({'a': 0}, 'c')</c> returns <c>('c', 'Not Found')</c>, and <c>get_tuple({'a': 0}, 'a')</c> returns <c>('a', 0)</c>.</p>
    </statement>
    <program xml:id="dp_get_tuple_from_dict_editor" interactive="activecode" language="python">
      <input>
def get_tuple(dict, key):

====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(get_tuple({'a': 0, 'b': 3, 'c': 2}, 'c'), ('c', 2), "get_tuple({'a': 0, 'b': 3, 'c': 2}, 'c')")
        self.assertEqual(get_tuple({'a': 0}, 'c'), ('c', 'Not Found'), "get_tuple({'a': 0}, 'c')")
        self.assertEqual(get_tuple({'a': 0}, 'a'), ('a', 0), "get_tuple({'a': 0}, 'a')")
        self.assertEqual(get_tuple({'a': 0, 'b': 3, 'c': 2}, 'b'), ('b', 3), "get_tuple({'a': 0, 'b': 3, 'c': 2}, 'b')")



myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="dp_greater_dict">
    <statement>
      <p>Finish the function <c>greater_dict</c> below which takes a dictionary <c>d</c> and an integer <c>cutoff</c> and returns a new dictionary that contains only the key-value pairs where the value is greater than or equal to the cutoff.  For example, <c>greater_dict({'a': 20, 'b': 10}, 15)</c> returns <c>{'a': 20}</c>.</p>
    </statement>
    <program xml:id="dp_greater_dict_editor" interactive="activecode" language="python">
      <input>
def greater_dict(d, cutoff):


====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(greater_dict({'a': 20, 'b': 10}, 15), {'a': 20}, "greater_dict({'a': 20, 'b': 10}, 15)")
        self.assertEqual(greater_dict({'a': 20, 'b': 10}, 30), {}, "greater_dict({'a': 20, 'b': 10}, 30)")
        self.assertEqual(greater_dict({'a': 20, 'b': 10}, 5), {'a': 20, 'b':10}, "greater_dict({'a': 20, 'b': 10}, 5)")
        self.assertEqual(greater_dict({'a': 20, 'b': 10, 'c': 25}, 15), {'a': 20, 'c': 25}, "greater_dict({'a': 20, 'b': 10, 'c': 25}, 15)")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="dp_get_counts_dict">
    <statement>
      <p>Finish the <c>get_counts</c> function below which takes a list of strings <c>s_list</c> and returns a dictionary that has the number of times each unique string appears in the list.  For example, <c>get_counts(['a','b','a'])</c> returns <c>{'a':2, 'b':1}</c>.</p>
    </statement>
    <program xml:id="dp_get_counts_dict_editor" interactive="activecode" language="python">
      <input>
def get_counts(s_list):


====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(get_counts(['a','b','a']), {'a':2, 'b':1}, "get_counts('a','b','a')")
        self.assertEqual(get_counts([]), {}, "get_counts([])")
        self.assertEqual(get_counts(['a','a','a']), {'a':3}, "get_counts('a','a','a')")
        self.assertEqual(get_counts(['b','a','a']), {'b':1, 'a':2}, "get_counts('b','a','a')")


myTests().main()
        </input>
    </program>
  </exercise>
</section>
