<?xml version="1.0"?>
<section xml:id="pictures_mixed-up-code-exercises">
  <title>Mixed-Up Code Exercises</title>
  <exercise label="mixedupcode_pictures_pp1" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function <c>removeGreen(img)</c> that sets the green in all pixels in image <c>img</c> to 0.</p>
    </statement>
    <blocks>
      <block order="5">
        <cline>from image import *</cline>
      </block>
      <block order="7">
        <cline>def removeGreen(img):</cline>
      </block>
      <block order="1">
        <cline>        pixels = img.getPixels()</cline>
      </block>
      <block order="3">
        <cline>        for p in pixels:</cline>
      </block>
      <block order="6">
        <cline>                p.setGreen(0)</cline>
      </block>
      <block order="9">
        <cline>                img.updatePixel(p)</cline>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>        win = ImageWin(img.getWidth(), img.getHeight())</cline>
        </choice>
        <choice>
          <cline>        win = ImageWin(img.getHeight(), img.getWidth()) </cline>
        </choice>
      </block>
      <block order="8">
        <cline>        img.draw(win)</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mixedupcode_pictures_ac1">
    <statement>
      <p>Write a function <c>removeGreen(img)</c> that sets the green in all pixels in image <c>img</c> to 0.</p>
    </statement>
    <program xml:id="mixedupcode_pictures_ac1_editor" interactive="activecode" language="python">
      <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
              img = Image('kitten.jpg')
                    removeGreen(img)
                    pixels = img.getPixels()
                    for p in pixels:
                              self.assertEqual(p, 0, 'Checking that the green in each pixel was set to 0.')
myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="mixedupcode_pictures_pp2" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function <c>changeColors(img)</c> that sets the red in all pixels equal to the blue value in the image <c>img</c>. Then, it sets the green and blue in all pixels to 255.</p>
    </statement>
    <blocks>
      <block order="9">
        <cline>from image import *</cline>
      </block>
      <block order="11">
        <cline>def changeColors(img):</cline>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>        pixels = img.getPixels()</cline>
        </choice>
        <choice>
          <cline>        pixels = img.Pixels() </cline>
        </choice>
      </block>
      <block order="6">
        <cline>        for p in pixels:</cline>
      </block>
      <block order="5">
        <cline>                b = p.getBlue()</cline>
      </block>
      <block order="7">
        <cline>                p.setRed(b)</cline>
        <cline>                p.setGreen(255)</cline>
        <cline>                p.setBlue(255)</cline>
      </block>
      <block order="10">
        <cline>                img.updatePixel(p)</cline>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline>        win = ImageWin(img.getWidth(), img.getHeight())</cline>
        </choice>
        <choice>
          <cline>        win = ImageWin(img.getHeight(), img.getWidth()) </cline>
        </choice>
      </block>
      <block order="4">
        <cline>        img.draw(win)</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mixedupcode_pictures_ac2">
    <statement>
      <p>Write a function <c>changeColors(img)</c> that sets the red in all pixels equal to the blue value in the image <c>img</c>. Then, it sets the green and blue in all pixels to 255.</p>
    </statement>
    <program xml:id="mixedupcode_pictures_ac2_editor" interactive="activecode" language="python">
      <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
        def testOne(self):
                img = Image('beach.jpg')
                pixels1 = img.getPixels()
                p = pixels1[-1]
                p2 = pixels[0]
                x1 = p.getBlue()
                x2 = p2.getBlue()

                changeColors(img)
                pixels = img.getPixels()
                p = pixels[-1]
                p2 = pixels[0]
                self.assertEqual(p.getRed(), x1, "Checking that the last pixel's red value was set to the blue value")
                self.assertEqual(p2.getRed(), x2, "Checking that the first pixel's red value was set to the blue value")
                self.assertEqual(p.getBlue(), 255, "Checking that the last blue value was set to 255")
                self.assertEqual(p.getGreen(), 255, "Checking that the last green value was set to 255")
myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="mixedupcode_pictures_pp3" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function <c>reduceGreen(img)</c> that reduces the green in all pixels by 75% in image <c>img</c>.</p>
    </statement>
    <blocks>
      <block order="11">
        <cline>from image import *</cline>
      </block>
      <block order="5">
        <cline>def reduceGreen(img):</cline>
      </block>
      <block order="6">
        <choice correct="yes">
          <cline>        pixelList = img.getPixels()</cline>
        </choice>
        <choice>
          <cline>        pixelList = img.Pixels() </cline>
        </choice>
      </block>
      <block order="3">
        <cline>        for p in pixelList:</cline>
      </block>
      <block order="8">
        <cline>                g = p.getGreen()</cline>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>                p.setGreen(g * 0.25)</cline>
        </choice>
        <choice>
          <cline>                p.setGreen(g * 0.75) </cline>
        </choice>
      </block>
      <block order="10">
        <cline>                img.updatePixel(p)</cline>
      </block>
      <block order="4">
        <cline>        win = ImageWin(img.getWidth(), img.getHeight())</cline>
      </block>
      <block order="9">
        <cline>        img.draw(win)</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mixedupcode_pictures_ac3">
    <statement>
      <p>Write a function <c>reduceGreen(img)</c> that reduces the green in all pixels by 75% in image <c>img</c>.</p>
    </statement>
    <program xml:id="mixedupcode_pictures_ac3_editor" interactive="activecode" language="python">
      <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
        def testOne(self):
                img = Image('kitten.jpg')
                pixels1 = img.getPixels()
                p = pixels1[-1]
                x1 = p.getGreen() * 0.25

                reduceGreen(img)
                pixels = c.getPixels()
                p = pixels[-1]
                c1 = p.getGreen()
                self.assertEqual(c1, x1, "Checking that the green value in the last pixel was reduced by 75%")
myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="mixedupcode_pictures_pp4" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function <c>changeRed(img)</c> that sets all red values equal to 1.5x the blue value in the image <c>img</c>.</p>
    </statement>
    <blocks>
      <block order="10">
        <cline>from image import *</cline>
      </block>
      <block order="2">
        <cline>def changeRed(img):</cline>
      </block>
      <block order="9">
        <cline>        pixels = img.getPixels()</cline>
      </block>
      <block order="11">
        <choice correct="yes">
          <cline>        for p in pixels:</cline>
        </choice>
        <choice>
          <cline>                r = p.getRed() </cline>
        </choice>
      </block>
      <block order="7">
        <cline>                b = p.getBlue()</cline>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline>                p.setRed(b * 1.5)</cline>
        </choice>
        <choice>
          <cline>                r.setRed(b * 1.5) </cline>
        </choice>
      </block>
      <block order="8">
        <cline>                img.updatePixel(p)</cline>
      </block>
      <block order="4">
        <cline>        win = ImageWin(img.getWidth(), img.getHeight())</cline>
      </block>
      <block order="1">
        <cline>        img.draw(win)</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mixedupcode_pictures_ac4">
    <statement>
      <p>Write a function <c>changeRed</c> that sets all red values equal to 1.5x the blue value in the image <c>img</c>.</p>
    </statement>
    <program xml:id="mixedupcode_pictures_ac4_editor" interactive="activecode" language="python">
      <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
        def testOne(self):
                img = Image('kitten.jpg')
                pixels1 = img.getPixels()
                p = pixels1[-1]
                x1 = p.getBlue() * 1.5

                changeRed(img)
                pixels = img.getPixels()
                p = pixels[-1]
                c1 = p.getRed()
                self.assertEqual(c1, x1, "Checking that the red value was set to 1.5x the blue value")
myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="mixedupcode_pictures_pp_5" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function <c>modifyColors(img)</c> that decreases the red to 60% of its original value, increases the blue by 60% of its original value, and sets the green to 0 in the image <c>img</c>.</p>
    </statement>
    <blocks>
      <block order="6">
        <cline>from image import *</cline>
      </block>
      <block order="2">
        <cline>def modifyColors(img):</cline>
      </block>
      <block order="9">
        <cline>        pixels = img.getPixels()</cline>
      </block>
      <block order="4">
        <cline>        for p in pixels:</cline>
      </block>
      <block order="10">
        <cline>                r = p.getRed()</cline>
        <cline>                b = p.getBlue()</cline>
      </block>
      <block order="11">
        <choice correct="yes">
          <cline>                p.setRed(r * 0.6)</cline>
          <cline>                p.setBlue(b * 1.6)</cline>
          <cline>                p.setGreen(0)</cline>
        </choice>
        <choice>
          <cline>                p.setRed(r / 0.6)</cline>
          <cline>                p.setBlue(b * 0.6)</cline>
          <cline>                p.setGreen(0) </cline>
        </choice>
      </block>
      <block order="7">
        <cline>                img.updatePixel(p)</cline>
      </block>
      <block order="8">
        <cline>        win = ImageWin(img.getWidth(), img.getHeight())</cline>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>        img.draw(win)</cline>
        </choice>
        <choice>
          <cline>        img.draw() </cline>
        </choice>
      </block>
    </blocks>
  </exercise>
  <exercise label="mixedupcode_pictures_ac5">
    <statement>
      <p>Write a function <c>modifyColors(img)</c> that decreases the red to 60% of its original value, increases the blue by 60% of its original value, and sets the green to 0 in the image <c>img</c>.</p>
    </statement>
    <program xml:id="mixedupcode_pictures_ac5_editor" interactive="activecode" language="python">
      <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
        def testOne(self):
                img = Image("beach.jpg")
                pixels1 = img.getPixels()
                p = pixels1[1]
                x1 = (p.getRed() * 0.6)
                x2 = (p.getBlue() * 1.6)

                modifyColors(img)
                pixels = img.getPixels()
                p = pixels[1]
                c1 = p.getRed()
                c2 = p.getBlue()
                c3 = p.getGreen()
                self.assertEqual(1.2, x1, "Checking that red value was reduced to 60% of original value")
                self.assertEqual(1.6, x2, "Checking that blue value increased by 60% of original value")
                self.assertEqual(c3, 0, "Checking that green value was set to 0")
myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="mixedupcode_pictures_pp6" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function <c>imageToWhite(img)</c> that makes the image <c>img</c> completely white.</p>
    </statement>
    <blocks>
      <block order="6">
        <choice correct="yes">
          <cline>from image import *</cline>
        </choice>
        <choice>
          <cline>from picture import * </cline>
        </choice>
      </block>
      <block order="2">
        <cline>def imageToWhite(img):</cline>
      </block>
      <block order="3">
        <cline>        pixels = img.getPixels()</cline>
        <cline>        for p in pixels:</cline>
      </block>
      <block order="8">
        <choice correct="yes">
          <cline>                p.setRed(255)</cline>
          <cline>                p.setGreen(255)</cline>
          <cline>                p.setBlue(255)</cline>
        </choice>
        <choice>
          <cline>                p.setRed(0)</cline>
          <cline>                p.setGreen(0)</cline>
          <cline>                p.setBlue(0) </cline>
        </choice>
      </block>
      <block order="7">
        <cline>                img.updatePixel(p)</cline>
      </block>
      <block order="1">
        <cline>        win = ImageWin(img.getWidth(), img.getHeight())</cline>
        <cline>        img.draw(win)</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mixedupcode_pictures_ac6">
    <statement>
      <p>Write a function <c>imageToWhite(img)</c> that makes the image <c>img</c> completely white.</p>
    </statement>
    <program xml:id="mixedupcode_pictures_ac6_editor" interactive="activecode" language="python">
      <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
        def testOne(self):
                img = Image("motorcycle.jpg")

                imageToWhite(img)
                pixels = img.getPixels()
                for p in pixels:
                    r = p.getRed()
                    b = p.getBlue()
                    g = p.getGreen()
                    self.assertEqual(r, 255, "Checking that the red value was set to 255")
                    self.assertEqual(b, 255, "Checking that the blue value was set to 255")
                    self.assertEqual(g, 255, "Checking that the green value was set to 255")
myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="mixedupcode_pictures_pp_7" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function <c>alternatingRed(img)</c> that sets the red of every other pixel to 0 in the image <c>img</c>.</p>
    </statement>
    <blocks>
      <block order="6">
        <cline>from image import *</cline>
      </block>
      <block order="3">
        <cline>def alternatingRed(img):</cline>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline>        for x in range(0, img.getWidth(), 2):</cline>
        </choice>
        <choice>
          <cline>        for x in range(img.getWidth()): </cline>
        </choice>
      </block>
      <block order="8">
        <choice correct="yes">
          <cline>                for y in range(0, img.getHeight(), 2):</cline>
        </choice>
        <choice>
          <cline>                for y in range(img.getHeight()): </cline>
        </choice>
      </block>
      <block order="10">
        <cline>                        p = img.getPixel(x,y)</cline>
      </block>
      <block order="1">
        <cline>                        p.setRed(0)</cline>
      </block>
      <block order="7">
        <cline>                        img.updatePixel(p)</cline>
      </block>
      <block order="9">
        <cline>        win = ImageWin(img.getWidth(), img.getHeight())</cline>
        <cline>        img.draw(win)</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mixedupcode_pictures_ac7">
    <statement>
      <p>Write a function <c>alternatingRed(img)</c> that sets the red of every other pixel to 0 in the image <c>img</c>.</p>
    </statement>
    <program xml:id="mixedupcode_pictures_ac7_editor" interactive="activecode" language="python">
      <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
        def testOne(self):
                img = Image("vangogh.jpg")
                pixels_orig = img.getPixels()
                r_orig1 = img.getPixel(100,100).getRed()
                r_orig2 = img.getPixel(101,100).getRed()


                alternatingRed(img)
                r1 = img.getPixel(100,100).getRed()
                r2 = img.getPixel(101,100).getRed()
                self.assertEqual(r1, 0, "Checking that the values of the even elements have changed to zero")
                self.assertNotEqual(r_orig1, r1, "Checking that the values of the even elements have changed")
                self.assertEqual(r2, 40, "Checking that the values of the odd elements have stayed the same")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="mixedupcode_pictures_pp8" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function <c>changeQuadrantColors(img)</c> that only changes the color of the pixels in the bottom left quadrant of the image <c>img</c>.
            The code should set the red value to the original blue value, the green value to the original red value, and the blue value to the original green value.</p>
    </statement>
    <blocks>
      <block order="5">
        <cline>from image import *</cline>
      </block>
      <block order="6">
        <cline>def changeQuadrantColors(img):</cline>
      </block>
      <block order="1">
        <cline>        halfWidth = (int) (img.getWidth() / 2)</cline>
        <cline>        halfHeight = (int) (img.getHeight() / 2)</cline>
      </block>
      <block order="2">
        <cline>        for x in range(halfWidth):</cline>
      </block>
      <block order="11">
        <choice correct="yes">
          <cline>                for y in range(halfHeight, img.getHeight()):</cline>
        </choice>
        <choice>
          <cline>                for y in range(halfHeight): </cline>
        </choice>
      </block>
      <block order="9">
        <cline>                        p = img.getPixel(x, y)</cline>
      </block>
      <block order="3">
        <cline>                        r = p.getRed()</cline>
        <cline>                        g = p.getGreen()</cline>
        <cline>                        b = p.getBlue()</cline>
      </block>
      <block order="10">
        <cline>                        newPixel = Pixel(b, r, g)</cline>
      </block>
      <block order="4">
        <cline>                        img.setPixel(x, y, newPixel)</cline>
      </block>
      <block order="8">
        <cline>        win = ImageWin(img.getWidth(), img.getHeight())</cline>
        <cline>        img.draw(win)</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mixedupcode_pictures_ac8">
    <statement>
      <p>Write a function <c>changeQuadrantColors(img)</c> that only changes the color of the pixels in the bottom left quadrant of the image <c>img</c>.
            The code should set the red value to the original blue value, the green value to the original red value, and the blue value to the original green value.</p>
    </statement>
    <program xml:id="mixedupcode_pictures_ac8_editor" interactive="activecode" language="python">
      <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
        def testOne(self):
                img = Image("kitten.jpg")
                pixel_orig = img.getPixel(0,75)
                r_orig = pixel_orig.getRed()
                b_orig = pixel_orig.getBlue()
                g_orig = pixel_orig.getGreen()


                changeQuadrantColors(img)
                pixel_new = img.getPixel(0,75)
                r_new = pixel_new.getRed()
                b_new = pixel_new.getBlue()
                g_new = pixel_new.getGreen()
                self.assertEqual(r_new, b_orig, "Checking that the red values are set to original blue values")
                self.assertEqual(g_new, r_orig, "Checking that the green values are set to original red values")
                self.assertEqual(b_new, g_orig, "Checking that the blue values are set to original green values")
myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="mixedupcode_pictures_pp9" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function <c>copyRightSide(img)</c> that copies the right side of the image onto the left side in the image <c>img</c>.</p>
    </statement>
    <blocks>
      <block order="4">
        <cline>from image import *</cline>
      </block>
      <block order="9">
        <cline>def copyRightSide(img):</cline>
      </block>
      <block order="6">
        <cline>        halfway = (int) (img.getWidth() / 2)</cline>
      </block>
      <block order="7">
        <choice correct="yes">
          <cline>        for x in range(halfway, img.getWidth()):</cline>
        </choice>
        <choice>
          <cline>        for x in range(halfway): </cline>
        </choice>
      </block>
      <block order="10">
        <cline>                for y in range(img.getHeight()):</cline>
      </block>
      <block order="1">
        <cline>                        p = img.getPixel(x, y)</cline>
      </block>
      <block order="8">
        <choice correct="yes">
          <cline>                        img.setPixel(x - halfway, y, p)</cline>
        </choice>
        <choice>
          <cline>                        img.setPixel(halfway + x, y, p) </cline>
        </choice>
      </block>
      <block order="3">
        <cline>        win = ImageWin(img.getWidth(), img.getHeight())</cline>
        <cline>        img.draw(win)</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mixedupcode_pictures_ac9">
    <statement>
      <p>Write a function <c>copyRightSide(img)</c> that copies the right side of the image onto the left side in the image <c>img</c>.</p>
    </statement>
    <program xml:id="mixedupcode_pictures_ac9_editor" interactive="activecode" language="python">
      <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
        def testOne(self):
                img = Image("motorcycle.jpg")
                pixel_right = img.getPixel(195,50)

                copyRightSide(img)
                pixel_new = img.getPixel(97,50)
                self.assertEqual(list(pixel_right), list(pixel_new), "Checking that the right side of the image is copied onto the left side")
myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="mixedupcode_pictures_pp10" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a function <c>copyTopQuarter(img)</c> that copies the pixels from the top quarter of the y-axis to the bottom quarter of the y-axis in the image <c>img</c>.</p>
    </statement>
    <blocks>
      <block order="2">
        <cline>from image import *</cline>
      </block>
      <block order="1">
        <cline>def copyTopQuarter(img):</cline>
      </block>
      <block order="5">
        <cline>        quarterHeight = (int) (img.getHeight() / 4)</cline>
      </block>
      <block order="4">
        <cline>        for x in range(img.getWidth()):</cline>
      </block>
      <block order="3">
        <cline>                for y in range(quarterHeight):</cline>
      </block>
      <block order="7">
        <cline>                        p = img.getPixel(x, y)</cline>
      </block>
      <block order="8">
        <cline>                        img.setPixel(x, quarterHeight * 3 + y, p)</cline>
      </block>
      <block order="6">
        <cline>        win = ImageWin(img.getWidth(), img.getHeight())</cline>
        <cline>        img.draw(win)</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="mixedupcode_pictures_ac10">
    <statement>
      <p>Write a function <c>copyTopQuarter(img)</c> that copies the pixels from the top quarter of the y-axis to the bottom quarter of the y-axis in the image <c>img</c>.</p>
    </statement>
    <program xml:id="mixedupcode_pictures_ac10_editor" interactive="activecode" language="python">
      <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
        def testOne(self):
                img = Image("vangogh.jpg")
                pixels1 = img.getPixel(0,0)
                pixels2 = img.getPixel(50, 50)
                pixels3 = img.getPixel(0,111)


                copyTopQuarter(img)
                pixels_new1 = img.getPixel(0,111)
                pixels_new2 = img.getPixel(50,50)
                self.assertEqual(list(pixels1), list(pixels_new1), "Check that the top quarter is copied to bottom quarter")
                self.assertEqual(list(pixels2), list(pixels_new2), "Checking that the pixels not in the bottom quarter stayed the same")
myTests().main()
        </input>
    </program>
  </exercise>
</section>
