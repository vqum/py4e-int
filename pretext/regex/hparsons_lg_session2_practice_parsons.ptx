<?xml version="1.0"?>
<section xml:id="regex_practice-problems-mixed-up-code">
  <title>Practice Problems - Mixed-up Code</title>
  <p>Please answer
            the following problems to the best of your ability without any
            outside help. You can stop working on a problem after you worked
            on it for about four minutes without solving it.</p>
  <subsection xml:id="regex_problems">
    <title>Problems</title>
    <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=hparsons_lg_regex_1_practice_parsons data-questionlist='hparsons_lg_regex_1_hparsons' data-points=10          data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: hparsons_lg_regex_1_hparsons&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
    <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=hparsons_lg_regex_2_practice_parsons data-questionlist='hparsons_lg_regex_2_hparsons' data-points=10          data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: hparsons_lg_regex_2_hparsons&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
    <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=hparsons_lg_regex_3_practice_parsons data-questionlist='hparsons_lg_regex_3_hparsons' data-points=10          data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: hparsons_lg_regex_3_hparsons&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
    <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=hparsons_lg_regex_4_practice_parsons data-questionlist='hparsons_lg_regex_4_hparsons' data-points=10          data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: hparsons_lg_regex_4_hparsons&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
    <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=hparsons_lg_regex_5_practice_parsons data-questionlist='hparsons_lg_regex_5_hparsons' data-points=10          data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: hparsons_lg_regex_5_hparsons&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
    <raw format="html" xml:space="preserve">
&lt;div class="runestone sqcontainer %(optclass)s"&gt;
&lt;div data-component="selectquestion" id=hparsons_lg_regex_6_practice_parsons data-questionlist='hparsons_lg_regex_6_hparsons' data-points=10          data-limit-basecourse=true&gt;
    &lt;p&gt;Loading a dynamic question ...&lt;br/&gt;Selecting from: hparsons_lg_regex_6_hparsons&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</raw>
    <HParsonsNode line="36" runestone_options="{'language': &quot;data-language='regex'&quot;, 'randomize': ' data-randomize=&quot;true&quot;', 'blockanswer': &quot;data-blockanswer='0 1 2'&quot;, 'subchapter': 'hparsons_lg_session2_practice_parsons', 'chapter': 'regex', 'basecourse': 'py4e-int', 'optional': '', 'optclass': '', 'divid': 'hparsons_lg_regex_1_hparsons', 'qnumber': '11-9-7', 'reuse': '', 'initialsetting': '--blocks--\ngr\n[ae]\ny\na', 'dburl': '', 'question_label': '1'}" source="/home/david/comsc020/py4e-int/_sources/regex/hparsons_lg_session2_practice_parsons.rst">
      <p>Please write a regex that would match both word <q>gray</q> and <q>grey</q>.</p>
    </HParsonsNode>
    <HParsonsNode line="50" runestone_options="{'language': &quot;data-language='regex'&quot;, 'randomize': ' data-randomize=&quot;true&quot;', 'blockanswer': &quot;data-blockanswer='0 1 2'&quot;, 'subchapter': 'hparsons_lg_session2_practice_parsons', 'chapter': 'regex', 'basecourse': 'py4e-int', 'optional': '', 'optclass': '', 'divid': 'hparsons_lg_regex_2_hparsons', 'qnumber': '11-9-8', 'reuse': '', 'initialsetting': '--blocks--\n[A-Z]\n[a-z]\n+\n\\w', 'dburl': '', 'question_label': '2'}" source="/home/david/comsc020/py4e-int/_sources/regex/hparsons_lg_session2_practice_parsons.rst">
      <p>Please write a regex that would match a word that starts with an uppercase letter and followed by at least one lowercase letters, like <q>Apple</q>, <q>Banana</q>, or <q>Carrot</q>.</p>
    </HParsonsNode>
    <HParsonsNode line="64" runestone_options="{'language': &quot;data-language='regex'&quot;, 'randomize': ' data-randomize=&quot;true&quot;', 'blockanswer': &quot;data-blockanswer='0 1'&quot;, 'subchapter': 'hparsons_lg_session2_practice_parsons', 'chapter': 'regex', 'basecourse': 'py4e-int', 'optional': '', 'optclass': '', 'divid': 'hparsons_lg_regex_3_hparsons', 'qnumber': '11-9-9', 'reuse': '', 'initialsetting': '--blocks--\n\\d\n{5,7}\n{5}', 'dburl': '', 'question_label': '3'}" source="/home/david/comsc020/py4e-int/_sources/regex/hparsons_lg_session2_practice_parsons.rst">
      <p>Please write a regex to capture numbers with 5-7 digits. For example: 48105, 103028, 1234567.</p>
    </HParsonsNode>
    <HParsonsNode line="77" runestone_options="{'language': &quot;data-language='regex'&quot;, 'randomize': ' data-randomize=&quot;true&quot;', 'blockanswer': &quot;data-blockanswer='0 1 2 3'&quot;, 'subchapter': 'hparsons_lg_session2_practice_parsons', 'chapter': 'regex', 'basecourse': 'py4e-int', 'optional': '', 'optclass': '', 'divid': 'hparsons_lg_regex_4_hparsons', 'qnumber': '11-9-10', 'reuse': '', 'initialsetting': '--blocks--\n[aeiou]\n[a-z]\n*\n[^aeiou]\n+', 'dburl': '', 'question_label': '4'}" source="/home/david/comsc020/py4e-int/_sources/regex/hparsons_lg_session2_practice_parsons.rst">
      <p>Capture words that start with a vowel (a, e, i, o, u), but end with a consonant (any letters that are not a, e, i, o, u).
                    For example, it should match <q>unicorn</q>, <q>it</q>, and <q>element</q>.</p>
    </HParsonsNode>
    <HParsonsNode line="93" runestone_options="{'language': &quot;data-language='regex'&quot;, 'randomize': ' data-randomize=&quot;true&quot;', 'blockanswer': &quot;data-blockanswer='0 1 2'&quot;, 'subchapter': 'hparsons_lg_session2_practice_parsons', 'chapter': 'regex', 'basecourse': 'py4e-int', 'optional': '', 'optclass': '', 'divid': 'hparsons_lg_regex_5_hparsons', 'qnumber': '11-9-11', 'reuse': '', 'initialsetting': '--blocks--\n\\$\\d+\n(?:\\.\\d\\d)\n?\n(\\.\\d\\d)', 'dburl': '', 'question_label': '5'}" source="/home/david/comsc020/py4e-int/_sources/regex/hparsons_lg_session2_practice_parsons.rst">
      <p>Please write a regex to replace the &#x2018;YOUR_REGEX' below to match any price in the form of $3.45 or $23.32 or $400.
                    Note that we are using re.findall(), so please make sure your regex would return the full match string.</p>
      <program language="python">
        <input>
def find_price(content):
    return re.findall('YOUR_REGEX', content)
</input>
      </program>
    </HParsonsNode>
    <HParsonsNode line="114" runestone_options="{'language': &quot;data-language='regex'&quot;, 'randomize': ' data-randomize=&quot;true&quot;', 'blockanswer': &quot;data-blockanswer='0 1 2'&quot;, 'subchapter': 'hparsons_lg_session2_practice_parsons', 'chapter': 'regex', 'basecourse': 'py4e-int', 'optional': '', 'optclass': '', 'divid': 'hparsons_lg_regex_6_hparsons', 'qnumber': '11-9-12', 'reuse': '', 'initialsetting': '--blocks--\n(?:\\w+\\.)\n+\n\\w+\n\\.', 'dburl': '', 'question_label': '6'}" source="/home/david/comsc020/py4e-int/_sources/regex/hparsons_lg_session2_practice_parsons.rst">
      <p>Please write a regex to capture a URL that only consists of characters, numbers, underscore, and dots.
                    For example: www.abc.com, def_ghi.com, a678.cn
                    Note that dots(<q>.</q>) should not appear consecutively, and should not appear as the first or last character. The dot must appear at least once.</p>
    </HParsonsNode>
  </subsection>
  <subsection xml:id="regex_what-to-do-next">
    <title>What to do next</title>
    <raw format="html" xml:space="preserve">&lt;p&gt;Click on the following link to go to the post test: &lt;b&gt;&lt;a id="hparsons_lg_session2_posttest"&gt;&lt;font size="+2"&gt;Post Test&lt;/font&gt;&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;</raw>
    <raw format="html" xml:space="preserve">&lt;script type="text/javascript" &gt;

  window.onload = function() {

    a = document.getElementById("hparsons_lg_session2_posttest")
    a.href = "hparsons_lg_session2_posttest.html"
  };

&lt;/script&gt;</raw>
  </subsection>
</section>
