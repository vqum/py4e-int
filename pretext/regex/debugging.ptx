<?xml version="1.0"?>
<section xml:id="regex_debugging">
  <title>Debugging</title>
  <p>Python has some simple and rudimentary built-in documentation that can
            be quite helpful if you need a quick refresher to trigger your memory
            about the exact name of a particular method. This documentation can be
            viewed in the Python interpreter in interactive mode.</p>
  <p>You can bring up an interactive help system using <c>help()</c>.</p>
  <program language="python">
    <input>
&gt;&gt;&gt; help()

help&gt; modules
</input>
  </program>
  <p>If you know what module you want to use, you can use the
            <c>dir()</c> command to find the methods in the module as follows:</p>
  <program language="python">
    <input>
import re
dir(re)
[.. 'compile', 'copy_reg', 'error', 'escape', 'findall',
'finditer', 'match', 'purge', 'search', 'split', 'sre_compile',
'sre_parse', 'sub', 'subn', 'sys', 'template']
</input>
  </program>
  <exercise label="re-debug-mc1">
    <statement>
      <p>11-9-1: Which of these options will find the methods of the time library?</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>dir(time)</p>
        </statement>
        <feedback>
          <p>Correct! The dir() command helps to find the methods of a given module.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>import time</p>
        </statement>
        <feedback>
          <p>This will import the time module.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>help(time)</p>
        </statement>
        <feedback>
          <p>This will not work.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <p>You can also get a small amount of documentation on a particular method
            using the dir command.</p>
  <program language="python">
    <input>
help (re.search)
Help on function search in module re:

search(pattern, string, flags=0)
    Scan through string looking for a match to the pattern, returning
    a match object, or None if no match was found.
</input>
  </program>
  <p>The built-in documentation is not very extensive, but it can be helpful
            when you are in a hurry or don't have access to a web browser or search
            engine.</p>
  <exercise label="re-debug-ac1">
    <statement>
      <p>Fix the regex equation so that the code matches any dollar sign ($) followed by an integer or float.</p>
    </statement>
    <program xml:id="re-debug-ac1_editor" interactive="activecode" language="python">
      <input>
import re
x = 'The apples cost $9.99, whereas the bananas were only $5 and the oranges were $2.50 each.'
y = re.findall('$[0_9\.]', x)

====
from unittest.gui import TestCaseGui

class MyTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(y, ['$9.99', '$5', '$2.50'], "Testing that the regex equation matches the proper parts of the string.")

MyTests().main()
        </input>
    </program>
  </exercise>
</section>
