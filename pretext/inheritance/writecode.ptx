<?xml version="1.0"?>
<section xml:id="inheritance_write-code-questions">
  <title>Write Code Questions</title>

        <exercise label="inheritance_writecode1q_v2">
          <statement>
            <p>Create a subclass of the <c>Parent</c> class named <c>Child</c> that overrides the inherited <c>eye_color()</c> method to return <c>"I have green eyes."</c></p>
          </statement>
          <program xml:id="inheritance_writecode1q_v2_editor" interactive="activecode" language="python">
            <input>
class Parent:

    def eye_color(self):
        return "I have blue eyes."


from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        lil_child = Child()
        parent = Parent()
        self.assertEqual(lil_child.eye_color(), "I have green eyes.", "Testing Child eye_color")
        self.assertEqual(parent.eye_color(), "I have blue eyes.", "Testing Parent eye_color")
        self.assertIsInstance(lil_child, type(parent), "Testing Child inherits from Parent")

myTests().main()
        </input>
          </program>
        </exercise>

        <exercise label="inheritance_greeter_grumpy_ac">
          <statement>
            <p>Create a subclass of the <c>Greeter</c> class named <c>GrumpyGreeter</c> that overrides the inherited <c>greet</c> method to return <c>"Go Away!"</c>.</p>
          </statement>
          <program xml:id="inheritance_greeter_grumpy_ac_editor" interactive="activecode" language="python">
            <input>
class Greeter:

    def greet(self):
        return "Welcome!"



from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        gg = GrumpyGreeter()
        g = Greeter()
        self.assertEqual(g.greet(), "Welcome!", "Testing Greeter greet")
        self.assertEqual(gg.greet(), "Go Away!", "Testing GrumpyGreeter greet")
        self.assertIsInstance(gg, type(g), "Testing GrumpyGreeter inherits from Greeter")

myTests().main()
        </input>
          </program>
        </exercise>

        <exercise label="inheritance_animal_cow_ac">
          <statement>
            <p>Create a subclass of the <c>Animal</c> class named <c>Cow</c> that overrides the inherited <c>noise</c> method to return <c>"Moo"</c>.</p>
          </statement>
          <program xml:id="inheritance_animal_cow_ac_editor" interactive="activecode" language="python">
            <input>
class Animal:

    def noise(self):
        return "Unknown"



from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        cow = Cow()
        p = Animal()
        self.assertEqual(p.noise(), "Unknown", "Testing Animal noise")
        self.assertEqual(c.noise(), "Moo", "Testing Cow noise")
        self.assertIsInstance(cow, type(p), "Testing Cow inherits from Animal")

myTests().main()
        </input>
          </program>
        </exercise>

        <exercise label="inheritance_actor_over_actor_ac">
          <statement>
            <p>Create a subclass of the <c>Actor</c> class named <c>OverActor</c> that overrides the inherited <c>act</c> method to return <c>"I am super happy!"</c>.</p>
          </statement>
          <program xml:id="inheritance_actor_over_actor_ac_editor" interactive="activecode" language="python">
            <input>
class Actor:

    def act(self):
        return "I am happy!"



from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        a = Actor()
        oa = OverActor()
        self.assertEqual(a.act(), "I am happy!", "Testing Actor act")
        self.assertEqual(oa.act(), "I am super happy!", "Testing OverActor act")
        self.assertIsInstance(oa, type(a), "Testing OverActor inherits from Actor")


myTests().main()
        </input>
          </program>
        </exercise>

        <exercise label="inheritance_student_grad_student_ac">
          <statement>
            <p>Create a subclass of the <c>Student</c> class named <c>GradStudent</c> that calls the <c>__init__</c> method in <c>Student</c> to initialize the first and last name and overrides the inherited <c>fav_food</c> method to return <c>"Sushi"</c>.</p>
          </statement>
          <program xml:id="inheritance_student_grad_student_ac_editor" interactive="activecode" language="python">
            <input>
class Student:

    def __init__(self, first, last):
        self.first = first
        self.last = last

    def fav_food(self):
        return "Pizza"


from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        s = Student("Carl", "X")
        gs = GradStudent("Anjali", "Kumar")
        self.assertEqual(s.fav_food(), "Pizza", "Testing Student fav_food")
        self.assertEqual(s.first, "Carl", "Testing Student first name")
        self.assertEqual(s.last, "X", "Testing Student last name")
        self.assertEqual(gs.first, "Anjali", "Testing GradStudent first name")
        self.assertEqual(gs.last, "Kumar", "Testing GradStudent last name")
        self.assertEqual(gs.fav_food(), "Sushi", "Testing GradStudent fav_food")
        self.assertIsInstance(gs, type(s), "Testing GradStudent inherits from Student")

myTests().main()
        </input>
          </program>
        </exercise>

        <exercise label="ut_is_ascending_ac">
          <statement>
            <p>Write a function <c>is_ascending(nums)</c> that returns <c>True</c> if the numbers in the list <c>nums</c> are sorted in ascending order and <c>False</c> otherwise. If the list <c>nums</c> has less than two numbers in it return <c>True</c>.  For example, <c>is_ascending([1,2,3])</c> should return <c>True</c>, <c>is_ascending([1])</c> should also return <c>True</c>, and <c>is_ascending([3,2,1])</c> should return <c>False</c>.</p>
          </statement>
          <program xml:id="ut_is_ascending_ac_editor" interactive="activecode" language="python">
            <input>
def is_ascending(nums):


from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(is_ascending([1,2,3]),True,"is_ascending([1,2,3])")
        self.assertEqual(is_ascending([3,2,1]),False,"is_ascending([3,2,1])")
        self.assertEqual(is_ascending([3,1,2]),False,"is_ascending([3,1,2])")
        self.assertEqual(is_ascending([2,3,1]),False,"is_ascending([2,3,1])")
        self.assertEqual(is_ascending([1,2,4,3]),False,"is_ascending([1,2,4,3])")
        self.assertEqual(is_ascending([1,2,3,0]),False,"is_ascending([1,2,3,0])")
        self.assertEqual(is_ascending([4,1,2,3]),False,"is_ascending(4,1,2,3])")
        self.assertEqual(is_ascending([1,4,2,3]),False,"is_ascending(1,4,2,3])")
        self.assertEqual(is_ascending([1,2,3,4]),True,"is_ascending([1,2,3,4])")
        self.assertEqual(is_ascending([1]),True,"is_ascending([1])")
        self.assertEqual(is_ascending([]),True,"is_ascending([])")


myTests().main()
        </input>
          </program>
        </exercise>

        <exercise label="ut_sum_lists_ac">
          <statement>
            <p>Write a function <c>sum_lists(l1,l2)</c> that take two lists of numbers, <c>l1</c> and <c>l2</c> and returns a list with the sum of the corresponding items in <c>l1</c> and <c>l2</c>.  For example, <c>sum_lists([1,2],[3,4])</c> would return [4,6]. If the two lists are of different length then returned list should be the same length as the shortest list. For example, <c>sum_lists([1],[4,3])</c> should return <c>[5]</c>.</p>
          </statement>
          <program xml:id="ut_sum_lists_ac_editor" interactive="activecode" language="python">
            <input>
def sum_lists(l1,l2):


from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(sum_lists([1,2],[3,4]),[4,6],"sum_lists([1,2],[3,4])")
        self.assertEqual(sum_lists([1],[2]),[3],"sum_lists([1],[2])")
        self.assertEqual(sum_lists([-1,-2],[3,4]),[2,2],"sum_lists([-1,-2],[3,4])")
        self.assertEqual(sum_lists([2,1],[4,3]),[6,4],"sum_lists([2,1],[4,3])")
        self.assertEqual(sum_lists([1],[4,3]),[5],"sum_lists([1],[4,3])")
        self.assertEqual(sum_lists([1,2],[4]),[5],"sum_lists([1,2],[4])")
        self.assertEqual(sum_lists([],[4,3]),[],"sum_lists([],[4,3])")



myTests().main()
        </input>
          </program>
        </exercise>

        <exercise label="ut_avg_pos_ac">
          <statement>
            <p>Write a function <c>avg_pos(nums)</c> that returns the average of the positive numbers in the list <c>nums</c>.  For example, <c>avg_pos([80, -20, 90])</c> should return <c>85.0</c>.</p>
          </statement>
          <program xml:id="ut_avg_pos_ac_editor" interactive="activecode" language="python">
            <input>
def avg_pos(nums):


from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertAlmostEqual(avg_pos([80, -20, 90]),85.0,1,"avg_pos([80, -20, 90])")
        self.assertAlmostEqual(avg_pos([-1, 50, 93]),71.5,1,"avg_pos([-1, 50, 93])")
        self.assertAlmostEqual(avg_pos([-1, -20, 93]),93,1,"avg_pos([-1, -20, 93])")
        self.assertAlmostEqual(avg_pos([27, 34, 93]),51.3,1,"avg_pos([27, 34, 93])")
        self.assertAlmostEqual(avg_pos([83, 95, 93]),90.3,1,"avg_pos([83, 95, 93])")
        self.assertAlmostEqual(avg_pos([72, 81]),76.5,1,"avg_pos([72, 81])")


myTests().main()
        </input>
          </program>
        </exercise>

        <exercise label="ut_quartile_ac">
          <statement>
            <p>Write a function <c>quartile(value)</c> that returns <c>0</c> if <c>value</c> is &lt;= 0.25, <c>1</c> if <c>value</c> is &gt; 0.25 and &lt;= 0.5, <c>2</c> if <c>value</c> is &gt; 0.5 and &lt;= 0.75, and <c>3</c> if <c>value</c> &gt; 0.75.</p>
          </statement>
          <program xml:id="ut_quartile_ac_editor" interactive="activecode" language="python">
            <input>
def quartille(value):


from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(quartile(-3),0,"quartile(-3)")
        self.assertEqual(quartile(0),0,"quartile(0)")
        self.assertEqual(quartile(0.1),0,"quartile(0.1)")
        self.assertEqual(quartile(0.25),0,"quartile(0.25)")
        self.assertEqual(quartile(0.26),1,"quartile(0.26)")
        self.assertEqual(quartile(0.3),1,"quartile(0.3)")
        self.assertEqual(quartile(0.49),1,"quartile(0.49)")
        self.assertEqual(quartile(0.5),1,"quartile(0.5)")
        self.assertEqual(quartile(0.6),2,"quartile(0.6)")
        self.assertEqual(quartile(0.75),3,"quartile(0.75)")
        self.assertEqual(quartile(0.8),3,"quartile(0.8)")
        self.assertEqual(quartile(2),3,"quartile(2)")


myTests().main()
        </input>
          </program>
        </exercise>

        <exercise label="ut_dup_adjacent_fix_ac">
          <statement>
            <p>Fix the function <c>dup_adjacent(nums)</c> to return <c>True</c> if there are duplicate adjacent values in <c>nums</c>. For example, <c>dup_adjacent([1,2,1])</c> should return <c>False</c> and <c>dup_adjacent([4, 3, 3, 2])</c> should return <c>True</c>  because of the adjacent 3's.  Return <c>False</c> if the length of the list is less than two.</p>
          </statement>
          <program xml:id="ut_dup_adjacent_fix_ac_editor" interactive="activecode" language="python">
            <input>
def dup_adjacent(nums):
    if len(nums) == 2:
        return False
    for i in range(len(nums)):
        curr = nums[i]
        prev = nums[i-1]
        if curr == prev:
            return True
        else:
            return False


from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(dup_adjacent([1,2,1]),False,"dup_adjacent([1,2,1])")
        self.assertEqual(dup_adjacent([4, 3, 3, 2]),True,"dup_adjacent([4, 3, 3, 2])")
        self.assertEqual(dup_adjacent([2, 2, 3, 4]),True,"dup_adjacent([2, 2, 3, 4])")
        self.assertEqual(dup_adjacent([2, 1, 4, 4]),True,"dup_adjacent([2, 1, 4, 4])")
        self.assertEqual(dup_adjacent([2, 2]),True,"dup_adjacent([2, 2])")
        self.assertEqual(dup_adjacent([4, 3, 2, 3]),False,"dup_adjacent([4, 3, 2, 3])")
        self.assertEqual(dup_adjacent([]),False,"dup_adjacent([])")
        self.assertEqual(dup_adjacent([3]),False,"dup_adjacent([3])")


myTests().main()
        </input>
          </program>
        </exercise>
</section>
