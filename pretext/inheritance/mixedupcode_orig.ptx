<?xml version="1.0"?>
<section xml:id="inheritance_mixed-up-code-questions">
  <title>Mixed-Up Code Questions</title>
  <exercise label="inheritance_mixed1_v3" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a class <c>Person</c> with a <c>constructor</c> that takes <c>first_name</c> and <c>last_name</c> and inititalize those attributes in the current object. Next, create a class called <c>Customer</c> that inherits from <c>Person</c> with a constructor that takes <c>first_name</c>, <c>last_name</c>, and <c>id</c>.  Call the constructor in <c>Person</c> to initialize <c>first_name</c> and <c>last_name</c> and then also set the <c>id</c> attribute in the <c>Customer</c> object.  For example, <c>Person("Barb", "Ericson").last_name == "Ericson"</c> and <c>Customer("Barb", "Ericson", "a1").id == ``"a1"</c>.</p>
    </statement>
    <blocks>
      <block order="10">
        <cline>class Person:</cline>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>    def __init__(self, first_name, last_name):</cline>
        </choice>
        <choice>
          <cline>    def init(first_name, last_name): </cline>
        </choice>
      </block>
      <block order="6">
        <cline>        self.first_name = first_name</cline>
        <cline>        self.last_name = last_name</cline>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline>class Customer(Person):</cline>
        </choice>
        <choice>
          <cline>class Customer extends Person: </cline>
        </choice>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>    def __init__(self, first_name, last_name, id):</cline>
        </choice>
        <choice>
          <cline>    def __init__(first_name, last_name, id): </cline>
        </choice>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>        super().__init__(first_name, last_name)</cline>
        </choice>
        <choice>
          <cline>        super.__init__(first_name, last_name) </cline>
        </choice>
      </block>
      <block order="7">
        <cline>        self.id = id</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="inheritance_mixed1_ac_v3">
    <statement>
      <p>Write a class <c>Person</c> with a <c>constructor</c> that takes <c>first_name</c> and <c>last_name</c> and inititalize those attributes in the current object. Next, create a class called <c>Customer</c> that inherits from <c>Person</c> with a constructor that takes <c>first_name</c>, <c>last_name</c>, and <c>id</c>.  Call the constructor in <c>Person</c> to initialize <c>first_name</c> and <c>last_name</c> and then also set the <c>id</c> attribute in the <c>Customer</c> object.  For example, <c>Person("Barb", "Ericson").last_name == "Ericson"</c> and <c>Customer("Barb", "Ericson", "a1").id == ``"a1"</c>.</p>
    </statement>
    <program xml:id="inheritance_mixed1_ac_v3_editor" interactive="activecode" language="python">
      <input>

====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        p = Person("Barb", "Ericson")
        c = Customer("Barb", "Ericson", "a1")
        self.assertEqual(p.first_name, "Barb", 'Person("Barb", "Ericson").first_name')
        self.assertEqual(p.last_name, "Ericson", 'Person("Barb", "Ericson").last_name')
        self.assertEqual(c.first_name, "Barb", 'Customer("Barb", "Ericson", "a1").first_name')
        self.assertEqual(c.last_name, "Ericson", 'Customer("Barb", "Ericson", "a1").last_name')
        self.assertEqual(c.id, "a1", 'Customer("Barb", "Ericson", "a1").id')


myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="inheritance_mixed2_v3" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a class called <c>Person</c> with a <c>constructor</c> that takes <c>name</c> and <c>age</c>. Next, create a class called <c>Student</c> that inherits from <c>Person</c>.
            The constructor for <c>Student</c> takes <c>name</c>, <c>age</c>, and <c>gpa</c>. Have the constructor for the <c>Student</c> class call the constructor for the <c>Person</c> class to initialize the <c>name</c> and <c>age</c> and then set the value for the <c>gpa</c>.  For example, <c>Person('Susan', 13).name</c> would be <c>"Susan"</c>
            and <c>Student('Sally', 16, 3.7).gpa</c> would be <c>3.7</c>.</p>
    </statement>
    <blocks>
      <block order="11">
        <cline>class Person:</cline>
      </block>
      <block order="5">
        <choice correct="yes">
          <cline>    def __init__(self, name, age):</cline>
        </choice>
        <choice>
          <cline>    def init(self, name, age): </cline>
        </choice>
      </block>
      <block order="8">
        <cline>        self.name = name</cline>
        <cline>        self.age = age</cline>
      </block>
      <block order="7">
        <choice correct="yes">
          <cline>class Student(Person):</cline>
        </choice>
        <choice>
          <cline>class Student(): </cline>
        </choice>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline>    def __init__(self, name, age, gpa):</cline>
        </choice>
        <choice>
          <cline>    def __init__(name, age, gpa): </cline>
        </choice>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>        super().__init__(name, age)</cline>
        </choice>
        <choice>
          <cline>        super.__init__(name,age) </cline>
        </choice>
      </block>
      <block order="4">
        <cline>        self.gpa = gpa</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="inheritance_mixed2_ac_v3">
    <statement>
      <p>Write a class called <c>Person</c> with a <c>constructor</c> that takes <c>name</c> and <c>age</c>. Next, create a class called <c>Student</c> that inherits from <c>Person</c>.
            The constructor for <c>Student</c> takes <c>name</c>, <c>age</c>, and <c>gpa</c>. Have the constructor for the <c>Student</c> class call the constructor for the <c>Person</c> class to initialize the <c>name</c> and <c>age</c> and then set the value for the <c>gpa</c>.  For example, <c>Person('Susan', 13).name</c> would be <c>"Susan"</c>
            and <c>Student('Sally', 16, 3.7).gpa</c> would be <c>3.7</c>.</p>
    </statement>
    <program xml:id="inheritance_mixed2_ac_v3_editor" interactive="activecode" language="python">
      <input>

====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        p = Person('Susan', 13)
        s = Student('Sally', 16, 3.7)
        self.assertEqual(p.name, 'Susan', "Person('Susan', 13).name")
        self.assertEqual(p.age, 13, "Person('Susan', 13).age")
        self.assertEqual(s.name, 'Sally', "Student('Sally', 16, 3.7).name")
        self.assertEqual(s.age, 16, "Student('Sally', 16, 3.7).age")
        self.assertEqual(s.gpa, 3.7, "Student('Sally', 16, 3.7).gpa")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="inheritance_mixed3_v3" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a class called <c>Building</c> with a <c>constructor</c> that inititalizes the attributes <c>floors</c> and <c>sqft</c>. Next, create a class called <c>House</c> that inherits from <c>Building</c>. The constructor for <c>House</c> should take <c>floors</c>, <c>sqft</c>, and <c>bedrooms</c> and call the construtor in <c>Building</c> to initialze the <c>floors</c> and <c>sqft</c> before setting the attribute <c>bedrooms</c>. For example, <c>Building(15, 10000).floors</c> would be <c>15</c>
            and <c>House(3, 2000, 3).bedrooms</c> would be <c>3</c>.</p>
    </statement>
    <blocks>
      <block order="2">
        <cline>class Building:</cline>
      </block>
      <block order="6">
        <choice correct="yes">
          <cline>    def __init__(self, floors, sqft):</cline>
        </choice>
        <choice>
          <cline>    def __init__(floors, sqft): </cline>
        </choice>
      </block>
      <block order="11">
        <cline>        self.floors = floors</cline>
        <cline>        self.sqft = sqft</cline>
      </block>
      <block order="9">
        <choice correct="yes">
          <cline>class House(Building):</cline>
        </choice>
        <choice>
          <cline>class House: </cline>
        </choice>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>    def __init__(self, floors, sqft, bedrooms):</cline>
        </choice>
        <choice>
          <cline>    def __init__(floors, sqft, bedrooms): </cline>
        </choice>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>        super().__init__(floors, sqft)</cline>
        </choice>
        <choice>
          <cline>        super.__init__(floors, sqft) </cline>
        </choice>
      </block>
      <block order="7">
        <cline>        self.bedrooms = bedrooms</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="inheritance_mixed3_ac_v3">
    <statement>
      <p>Write a class called <c>Building</c> with a <c>constructor</c> that inititalizes the attributes <c>floors</c> and <c>sqft</c>. Next, create a class called <c>House</c> that inherits from <c>Building</c>. The constructor for <c>House</c> should take <c>floors</c>, <c>sqft</c>, and <c>bedrooms</c> and call the construtor in <c>Building</c> to initialze the <c>floors</c> and <c>sqft</c> before setting the attribute <c>bedrooms</c>. For example, <c>Building(15, 10000).floors</c> would be <c>15</c>
            and <c>House(3, 2000, 3).bedrooms</c> would be <c>3</c>.</p>
    </statement>
    <program xml:id="inheritance_mixed3_ac_v3_editor" interactive="activecode" language="python">
      <input>

====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        b = Building(15, 10000)
        h = House(3, 2000, 4)

        self.assertEqual(b.floors, 15, "Building(15, 10000).floors")
        self.assertEqual(b.sqft, 10000, "Building(15, 10000).sqft")
        self.assertEqual(h.floors, 3, "House(3, 2000, 4).floors")
        self.assertEqual(h.sqft, 2000, "House(3, 2000, 4).sqft")
        self.assertEqual(h.bedrooms, 4, "House(3, 2000, 4).bedrooms")


myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="inheritance_mixed4_v3" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a class <c>Account</c> with an attribute of <c>balance</c> and methods of <c>deposit</c> and <c>withdraw</c> that both take an <c>amount</c>. For example, <c>Account(200).withdraw(50)</c> should set the balance to <c>150</c> and <c>Account(200).deposit(100)</c> should set the balance to <c>300</c>.</p>
    </statement>
    <blocks>
      <block order="6">
        <cline>class Account:</cline>
      </block>
      <block order="8">
        <cline>    def __init__(self, balance):</cline>
      </block>
      <block order="9">
        <cline>        self.balance = balance</cline>
      </block>
      <block order="10">
        <choice correct="yes">
          <cline>    def deposit(self, amount):</cline>
        </choice>
        <choice>
          <cline>    def deposit(amount): </cline>
        </choice>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>        self.balance += amount</cline>
        </choice>
        <choice>
          <cline>        balance += amount </cline>
        </choice>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>    def withdraw(self, amount):</cline>
        </choice>
        <choice>
          <cline>    def withdraw(amount): </cline>
        </choice>
      </block>
      <block order="11">
        <choice correct="yes">
          <cline>        self.balance -= amount</cline>
        </choice>
        <choice>
          <cline>        balance -= amount </cline>
        </choice>
      </block>
    </blocks>
  </exercise>
  <exercise label="inheritance_mixed4_ac_v3">
    <statement>
      <p>Write a class <c>Account</c> with an attribute of <c>balance</c> and methods of <c>deposit</c> and <c>withdraw</c> that both take an <c>amount</c>. For example, <c>Account(200).withdraw(50)</c> should set the balance to <c>150</c> and <c>Account(200).deposit(100)</c> should set the balance to <c>300</c>.</p>
    </statement>
    <program xml:id="inheritance_mixed4_ac_v3_editor" interactive="activecode" language="python">
      <input>


====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        a = Account(200)
        b = Account(200)
        c = Account(50)
        d = Account(50)
        e = Account(-50)
        a.withdraw(50)
        self.assertEqual(a.balance, 150, 'Account(200).withdraw(50)')
        b.deposit(100)
        self.assertEqual(b.balance, 300, 'Account(200).deposit(100)')
        c.withdraw(75)
        self.assertEqual(c.balance, -25, 'Account(50).withdraw(75)')
        d.deposit(50)
        self.assertEqual(d.balance, 100, 'Account(50).deposit(50)')
        e.deposit(50)
        self.assertEqual(e.balance, 0, 'Account(-50).deposit(50)')

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="inheritance_mixed5_v3" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a class <c>Animal</c> with an attribute of <c>name</c> and a method <c>make_noise</c> that returns <c>"Noise"</c>.  Then create a <c>Dog</c> class that inherits from <c>Animal</c>.  Have the constructor in <c>Dog</c> call the constructor in <c>Animal</c> to initialze the <c>name</c>. In <c>Dog</c> also override the <c>make_noise</c> method inherited from <c>Animal</c> to return <c>"Bark"</c>.   For example, <c>Animal("Diana").make_noise()</c> returns <c>"Noise"</c> and <c>Dog("Percy").make_noise()</c> returns <c>"Bark"</c>.</p>
    </statement>
    <blocks>
      <block order="11">
        <choice correct="yes">
          <cline>class Animal:</cline>
        </choice>
        <choice>
          <cline>def class Animal: </cline>
        </choice>
      </block>
      <block order="9">
        <cline>    def __init__(self, name):</cline>
      </block>
      <block order="2">
        <cline>        self.name = name</cline>
      </block>
      <block order="12">
        <choice correct="yes">
          <cline>    def make_noise(self):</cline>
        </choice>
        <choice>
          <cline>    def make_noise(): </cline>
        </choice>
      </block>
      <block order="6">
        <cline>        return "Noise"</cline>
      </block>
      <block order="10">
        <choice correct="yes">
          <cline>class Dog(Animal):</cline>
        </choice>
        <choice>
          <cline>class Dog: </cline>
        </choice>
      </block>
      <block order="14">
        <cline>    def __init__(self, name):</cline>
      </block>
      <block order="4">
        <cline>        super().__init__(name)</cline>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>    def make_noise(self):</cline>
        </choice>
        <choice>
          <cline>    def make_noise(): </cline>
        </choice>
      </block>
      <block order="8">
        <cline>        return "Bark"</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="inheritance_mixed5_ac_v3">
    <statement>
      <p>Write a class <c>Animal</c> with an attribute of <c>name</c> and a method <c>make_noise</c> that returns <c>"Noise"</c>.  Then create a <c>Dog</c> class that inherits from <c>Animal</c>.  Have the constructor in <c>Dog</c> call the constructor in <c>Animal</c> to initialze the <c>name</c>. In <c>Dog</c> also override the <c>make_noise</c> method inherited from <c>Animal</c> to return <c>"Bark"</c>.   For example, <c>Animal("Diana").make_noise()</c> returns <c>"Noise"</c> and <c>Dog("Percy").make_noise()</c> returns <c>"Bark"</c>.</p>
    </statement>
    <program xml:id="inheritance_mixed5_ac_v3_editor" interactive="activecode" language="python">
      <input>

====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        a = Animal('Diana')
        d = Dog('Percy')
        self.assertEqual(a.make_noise(),"Noise", 'Animal("Diana").make_noise()')
        self.assertEqual(a.name,"Diana", 'Animal("Diana").name')
        self.assertEqual(d.make_noise(),"Bark", 'Dog("Percy").make_noise()')
        self.assertEqual(d.name,"Percy", 'Dog("Percy").name')



myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="inheritance_mixed6_v3" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Create a class <c>Animal</c> with an attribute of <c>name</c> and a method <c>make_noise</c> that returns <c>"Noise"</c>.  Then create a <c>Cat</c> class that inherits from <c>Animal</c>.  Have the constructor in <c>Cat</c> call the constructor in <c>Animal</c> to initialze the <c>name</c>. In <c>Cat</c> also override the <c>make_noise</c> method inherited from <c>Animal</c> to return <c>"Meow"</c>.   For example, <c>Animal("Spike").make_noise()</c> returns <c>"Noise"</c> and <c>Cat("Diana").make_noise()</c> returns <c>"Meow"</c>.</p>
    </statement>
    <blocks>
      <block order="7">
        <choice correct="yes">
          <cline>class Animal:</cline>
        </choice>
        <choice>
          <cline>def class Animal: </cline>
        </choice>
      </block>
      <block order="6">
        <cline>    def __init__(self, name):</cline>
      </block>
      <block order="3">
        <cline>        self.name = name</cline>
      </block>
      <block order="9">
        <choice correct="yes">
          <cline>    def make_noise(self):</cline>
        </choice>
        <choice>
          <cline>    def make_noise(): </cline>
        </choice>
      </block>
      <block order="12">
        <cline>        return "Noise"</cline>
      </block>
      <block order="10">
        <choice correct="yes">
          <cline>class Cat(Animal):</cline>
        </choice>
        <choice>
          <cline>class Cat: </cline>
        </choice>
      </block>
      <block order="11">
        <cline>    def __init__(self, name):</cline>
      </block>
      <block order="14">
        <cline>        super().__init__(name)</cline>
      </block>
      <block order="2">
        <choice correct="yes">
          <cline>    def make_noise(self):</cline>
        </choice>
        <choice>
          <cline>    def make_noise(): </cline>
        </choice>
      </block>
      <block order="13">
        <cline>        return "Meow"</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="inheritance_mixed6_ac_v3">
    <statement>
      <p>Write a class <c>Animal</c> with an attribute of <c>name</c> and a method <c>make_noise</c> that returns <c>"Noise"</c>.  Then create a <c>Cat</c> class that inherits from <c>Animal</c>.  Have the constructor in <c>Cat</c> call the constructor in <c>Animal</c> to initialze the <c>name</c>. In <c>Cat</c> also override the <c>make_noise</c> method inherited from <c>Animal</c> to return <c>"Meow"</c>.   For example, <c>Animal("Spike").make_noise()</c> returns <c>"Noise"</c> and <c>Cat("Diana").make_noise()</c> returns <c>"Meow"</c>.</p>
    </statement>
    <program xml:id="inheritance_mixed6_ac_v3_editor" interactive="activecode" language="python">
      <input>

====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        a = Animal('Spike')
        c = Cat('Diana')
        self.assertEqual(a.make_noise(),"Noise", 'Animal("Spike").make_noise()')
        self.assertEqual(a.name,"Spike", 'Animal("Spike").name')
        self.assertEqual(c.make_noise(),"Meow", 'Cat("Diana").make_noise()')
        self.assertEqual(c.name,"Diana", 'Cat("Diana").name')

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="inheritance_mixed7_v3" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Given a class <c>Point</c> that has attributes of <c>x</c> and <c>y</c> and a method <c>distance_to(self, other)</c> that returns the distance between the current point (self) and the other point, create a <c>MyCircle</c> class that has a constructor that takes two attibutes <c>p1</c> and <c>p2</c> both objects of the class <c>Point</c>.  Also create a <c>radius</c> method that returns the radius of the circle (half the distance between the two points that define circle).</p>
    </statement>
    <blocks>
      <block order="7">
        <choice correct="yes">
          <cline>class MyCircle:</cline>
        </choice>
        <choice>
          <cline>class MyCircle(Point): </cline>
        </choice>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>    def __init__(self, p1, p2):</cline>
        </choice>
        <choice>
          <cline>    def __init__(p1, p2): </cline>
        </choice>
      </block>
      <block order="2">
        <cline>        self.p1 = p1</cline>
        <cline>        self.p2 = p2</cline>
      </block>
      <block order="9">
        <choice correct="yes">
          <cline>    def radius(self):</cline>
        </choice>
        <choice>
          <cline>    def radius(): </cline>
        </choice>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>        return self.p1.distance_to(self.p2) / 2</cline>
        </choice>
        <choice>
          <cline>        return p1.distance_to(p2) / 2 </cline>
        </choice>
      </block>
    </blocks>
  </exercise>
  <exercise label="inheritance_mixed7_ac_v3">
    <statement>
      <p>Given a class <c>Point</c> defined below that has attributes of <c>x</c> and <c>y</c> and a method <c>distance_to(self, other)</c> that returns the distance between the current point (self) and the other point, write a <c>MyCircle</c> class that that has a constructor that takes two attibutes <c>p1</c> and <c>p2</c> both objects of the class <c>Point</c>.  Also create a <c>radius</c> method that returns the radius of the circle (half the distance between the two points that define circle).</p>
    </statement>
    <program xml:id="inheritance_mixed7_ac_v3_editor" interactive="activecode" language="python">
      <input>
class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def distance_to(self, other):
        return (((self.x - other.x) ** 2) + ((self.y - other.y) ** 2)) ** 0.5

====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        p1 = Point(5,5)
        p2 = Point(5, 10)
        p3 = Point(5, 15)
        c = MyCircle(p1, p2)
        c2 = MyCircle(p1, p3)

        self.assertEqual(c.p1, p1, "test of MyCircle p1 for first circle")
        self.assertEqual(c.p2, p2, "test of MyCircle p2 for first circle")
        self.assertEqual(c.radius(), p1.distance_to(p2) /  2, "test of MyCircle radius for first circle")
        self.assertEqual(c2.p2, p3, "test of MyCircle p2 for second circle")
        self.assertEqual(c2.radius(), p1.distance_to(p3) /  2, "test of MyCircle radius for second circle")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="inheritance_mixed8_v3" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Given a class <c>Item</c> with an attributes of <c>name</c> and <c>price</c>, create an <c>Order</c> class that has an attribute <c>item_list</c> that is intitialized to the empty list in the constructor.  Then add an <c>add_item</c> method that takes an <c>item</c> and appends it to the <c>item_list</c> attribute.   Then create a <c>get_total</c> method that returns the total price for all the items in <c>item_list</c> attribute.</p>
    </statement>
    <blocks>
      <block order="6">
        <choice correct="yes">
          <cline>class Order:</cline>
        </choice>
        <choice>
          <cline>class Order(Item): </cline>
        </choice>
      </block>
      <block order="4">
        <cline>    def __init__(self):</cline>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>        self.item_list = []</cline>
        </choice>
        <choice>
          <cline>        self.item_list = () </cline>
        </choice>
      </block>
      <block order="7">
        <cline>    def add_item(self, item):</cline>
      </block>
      <block order="8">
        <choice correct="yes">
          <cline>        self.item_list.appand(item)</cline>
        </choice>
        <choice>
          <cline>        item_list.appand(item) </cline>
        </choice>
      </block>
      <block order="14">
        <cline>    def get_total(self):</cline>
      </block>
      <block order="12">
        <cline>        total = 0</cline>
      </block>
      <block order="13">
        <choice correct="yes">
          <cline>        for item in self.item_list:</cline>
        </choice>
        <choice>
          <cline>        for item in item_list: </cline>
        </choice>
      </block>
      <block order="5">
        <cline>            total += item.price</cline>
      </block>
      <block order="1">
        <cline>        return total</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="inheritance_mixed8_ac_v3">
    <statement>
      <p>Given a class <c>Item</c> define below with attributes of <c>name</c> and <c>price</c>, write an <c>Order</c> class that has an attribute <c>item_list</c> that is intitialized to the empty list in the constructor.  Then add an <c>add_item</c> method that takes an <c>item</c> and appends it to the <c>item_list</c> attribute.   Then create a <c>get_total</c> method that returns the total price for all the items in <c>item_list</c> attribute.</p>
    </statement>
    <program xml:id="inheritance_mixed8_ac_v3_editor" interactive="activecode" language="python">
      <input>
class Item:
    def __init__(self, name, price):
        self.name = name
        self.price = price


====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        i1 = Item('hamburger', 6.99)
        i2 = Item('fries', 2.99)
        i3 = Item('drink', 1.99)
        i4 = Item("dessert", 1.99)
        o1 = Order()
        o1.add_item(i1)
        o1.add_item(i2)
        o1.add_item(i3)
        self.assertEqual(o1.get_total(), 11.97, 'get_total on order 1')
        o1.add_item(i4)
        self.assertEqual(o1.get_total(), 13.96, 'get total on order 2')
        o2 = Order()
        o2.add_item(i1)
        o2.add_item(i4)
        self.assertEqual(o2.get_total(), 8.98, 'get_total on order 3')
        o2.add_item(i2)
        self.assertEqual(o2.get_total(), 11.97, 'get_total on order 4')
        o2.add_item(i3)
        self.assertEqual(o2.get_total(), 13.96, 'get_total on order 5')



myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="inheritance_mixed9_v3" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Given a class <c>Account</c> with an attribute <c>balance</c> and methods of <c>deposit</c> and <c>withdraw</c>, create a <c>SavingsAccount</c> class that inherits from <c>Account</c>.  Create a constructor that takes <c>balance</c> and <c>interest</c>.  In the <c>SavingsAccount</c> constructor call the <c>Account</c> constructor to intitialze the <c>balance</c> and then initialize the <c>interest</c>.   Then create a <c>pay_interest</c> method that adds the interest to the balance (divide the interest rate by 100 and multiply it by the balance to determine the amount to add).</p>
    </statement>
    <blocks>
      <block order="11">
        <choice correct="yes">
          <cline>class SavingsAccount(Account):</cline>
        </choice>
        <choice>
          <cline>class SavingsAccount: </cline>
        </choice>
      </block>
      <block order="7">
        <choice correct="yes">
          <cline>    def __init__(self, balance, interest):</cline>
        </choice>
        <choice>
          <cline>    def __init__(balance, interest): </cline>
        </choice>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>        super().__init__(balance)</cline>
        </choice>
        <choice>
          <cline>        super.__init__(balance) </cline>
        </choice>
      </block>
      <block order="10">
        <cline>        self.interest = interest</cline>
      </block>
      <block order="1">
        <choice correct="yes">
          <cline>    def pay_interest(self):</cline>
        </choice>
        <choice>
          <cline>    def pay_interest(): </cline>
        </choice>
      </block>
      <block order="8">
        <cline>        amount = self.interest / 100</cline>
      </block>
      <block order="9">
        <choice correct="yes">
          <cline>        self.balance += amount * self.balance</cline>
        </choice>
        <choice>
          <cline>        self.balance += self.amount * self.balance </cline>
        </choice>
      </block>
    </blocks>
  </exercise>
  <exercise label="inheritance_mixed9_ac_v3">
    <statement>
      <p>Given a class <c>Account</c> with an attribute <c>balance</c> and methods of <c>deposit</c> and <c>withdraw</c>, create a <c>SavingsAccount</c> class hat inherits from <c>Account</c>.  Write a constructor that takes <c>balance</c> and <c>interest</c>.  In the <c>SavingsAccount</c> constructor call the <c>Account</c> constructor to intitialze the <c>balance</c> and then initialize the <c>interest</c>.   Then create a <c>pay_interest</c> method that adds the interest to the balance (divide the interest rate by 100 and multiply it by the balance to determine the amount to add).</p>
    </statement>
    <program xml:id="inheritance_mixed9_ac_v3_editor" interactive="activecode" language="python">
      <input>
class Account:
    def __init__(self, balance):
        self.balance = balance
    def deposit(self, amount):
        self.balance += amount
    def withdraw(self, amount):
        self.balance -= amount



====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        s = SavingsAccount(200, 1.5)
        s.withdraw(50)
        self.assertEqual(s.balance, 150, "test of withdraw")
        s.deposit(75)
        self.assertEqual(s.balance, 225, "test of deposit")
        s.pay_interest()
        self.assertAlmostEqual(s.balance, 228.375, 3, "test of pay_interest")




myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="inheritance_mixed10_v3" numbered="yes" adaptive="yes" indentation="hide" language="python">
    <statement>
      <p>Given a class <c>Treasure</c> that has attributes of <c>name</c> and <c>points</c>, create a class <c>Room</c> that has attributes of <c>name</c> and <c>treasures</c>.  Initialize <c>treasures</c> to the empty list in the constructor.  Create a <c>add_treasure</c> method in <c>Room</c> that adds a passed <c>Treasure</c> object to <c>treasures</c>.  Next create a <c>get_points</c> method in <c>Room</c> that returns the total of all of the points for the <c>Treasure</c> in <c>treasures</c>.</p>
    </statement>
    <blocks>
      <block order="13">
        <choice correct="yes">
          <cline>class Room:</cline>
        </choice>
        <choice>
          <cline>class Room (Treasure): </cline>
        </choice>
      </block>
      <block order="2">
        <cline>    def __init__(self, name):</cline>
      </block>
      <block order="10">
        <cline>        self.name = name</cline>
        <cline>        self.treasures = []</cline>
      </block>
      <block order="11">
        <cline>    def add_treasure(self, treasure):</cline>
      </block>
      <block order="3">
        <choice correct="yes">
          <cline>        self.treasures.append(treasure)</cline>
        </choice>
        <choice>
          <cline>        treasures.append(treasure) </cline>
        </choice>
      </block>
      <block order="9">
        <cline>    def get_points(self):</cline>
      </block>
      <block order="6">
        <cline>        total = 0</cline>
      </block>
      <block order="4">
        <choice correct="yes">
          <cline>        for treasure in self.treasures:</cline>
        </choice>
        <choice>
          <cline>        for treasure in treasures: </cline>
        </choice>
      </block>
      <block order="1">
        <cline>            total += treasure.points</cline>
      </block>
      <block order="7">
        <cline>        return total</cline>
      </block>
    </blocks>
  </exercise>
  <exercise label="inheritance_mixed10_ac_v3">
    <statement>
      <p>Given a class <c>Treasure</c> below that has attributes of <c>name</c> and <c>points</c>, create a class <c>Room</c> that has attributes of <c>name</c> and <c>treasures</c>.  Initialize <c>treasures</c> to the empty list in the constructor.  Create a <c>add_treasure</c> method in <c>Room</c> that adds a passed <c>Treasure</c> object to <c>treasures</c>.  Next create a <c>get_points</c> method in <c>Room</c> that returns the total of all of the points for the <c>Treasure</c> in <c>treasures</c>.</p>
    </statement>
    <program xml:id="inheritance_mixed10_ac_v3_editor" interactive="activecode" language="python">
      <input>
class Treasure:
    def __init__(self, name, points):
        self.name = name
        self.points = points



====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        t1 = Treasure("Ring", 100)
        t2 = Treasure("Lamp", 300)
        t3 = Treasure("Necklace", 200)
        t4 = Treasure("Shoes", 150)
        r1 = Room("Kitchen")
        r1.add_treasure(t1)
        r1.add_treasure(t2)
        self.assertEqual(r1.get_points(), 400, "test of get_points on room 1")
        r2 = Room("Billards")
        r2.add_treasure(t3)
        r2.add_treasure(t4)
        self.assertEqual(r2.get_points(), 350, "test of get_points on room 2")
        r3 = Room("Living Room")
        r3.add_treasure(t1)
        self.assertEqual(r3.get_points(), 100, "test of get_points on room 3")
        r4 = Room("Pantry")
        r4.add_treasure(t2)
        self.assertEqual(r4.get_points(), 300, "test of get_points on room 4")




myTests().main()
        </input>
    </program>
  </exercise>
</section>
