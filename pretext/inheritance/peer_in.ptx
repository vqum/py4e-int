<section xml:id="inheritance_peer-instruction-inheritance-multiple-choice-questions">
        <title>Peer Instruction: Inheritance Multiple Choice Questions</title>

    <exercise label="ctp-inheritance-20_Inheritance_5">
        <statement>

        <p>Q-1: In the following pairs of words, the first is the subclass and the second is the superclass. Which of them is a correct example of inheritance?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>dog, cat</p>
                </statement>
                <feedback>
                    <p>Incorrect! A Dog is not a Cat.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>dog, animal</p>
                </statement>
                <feedback>
                    <p>Correct! A Dog is an Animal where Dog is the subclass and Animal is the superclass.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>animal, dog</p>
                </statement>
                <feedback>
                    <p>Incorrect! A Dog is an Animal where Dog is the subclass and Animal is the superclass and not the other way around.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>dog, tail</p>
                </statement>
                <feedback>
                    <p>Incorrect! A Dog has a Tail. It's not a "is-a" relationship.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>None of the above</p>
                </statement>
                <feedback>
                    <p>Incorrect! A Dog is an Animal where Dog is the subclass and Animal is the superclass.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="ctp-inheritance-20_Inheritance_7">
        <statement>

        <p>Q-2: What is the output of this code?</p>
        <program language="python"><input>
class A:
   def __init__(self, x):
      self.x = x
   def __str__(self):
      return str(self.x)

class B(A):
   def __init__(self, x):
      self.x = x * 2

b = B(5)
print(b)
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>5</p>
                </statement>
                <feedback>
                    <p>Incorrect! A Subclass only specifies what is different from its Superclass. Here B is the subclass and A is the superclass where only the "__init__" method is different them. Since "b = B(5)" has been called, the "__init__" method from B will be executed and not A. So, "x=5" will be multuplied by 2.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>10</p>
                </statement>
                <feedback>
                    <p>Correct! A Subclass only specifies what is different from its Superclass. Here B is the subclass and A is the superclass where only the "__init__" method is different them. Since "b = B(5)" has been called, the "__init__" method from B will be executed and not A. So, "x=5" will be multuplied by 2.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>510</p>
                </statement>
                <feedback>
                    <p>Incorrect! A Subclass only specifies what is different from its Superclass. Here B is the subclass and A is the superclass where only the "__init__" method is different them. Since "b = B(5)" has been called, the "__init__" method from B will be executed and not A. So, "x=5" will be multuplied by 2.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>This will cause an error</p>
                </statement>
                <feedback>
                    <p>Incorrect! This will not cause an error. A Subclass only specifies what is different from its Superclass. Here B is the subclass and A is the superclass where only the "__init__" method is different them. Since "b = B(5)" has been called, the "__init__" method from B will be executed and not A. So, "x=5" will be multuplied by 2.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>I don't know</p>
                </statement>
                <feedback>
                    <p>Incorrect! A Subclass only specifies what is different from its Superclass. Here B is the subclass and A is the superclass where only the "__init__" method is different them. Since "b = B(5)" has been called, the "__init__" method from B will be executed and not A. So, "x=5" will be multuplied by 2.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="ctp-inheritance-20_Inheritance_9">
        <statement>

        <p>Q-3: What is the output of this code?</p>
        <program language="python"><input>
class Person:

   count = 0

   def __init__(self,first="J",last="Doe"):
     self.first = first
     self.last = last
     Person.count = Person.count + 1

   def __str__(self):
     return self.first + " " + self.last

   def work(self):
     print("Gotta pay the bills")

   def play(self):
     print("TV time!")

   def eat(self):
     print("Woohoo, fast food!")

   def sleep(self):
     print("Zzzzzzzzzzzzzzzz")

class Student(Person):

   def __init__(self,first,last,year):
     Person.__init__(self,first,last)
     self.year = year

   def sleep(self):
     print("So tired.... but... Internet!")

   def study(self):
     print("Need to study... but... Internet!")

   def __str__(self):
     return Person.__str__(self)+" '"+str(self.year%100)


p = Person(<q>George</q>, <q>Williker</q>)
s = Student(<q>Buddy</q>,</q>Bob</q>, "2014")
s.study()
p.study()
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>"Need to study...but...Internet!</q> will print twice</p>
                </statement>
                <feedback>
                    <p>Incorrect! There's a "study" attribute in Student but not in Person.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>"Need to study... but...Internet!</q> will print once</p>
                </statement>
                <feedback>
                    <p>Correct! There's a "study" attribute in Student but not in Person.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Nothing will print</p>
                </statement>
                <feedback>
                    <p>Incorrect! There's a "study" attribute in Student but not in Person.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>This will cause an error</p>
                </statement>
                <feedback>
                    <p>Incorrect! There's a "study" attribute in Student but not in Person.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>I don't know</p>
                </statement>
                <feedback>
                    <p>Incorrect! There's a "study" attribute in Student but not in Person.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="ctp-inheritance-20_Inheritance_13">
        <statement>

        <p>Q-4: What is the output of this code?</p>
        <program language="python"><input>
class A:
   count = 0
   def __init__(self, x):
      self.x = x+1
      A.count = A.count+1

A1 = A(2)
A2 = A(4)
A3 = A(5)

print(A1.x, A1.count, A.count)
</input></program>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>3, 1, 1</p>
                </statement>
                <feedback>
                    <p>Incorrect! Here "count" is a class variable which is shared by all objects of type A. It can be accessed by using A.count, A1.count, A2.count, and A3.count. "self.x" is unique for each object. So, "A1.x = 2 + 1 = 3" whereas "count" gets added by "1" thrice.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>3, 1, 3</p>
                </statement>
                <feedback>
                    <p>Incorrect! Here "count" is a class variable which is shared by all objects of type A. It can be accessed by using A.count, A1.count, A2.count, and A3.count. "self.x" is unique for each object. So, "A1.x = 2 + 1 = 3" whereas "count" gets added by "1" thrice.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>3, 3, 3</p>
                </statement>
                <feedback>
                    <p>Correct! Here "count" is a class variable which is shared by all objects of type A. It can be accessed by using A.count, A1.count, A2.count, and A3.count. "self.x" is unique for each object. So, "A1.x = 2 + 1 = 3" whereas "count" gets added by "1" thrice.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>2, 1, 1</p>
                </statement>
                <feedback>
                    <p>Incorrect! Here "count" is a class variable which is shared by all objects of type A. It can be accessed by using A.count, A1.count, A2.count, and A3.count. "self.x" is unique for each object. So, "A1.x = 2 + 1 = 3" whereas "count" gets added by "1" thrice.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>I don't know</p>
                </statement>
                <feedback>
                    <p>Incorrect! Here "count" is a class variable which is shared by all objects of type A. It can be accessed by using A.count, A1.count, A2.count, and A3.count. "self.x" is unique for each object. So, "A1.x = 2 + 1 = 3" whereas "count" gets added by "1" thrice.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
    </section>

