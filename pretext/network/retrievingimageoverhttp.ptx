<?xml version="1.0"?>
<section xml:id="network_retrieving-an-image-over-http">
  <title>Retrieving an image over HTTP</title>
  <p>In the above example, we retrieved a plain text file which had newlines
            in the file and we simply copied the data to the screen as the program
            ran. We can use a similar program to retrieve an image across using
            HTTP. Instead of copying the data to the screen as the program runs, we
            accumulate the data in a string, trim off the headers, and then save the
            image data to a file as follows:</p>
  <program xml:id="urljpeg" interactive="activecode" language="python3">
    <input>
import socket
import time

HOST = 'data.pr4e.org'
PORT = 80
mysock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
mysock.connect((HOST, PORT))
mysock.sendall(b'GET http://data.pr4e.org/cover3.jpg HTTP/1.0\r\n\r\n')
count = 0
picture = b""

while True:
    data = mysock.recv(5120)
    if len(data) &lt; 1: break
    #time.sleep(0.25)
    count = count + len(data)
    print(len(data), count)
    picture = picture + data

mysock.close()

# Look for the end of the header (2 CRLF)
pos = picture.find(b"\r\n\r\n")
print('Header length', pos)
print(picture[:pos].decode())

# Skip past the header and save the picture data
picture = picture[pos+4:]
fhand = open("stuff.jpg", "wb")
fhand.write(picture)
fhand.close()
        </input>
  </program>
  <p>You can see that for this url, the <c>Content-Type</c> header
            indicates that body of the document is an image
            (<c>image/jpeg</c>). Once the program completes, you can view the
            image data by opening the file <c>stuff.jpg</c> in an image
            viewer.</p>
  <exercise label="image_header">
    <statement>
      <p>Q-2: The ________ header indicates that the body of the document is a jpeg image. <var/>  </p>
    </statement>
    <setup>
      <var>
        <condition string="Content-Type">
          <feedback>
            <p>Yes, the &#x2018;Content-Type' header has value <q>image/jpeg</q> to denote its a jpeg image.</p>
          </feedback>
        </condition>
        <condition string=".*">
          <feedback>
            <p>Try again! This has to be an exact match.</p>
          </feedback>
        </condition>
      </var>
    </setup>
  </exercise>
  <p>As the program runs, you can see that we don't get 5120 characters each
            time we call the <c>recv()</c> method. We get as many characters
            as have been transferred across the network to us by the web server at
            the moment we call <c>recv()</c>. In this example, we either get
            as few as 3200 characters each time we request up to 5120 characters of
            data.</p>
  <p>Your results may be different depending on your network speed. Also note
            that on the last call to <c>recv()</c> we get 3167 bytes, which is
            the end of the stream, and in the next call to <c>recv()</c> we
            get a zero-length string that tells us that the server has called
            <c>close()</c> on its end of the socket and there is no more data
            forthcoming.</p>
  <p>We can slow down our successive <c>recv()</c> calls by
            uncommenting the call to <c>time.sleep()</c>. This way, we wait a
            quarter of a second after each call so that the server can <q>get ahead</q>
            of us and send more data to us before we call <c>recv()</c> again.</p>
  <p>Now other than the first and last calls to <c>recv()</c>, we now
            get 5120 characters each time we ask for new data.</p>
  <p>There is a buffer between the server making <c>send()</c> requests
            and our application making <c>recv()</c> requests. When we run the
            program with the delay in place, at some point the server might fill up
            the buffer in the socket and be forced to pause until our program starts
            to empty the buffer. The pausing of either the sending application or
            the receiving application is called <q>flow control.</q></p>
  <exercise label="jpeg_slow">
    <statement>
      <p>Q-3: Which of the following methods will slow down the requests made in the program above?</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>time.sleep()</p>
        </statement>
        <feedback>
          <p>Uncommenting time.sleep() will make the program wait a quarter of a second before sending the next call.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>mysock.sendall()</p>
        </statement>
        <feedback>
          <p>This command does exactly what it says: it sends all the data included in the ().</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>picture.find()</p>
        </statement>
        <feedback>
          <p>This command does exactly what it says: it finds the contents of the () in the picture variable.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>mysock.recv()</p>
        </statement>
        <feedback>
          <p>The recv() method receives the message, it is what we want to slow down our requests to. How do we do that?</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>
